package com.sponberg.fluid.tool;

import java.io.File;
import java.io.FileWriter;
import java.util.Arrays;

import com.sponberg.fluid.FluidApp;
import com.sponberg.fluid.datastore.DatastoreManager;
import com.sponberg.fluid.datastore.DatastoreManager.Database;
import com.sponberg.fluid.datastore.DatastoreTransaction;
import com.sponberg.fluid.datastore.SQLQueryDefault;
import com.sponberg.fluid.datastore.SQLQueryRaw;
import com.sponberg.fluid.datastore.SQLQueryResultDefault;
import com.sponberg.fluid.parser.SettingsParser;
import com.sponberg.fluid.test.JavaDatastoreService;
import com.sponberg.fluid.test.MockApp;
import com.sponberg.fluid.test.MockResourceService;
import com.sponberg.fluid.test.MockSecurityService;
import com.sponberg.fluid.util.StringUtil;

public class MakeDatastoreClasses {

	String[] ignorelist = { "__fluid_ptable", "sqlite_sequence" };

	String rootPackageName;
	
	String workingDir;
	
	public MakeDatastoreClasses(String workingDir) throws Exception {

		System.out.println("Running MakeDatastoreClasses");

		MockApp mockApp = new MockApp();
		mockApp.setResourceService(new MockResourceService(workingDir));
		
		SettingsParser parser = new SettingsParser();
		parser.initialize(mockApp);
		
		this.rootPackageName = mockApp.getSettings().getValue("base-package") + ".datastore";
		
		this.workingDir = workingDir;
		
		/*
		 * TODO _28/11/2015 by Joey : why create another mockApp here, there's already one 
		 * created above
		 */
		MockApp app = new MockApp();
		app.setSecurityService(new MockSecurityService());

		app.setResourceService(new MockResourceService(workingDir));
		
		DatastoreManager2 manager = new DatastoreManager2();
		app.setDatastoreManager(manager);
		
		writeDatabaseClass(app);
		
		for (Database database: app.getDatastoreManager().getDatabases()) {
			//Set up datastore service 
			JavaDatastoreService ds = new JavaDatastoreService();
			ds.setInMemory(true);
			app.setDatastoreService(ds);

			//Create or update databases 
			manager.createOrUpdateDatabase(database, app);
			
			//Make constant classes from database schema, this only affects 
			//This is the func that actually creates the database classes for use 
			//in the app
			readSchemaAndMakeConstantsSourceCode(database);			
		}
		
		System.out.println("Finished Running MakeDatastoreClasses");
	}

	private void writeDatabaseClass(FluidApp app) throws Exception {
		
		String packageName = rootPackageName;
		
		String className = "DS";
		
		StringBuilder objectBuilderTop = new StringBuilder();
		
		objectBuilderTop.append("// This class is AutoGenerated code by the MakeDatastoreClasses tool.\n");
		objectBuilderTop.append("// DO NOT EDIT.\n\n");
		
		objectBuilderTop.append("package ");
		objectBuilderTop.append(packageName);
		objectBuilderTop.append(";\n\n");

		objectBuilderTop.append("public class ");
		objectBuilderTop.append(className);
		objectBuilderTop.append(" {\n\n");
		
		for (Database database: app.getDatastoreManager().getDatabases()) {
			objectBuilderTop.append("\tpublic static final String ");
			objectBuilderTop.append(database.getSimpleName());
			objectBuilderTop.append(" = \"");
			objectBuilderTop.append(database.getSimpleName());
			objectBuilderTop.append("\";\n\n");
		}
		
		objectBuilderTop.append("}");
		
		File dir = new File(workingDir + "/src/" + packageName.replaceAll("\\.", "/"));
		dir.mkdirs();
		FileWriter writer = new FileWriter(dir.getAbsolutePath() + "/" + className + ".java");
		writer.write(objectBuilderTop.toString());
		writer.close();
	}
	
	private void readSchemaAndMakeConstantsSourceCode(Database database) throws Exception {

		SQLQueryDefault q = new SQLQueryDefault("sqlite_master", "name");
		q.setWhere("{} = ?");
		q.getWhere().addStringParameter("type", "table");

		System.out.println("Making classes for " + database.getSimpleName());
		
		DatastoreTransaction txn = new DatastoreTransaction(database.getSimpleName());
		txn.start();

		for (SQLQueryResultDefault result : txn.query(q)) {
			String tableName = result.getString("name");
			if (Arrays.binarySearch(ignorelist, tableName) >= 0)
				continue;
			
			String tableNameFormatted = StringUtil.underscoreToCamelCase(tableName);
			addFields(database, tableNameFormatted, tableName, txn);
		}

		txn.rollback();
	}

	public void addFields(Database database, String tableNameFormatted,
			String tableName, DatastoreTransaction txn) throws Exception {
		
		System.out.println("===> table : " + tableName);
		String _table = tableName;
		if (DatastoreManager.isSQLKeyword(tableName)) {
			_table = "[" + tableName + "]";
		}
		
		String packageName = rootPackageName + "." + database.getSimpleName().toLowerCase();
		
		String className = "DS" + tableNameFormatted;
		
		StringBuilder objectBuilderTop = new StringBuilder();
		StringBuilder objectBuilderConstants = new StringBuilder();
		StringBuilder objectBuilderBottom = new StringBuilder();
		
		objectBuilderTop.append("// This class is AutoGenerated code by the MakeDatastoreClasses tool.\n");
		objectBuilderTop.append("// DO NOT EDIT.\n\n");
		
		objectBuilderTop.append("package ");
		objectBuilderTop.append(packageName);
		objectBuilderTop.append(";\n\n");

		objectBuilderTop.append("import com.sponberg.fluid.datastore.DSBase;\n");
		objectBuilderTop.append("import com.sponberg.fluid.datastore.SQLTable;\n\n");
		
		objectBuilderTop.append("public class ");
		objectBuilderTop.append(className);
		objectBuilderTop.append(" extends DSBase implements SQLTable {\n\n");
		
		objectBuilderTop.append("\t// Table name\n\n");
		
		objectBuilderConstants.append("\tpublic static final String ");
		objectBuilderConstants.append("_table");
		objectBuilderConstants.append(" = \"");
		objectBuilderConstants.append(_table);
		objectBuilderConstants.append("\";\n\n");
		
		objectBuilderConstants.append("\t// Table fields\n\n");
		
		objectBuilderBottom.append("\t// Methods\n\n");
		
		SQLQueryRaw q = new SQLQueryRaw("pragma table_info('" + tableName + "')");
		for (SQLQueryResultDefault result : txn.query(q)) {

			String columnName = result.getString("name");

			String columnNameFormatted = StringUtil.underscoreToCamelCase(columnName);
			
			String columnNameLowerCase = columnNameFormatted.substring(0, 1).toLowerCase() + columnNameFormatted.substring(1);
			
			String javaType = getJavaType(result.getString("type"));
			
			String constantName = columnNameLowerCase;
			
			objectBuilderConstants.append("\tpublic static final String ");
			objectBuilderConstants.append(constantName);
			objectBuilderConstants.append(" = \"");
			objectBuilderConstants.append(columnName);
			objectBuilderConstants.append("\"; // " + javaType + "\n");
			
			objectBuilderBottom.append("\tpublic void set");
			objectBuilderBottom.append(columnNameFormatted);
			objectBuilderBottom.append("(");
			objectBuilderBottom.append(javaType);
			objectBuilderBottom.append(" ");
			objectBuilderBottom.append(columnNameLowerCase);
			objectBuilderBottom.append(") {\n");
			objectBuilderBottom.append("\t\tthis._data.put(");
			objectBuilderBottom.append(className);
			objectBuilderBottom.append(".");
			objectBuilderBottom.append(constantName);
			objectBuilderBottom.append(", ");
			objectBuilderBottom.append(columnNameLowerCase);
			objectBuilderBottom.append(");\n");
			objectBuilderBottom.append("\t}\n\n");

			objectBuilderBottom.append("\tpublic ");
			objectBuilderBottom.append(javaType);
			objectBuilderBottom.append(" get");
			objectBuilderBottom.append(columnNameFormatted);
			objectBuilderBottom.append("() {\n");
			objectBuilderBottom.append("\t\t return (");
			objectBuilderBottom.append(javaType);
			objectBuilderBottom.append(") _data.get(");
			objectBuilderBottom.append(className);
			objectBuilderBottom.append(".");
			objectBuilderBottom.append(constantName);
			objectBuilderBottom.append(");\n");
			objectBuilderBottom.append("\t}\n\n");
		}

		objectBuilderBottom.append("\tpublic String _getTableName() {\n");
		objectBuilderBottom.append("\t\treturn ");
		objectBuilderBottom.append(className);
		objectBuilderBottom.append(".");
		objectBuilderBottom.append("_table;\n");
		objectBuilderBottom.append("\t}\n\n");

		objectBuilderBottom.append("}");
		
		File dir = new File(workingDir + "/src/" + packageName.replaceAll("\\.", "/"));
		dir.mkdirs();
		FileWriter writer = new FileWriter(dir.getAbsolutePath() + "/" + className + ".java");
		writer.write(objectBuilderTop.toString());
		writer.write(objectBuilderConstants.toString());
		writer.write("\n");
		writer.write(objectBuilderBottom.toString());
		writer.close();
	}

	static String getJavaType(String type) {
		type = type.toLowerCase();
		if (type.equals("text"))
			return "String";
		else if (type.equals("integer"))
			return "Integer";
		else if (type.equals("real"))
			return "Double";
		else if (type.equals("blob"))
			return "byte[]";
		else
			throw new RuntimeException("Unknown type " + type);
	}
	
	public static void main(String[] args) throws Exception {

		String workingDir = (args.length > 0) ? args[0] : ".";

		new MakeDatastoreClasses(workingDir);
	}

}
