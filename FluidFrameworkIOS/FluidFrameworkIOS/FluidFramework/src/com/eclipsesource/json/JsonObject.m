//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-external/com/eclipsesource/json/JsonObject.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/eclipsesource/json/Json.h"
#include "com/eclipsesource/json/JsonObject.h"
#include "com/eclipsesource/json/JsonValue.h"
#include "com/eclipsesource/json/JsonWriter.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/Reader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@implementation FFTJsonObject

- (id)init {
  if (self = [super init]) {
    names__ = [[JavaUtilArrayList alloc] init];
    values_ = [[JavaUtilArrayList alloc] init];
    table_ = [[FFTJsonObject_HashIndexTable alloc] init];
  }
  return self;
}

- (id)initWithFFTJsonObject:(FFTJsonObject *)object {
  return [self initFFTJsonObjectWithFFTJsonObject:object withBoolean:NO];
}

- (id)initFFTJsonObjectWithFFTJsonObject:(FFTJsonObject *)object
                             withBoolean:(BOOL)unmodifiable {
  if (self = [super init]) {
    if (object == nil) {
      @throw [[JavaLangNullPointerException alloc] initWithNSString:@"object is null"];
    }
    if (unmodifiable) {
      names__ = [JavaUtilCollections unmodifiableListWithJavaUtilList:((FFTJsonObject *) nil_chk(object))->names__];
      values_ = [JavaUtilCollections unmodifiableListWithJavaUtilList:object->values_];
    }
    else {
      names__ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:((FFTJsonObject *) nil_chk(object))->names__];
      values_ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:object->values_];
    }
    table_ = [[FFTJsonObject_HashIndexTable alloc] init];
    [self updateHashIndex];
  }
  return self;
}

- (id)initWithFFTJsonObject:(FFTJsonObject *)object
                withBoolean:(BOOL)unmodifiable {
  return [self initFFTJsonObjectWithFFTJsonObject:object withBoolean:unmodifiable];
}

+ (FFTJsonObject *)readFromWithJavaIoReader:(JavaIoReader *)reader {
  return [((FFTJsonValue *) nil_chk([FFTJsonValue readFromWithJavaIoReader:reader])) asObject];
}

+ (FFTJsonObject *)readFromWithNSString:(NSString *)string {
  return [((FFTJsonValue *) nil_chk([FFTJsonValue readFromWithNSString:string])) asObject];
}

+ (FFTJsonObject *)unmodifiableObjectWithFFTJsonObject:(FFTJsonObject *)object {
  return [[FFTJsonObject alloc] initWithFFTJsonObject:object withBoolean:YES];
}

- (FFTJsonObject *)addWithNSString:(NSString *)name
                           withInt:(int)value {
  (void) [self addWithNSString:name withFFTJsonValue:[FFTJson valueWithInt:value]];
  return self;
}

- (FFTJsonObject *)addWithNSString:(NSString *)name
                          withLong:(long long int)value {
  (void) [self addWithNSString:name withFFTJsonValue:[FFTJson valueWithLong:value]];
  return self;
}

- (FFTJsonObject *)addWithNSString:(NSString *)name
                         withFloat:(float)value {
  (void) [self addWithNSString:name withFFTJsonValue:[FFTJson valueWithFloat:value]];
  return self;
}

- (FFTJsonObject *)addWithNSString:(NSString *)name
                        withDouble:(double)value {
  (void) [self addWithNSString:name withFFTJsonValue:[FFTJson valueWithDouble:value]];
  return self;
}

- (FFTJsonObject *)addWithNSString:(NSString *)name
                       withBoolean:(BOOL)value {
  (void) [self addWithNSString:name withFFTJsonValue:[FFTJson valueWithBoolean:value]];
  return self;
}

- (FFTJsonObject *)addWithNSString:(NSString *)name
                      withNSString:(NSString *)value {
  (void) [self addWithNSString:name withFFTJsonValue:[FFTJson valueWithNSString:value]];
  return self;
}

- (FFTJsonObject *)addWithNSString:(NSString *)name
                  withFFTJsonValue:(FFTJsonValue *)value {
  if (name == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"name is null"];
  }
  if (value == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"value is null"];
  }
  [((FFTJsonObject_HashIndexTable *) nil_chk(table_)) addWithNSString:name withInt:[((id<JavaUtilList>) nil_chk(names__)) size]];
  [names__ addWithId:name];
  [((id<JavaUtilList>) nil_chk(values_)) addWithId:value];
  return self;
}

- (FFTJsonObject *)setWithNSString:(NSString *)name
                           withInt:(int)value {
  (void) [self setWithNSString:name withFFTJsonValue:[FFTJson valueWithInt:value]];
  return self;
}

- (FFTJsonObject *)setWithNSString:(NSString *)name
                          withLong:(long long int)value {
  (void) [self setWithNSString:name withFFTJsonValue:[FFTJson valueWithLong:value]];
  return self;
}

- (FFTJsonObject *)setWithNSString:(NSString *)name
                         withFloat:(float)value {
  (void) [self setWithNSString:name withFFTJsonValue:[FFTJson valueWithFloat:value]];
  return self;
}

- (FFTJsonObject *)setWithNSString:(NSString *)name
                        withDouble:(double)value {
  (void) [self setWithNSString:name withFFTJsonValue:[FFTJson valueWithDouble:value]];
  return self;
}

- (FFTJsonObject *)setWithNSString:(NSString *)name
                       withBoolean:(BOOL)value {
  (void) [self setWithNSString:name withFFTJsonValue:[FFTJson valueWithBoolean:value]];
  return self;
}

- (FFTJsonObject *)setWithNSString:(NSString *)name
                      withNSString:(NSString *)value {
  (void) [self setWithNSString:name withFFTJsonValue:[FFTJson valueWithNSString:value]];
  return self;
}

- (FFTJsonObject *)setWithNSString:(NSString *)name
                  withFFTJsonValue:(FFTJsonValue *)value {
  if (name == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"name is null"];
  }
  if (value == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"value is null"];
  }
  int index = [self indexOfWithNSString:name];
  if (index != -1) {
    (void) [((id<JavaUtilList>) nil_chk(values_)) setWithInt:index withId:value];
  }
  else {
    [((FFTJsonObject_HashIndexTable *) nil_chk(table_)) addWithNSString:name withInt:[((id<JavaUtilList>) nil_chk(names__)) size]];
    [names__ addWithId:name];
    [((id<JavaUtilList>) nil_chk(values_)) addWithId:value];
  }
  return self;
}

- (FFTJsonObject *)removeWithNSString:(NSString *)name {
  if (name == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"name is null"];
  }
  int index = [self indexOfWithNSString:name];
  if (index != -1) {
    [((FFTJsonObject_HashIndexTable *) nil_chk(table_)) removeWithInt:index];
    (void) [((id<JavaUtilList>) nil_chk(names__)) removeWithInt:index];
    (void) [((id<JavaUtilList>) nil_chk(values_)) removeWithInt:index];
  }
  return self;
}

- (FFTJsonObject *)mergeWithFFTJsonObject:(FFTJsonObject *)object {
  if (object == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"object is null"];
  }
  for (FFTJsonObject_Member * __strong member in nil_chk(object)) {
    (void) [self setWithNSString:((FFTJsonObject_Member *) nil_chk(member))->name_ withFFTJsonValue:member->value_];
  }
  return self;
}

- (FFTJsonValue *)getWithNSString:(NSString *)name {
  if (name == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"name is null"];
  }
  int index = [self indexOfWithNSString:name];
  return index != -1 ? [((id<JavaUtilList>) nil_chk(values_)) getWithInt:index] : nil;
}

- (int)getIntWithNSString:(NSString *)name
                  withInt:(int)defaultValue {
  FFTJsonValue *value = [self getWithNSString:name];
  return value != nil ? [value asInt] : defaultValue;
}

- (long long int)getLongWithNSString:(NSString *)name
                            withLong:(long long int)defaultValue {
  FFTJsonValue *value = [self getWithNSString:name];
  return value != nil ? [value asLong] : defaultValue;
}

- (float)getFloatWithNSString:(NSString *)name
                    withFloat:(float)defaultValue {
  FFTJsonValue *value = [self getWithNSString:name];
  return value != nil ? [value asFloat] : defaultValue;
}

- (double)getDoubleWithNSString:(NSString *)name
                     withDouble:(double)defaultValue {
  FFTJsonValue *value = [self getWithNSString:name];
  return value != nil ? [value asDouble] : defaultValue;
}

- (BOOL)getBooleanWithNSString:(NSString *)name
                   withBoolean:(BOOL)defaultValue {
  FFTJsonValue *value = [self getWithNSString:name];
  return value != nil ? [value asBoolean] : defaultValue;
}

- (NSString *)getStringWithNSString:(NSString *)name
                       withNSString:(NSString *)defaultValue {
  FFTJsonValue *value = [self getWithNSString:name];
  return value != nil ? [value asString] : defaultValue;
}

- (int)size {
  return [((id<JavaUtilList>) nil_chk(names__)) size];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilList>) nil_chk(names__)) isEmpty];
}

- (id<JavaUtilList>)names {
  return [JavaUtilCollections unmodifiableListWithJavaUtilList:names__];
}

- (id<JavaUtilIterator>)iterator {
  id<JavaUtilIterator> namesIterator = [((id<JavaUtilList>) nil_chk(names__)) iterator];
  id<JavaUtilIterator> valuesIterator = [((id<JavaUtilList>) nil_chk(values_)) iterator];
  return [[FFTJsonObject_$1 alloc] initWithJavaUtilIterator:namesIterator withJavaUtilIterator:valuesIterator];
}

- (void)writeWithFFTJsonWriter:(FFTJsonWriter *)writer {
  [((FFTJsonWriter *) nil_chk(writer)) writeObjectOpen];
  id<JavaUtilIterator> namesIterator = [((id<JavaUtilList>) nil_chk(names__)) iterator];
  id<JavaUtilIterator> valuesIterator = [((id<JavaUtilList>) nil_chk(values_)) iterator];
  BOOL first = YES;
  while ([((id<JavaUtilIterator>) nil_chk(namesIterator)) hasNext]) {
    if (!first) {
      [writer writeObjectSeparator];
    }
    [writer writeMemberNameWithNSString:[namesIterator next]];
    [writer writeMemberSeparator];
    [((FFTJsonValue *) nil_chk([((id<JavaUtilIterator>) nil_chk(valuesIterator)) next])) writeWithFFTJsonWriter:writer];
    first = NO;
  }
  [writer writeObjectClose];
}

- (BOOL)isObject {
  return YES;
}

- (FFTJsonObject *)asObject {
  return self;
}

- (NSUInteger)hash {
  int result = 1;
  result = 31 * result + ((int) [((id<JavaUtilList>) nil_chk(names__)) hash]);
  result = 31 * result + ((int) [((id<JavaUtilList>) nil_chk(values_)) hash]);
  return result;
}

- (BOOL)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if (obj == nil) {
    return NO;
  }
  if ([self getClass] != [nil_chk(obj) getClass]) {
    return NO;
  }
  FFTJsonObject *other = (FFTJsonObject *) check_class_cast(obj, [FFTJsonObject class]);
  return [((id<JavaUtilList>) nil_chk(names__)) isEqual:other->names__] && [((id<JavaUtilList>) nil_chk(values_)) isEqual:other->values_];
}

- (int)indexOfWithNSString:(NSString *)name {
  int index = [((FFTJsonObject_HashIndexTable *) nil_chk(table_)) getWithId:name];
  if (index != -1 && [((NSString *) nil_chk(name)) isEqual:[((id<JavaUtilList>) nil_chk(names__)) getWithInt:index]]) {
    return index;
  }
  return [((id<JavaUtilList>) nil_chk(names__)) lastIndexOfWithId:name];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inputStream {
  @synchronized(self) {
    {
      [((JavaIoObjectInputStream *) nil_chk(inputStream)) defaultReadObject];
      table_ = [[FFTJsonObject_HashIndexTable alloc] init];
      [self updateHashIndex];
    }
  }
}

- (void)updateHashIndex {
  int size = [((id<JavaUtilList>) nil_chk(names__)) size];
  for (int i = 0; i < size; i++) {
    [((FFTJsonObject_HashIndexTable *) nil_chk(table_)) addWithNSString:[names__ getWithInt:i] withInt:i];
  }
}

- (void)copyAllFieldsTo:(FFTJsonObject *)other {
  [super copyAllFieldsTo:other];
  other->names__ = names__;
  other->table_ = table_;
  other->values_ = values_;
}
- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (IOSObjectArray *)__annotations_readFromWithJavaIoReader_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_readFromWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}


+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "JsonObject", NULL, 0x1, NULL },
    { "initWithFFTJsonObject:", "JsonObject", NULL, 0x1, NULL },
    { "initWithFFTJsonObject:withBoolean:", "JsonObject", NULL, 0x2, NULL },
    { "readFromWithJavaIoReader:", "readFrom", "Lcom.eclipsesource.json.JsonObject;", 0x9, "Ljava.io.IOException;" },
    { "readFromWithNSString:", "readFrom", "Lcom.eclipsesource.json.JsonObject;", 0x9, NULL },
    { "unmodifiableObjectWithFFTJsonObject:", "unmodifiableObject", "Lcom.eclipsesource.json.JsonObject;", 0x9, NULL },
    { "addWithNSString:withInt:", "add", "Lcom.eclipsesource.json.JsonObject;", 0x1, NULL },
    { "addWithNSString:withLong:", "add", "Lcom.eclipsesource.json.JsonObject;", 0x1, NULL },
    { "addWithNSString:withFloat:", "add", "Lcom.eclipsesource.json.JsonObject;", 0x1, NULL },
    { "addWithNSString:withDouble:", "add", "Lcom.eclipsesource.json.JsonObject;", 0x1, NULL },
    { "addWithNSString:withBoolean:", "add", "Lcom.eclipsesource.json.JsonObject;", 0x1, NULL },
    { "addWithNSString:withNSString:", "add", "Lcom.eclipsesource.json.JsonObject;", 0x1, NULL },
    { "addWithNSString:withFFTJsonValue:", "add", "Lcom.eclipsesource.json.JsonObject;", 0x1, NULL },
    { "setWithNSString:withInt:", "set", "Lcom.eclipsesource.json.JsonObject;", 0x1, NULL },
    { "setWithNSString:withLong:", "set", "Lcom.eclipsesource.json.JsonObject;", 0x1, NULL },
    { "setWithNSString:withFloat:", "set", "Lcom.eclipsesource.json.JsonObject;", 0x1, NULL },
    { "setWithNSString:withDouble:", "set", "Lcom.eclipsesource.json.JsonObject;", 0x1, NULL },
    { "setWithNSString:withBoolean:", "set", "Lcom.eclipsesource.json.JsonObject;", 0x1, NULL },
    { "setWithNSString:withNSString:", "set", "Lcom.eclipsesource.json.JsonObject;", 0x1, NULL },
    { "setWithNSString:withFFTJsonValue:", "set", "Lcom.eclipsesource.json.JsonObject;", 0x1, NULL },
    { "removeWithNSString:", "remove", "Lcom.eclipsesource.json.JsonObject;", 0x1, NULL },
    { "mergeWithFFTJsonObject:", "merge", "Lcom.eclipsesource.json.JsonObject;", 0x1, NULL },
    { "getWithNSString:", "get", "Lcom.eclipsesource.json.JsonValue;", 0x1, NULL },
    { "getIntWithNSString:withInt:", "getInt", "I", 0x1, NULL },
    { "getLongWithNSString:withLong:", "getLong", "J", 0x1, NULL },
    { "getFloatWithNSString:withFloat:", "getFloat", "F", 0x1, NULL },
    { "getDoubleWithNSString:withDouble:", "getDouble", "D", 0x1, NULL },
    { "getBooleanWithNSString:withBoolean:", "getBoolean", "Z", 0x1, NULL },
    { "getStringWithNSString:withNSString:", "getString", "Ljava.lang.String;", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "names", NULL, "Ljava.util.List;", 0x1, NULL },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL },
    { "writeWithFFTJsonWriter:", "write", "V", 0x0, "Ljava.io.IOException;" },
    { "isObject", NULL, "Z", 0x1, NULL },
    { "asObject", NULL, "Lcom.eclipsesource.json.JsonObject;", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "indexOfWithNSString:", "indexOf", "I", 0x0, NULL },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x22, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
    { "updateHashIndex", NULL, "V", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "names__", "names", 0x12, "Ljava.util.List;", NULL,  },
    { "values_", NULL, 0x12, "Ljava.util.List;", NULL,  },
    { "table_", NULL, 0x82, "Lcom.eclipsesource.json.JsonObject$HashIndexTable;", NULL,  },
  };
  static J2ObjcClassInfo _FFTJsonObject = { "JsonObject", "com.eclipsesource.json", NULL, 0x1, 41, methods, 3, fields, 0, NULL};
  return &_FFTJsonObject;
}

@end

@implementation FFTJsonObject_Member

- (id)initWithNSString:(NSString *)name
      withFFTJsonValue:(FFTJsonValue *)value {
  if (self = [super init]) {
    self->name_ = name;
    self->value_ = value;
  }
  return self;
}

- (NSString *)getName {
  return name_;
}

- (FFTJsonValue *)getValue {
  return value_;
}

- (NSUInteger)hash {
  int result = 1;
  result = 31 * result + ((int) [((NSString *) nil_chk(name_)) hash]);
  result = 31 * result + ((int) [((FFTJsonValue *) nil_chk(value_)) hash]);
  return result;
}

- (BOOL)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if (obj == nil) {
    return NO;
  }
  if ([self getClass] != [nil_chk(obj) getClass]) {
    return NO;
  }
  FFTJsonObject_Member *other = (FFTJsonObject_Member *) check_class_cast(obj, [FFTJsonObject_Member class]);
  return [((NSString *) nil_chk(name_)) isEqual:other->name_] && [((FFTJsonValue *) nil_chk(value_)) isEqual:other->value_];
}

- (void)copyAllFieldsTo:(FFTJsonObject_Member *)other {
  [super copyAllFieldsTo:other];
  other->name_ = name_;
  other->value_ = value_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withFFTJsonValue:", "Member", NULL, 0x0, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getValue", NULL, "Lcom.eclipsesource.json.JsonValue;", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "value_", NULL, 0x12, "Lcom.eclipsesource.json.JsonValue;", NULL,  },
  };
  static J2ObjcClassInfo _FFTJsonObject_Member = { "Member", "com.eclipsesource.json", "JsonObject", 0x9, 5, methods, 2, fields, 0, NULL};
  return &_FFTJsonObject_Member;
}

@end

@implementation FFTJsonObject_HashIndexTable

- (id)init {
  if (self = [super init]) {
    hashTable_ = [IOSByteArray arrayWithLength:32];
  }
  return self;
}

- (id)initWithFFTJsonObject_HashIndexTable:(FFTJsonObject_HashIndexTable *)original {
  if (self = [super init]) {
    hashTable_ = [IOSByteArray arrayWithLength:32];
    [JavaLangSystem arraycopyWithId:((FFTJsonObject_HashIndexTable *) nil_chk(original))->hashTable_ withInt:0 withId:hashTable_ withInt:0 withInt:(int) [hashTable_ count]];
  }
  return self;
}

- (void)addWithNSString:(NSString *)name
                withInt:(int)index {
  int slot = [self hashSlotForWithId:name];
  if (index < (int) 0xff) {
    (*IOSByteArray_GetRef(nil_chk(hashTable_), slot)) = (char) (index + 1);
  }
  else {
    (*IOSByteArray_GetRef(nil_chk(hashTable_), slot)) = 0;
  }
}

- (void)removeWithInt:(int)index {
  for (int i = 0; i < (int) [((IOSByteArray *) nil_chk(hashTable_)) count]; i++) {
    if (IOSByteArray_Get(hashTable_, i) == index + 1) {
      (*IOSByteArray_GetRef(hashTable_, i)) = 0;
    }
    else if (IOSByteArray_Get(hashTable_, i) > index + 1) {
      (*IOSByteArray_GetRef(hashTable_, i))--;
    }
  }
}

- (int)getWithId:(id)name {
  int slot = [self hashSlotForWithId:name];
  return (IOSByteArray_Get(nil_chk(hashTable_), slot) & (int) 0xff) - 1;
}

- (int)hashSlotForWithId:(id)element {
  return ((int) [nil_chk(element) hash]) & ((int) [((IOSByteArray *) nil_chk(hashTable_)) count] - 1);
}

- (void)copyAllFieldsTo:(FFTJsonObject_HashIndexTable *)other {
  [super copyAllFieldsTo:other];
  other->hashTable_ = hashTable_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "HashIndexTable", NULL, 0x1, NULL },
    { "initWithFFTJsonObject_HashIndexTable:", "HashIndexTable", NULL, 0x1, NULL },
    { "addWithNSString:withInt:", "add", "V", 0x0, NULL },
    { "removeWithInt:", "remove", "V", 0x0, NULL },
    { "getWithId:", "get", "I", 0x0, NULL },
    { "hashSlotForWithId:", "hashSlotFor", "I", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "hashTable_", NULL, 0x12, "[B", NULL,  },
  };
  static J2ObjcClassInfo _FFTJsonObject_HashIndexTable = { "HashIndexTable", "com.eclipsesource.json", "JsonObject", 0x8, 6, methods, 1, fields, 0, NULL};
  return &_FFTJsonObject_HashIndexTable;
}

@end

@implementation FFTJsonObject_$1

- (BOOL)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(val$namesIterator_)) hasNext];
}

- (FFTJsonObject_Member *)next {
  NSString *name = [((id<JavaUtilIterator>) nil_chk(val$namesIterator_)) next];
  FFTJsonValue *value = [((id<JavaUtilIterator>) nil_chk(val$valuesIterator_)) next];
  return [[FFTJsonObject_Member alloc] initWithNSString:name withFFTJsonValue:value];
}

- (void)remove {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (id)initWithJavaUtilIterator:(id<JavaUtilIterator>)capture$0
          withJavaUtilIterator:(id<JavaUtilIterator>)capture$1 {
  val$namesIterator_ = capture$0;
  val$valuesIterator_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "hasNext", NULL, "Z", 0x1, NULL },
    { "next", NULL, "Lcom.eclipsesource.json.JsonObject$Member;", 0x1, NULL },
    { "remove", NULL, "V", 0x1, NULL },
    { "initWithJavaUtilIterator:withJavaUtilIterator:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$namesIterator_", NULL, 0x1012, "Ljava.util.Iterator;", NULL,  },
    { "val$valuesIterator_", NULL, 0x1012, "Ljava.util.Iterator;", NULL,  },
  };
  static J2ObjcClassInfo _FFTJsonObject_$1 = { "$1", "com.eclipsesource.json", "JsonObject", 0x8000, 4, methods, 2, fields, 0, NULL};
  return &_FFTJsonObject_$1;
}

@end
