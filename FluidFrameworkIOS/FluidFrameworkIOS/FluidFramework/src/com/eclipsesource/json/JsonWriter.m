//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-external/com/eclipsesource/json/JsonWriter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/eclipsesource/json/JsonWriter.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"

BOOL FFTJSONJsonWriter_initialized = NO;

@implementation FFTJSONJsonWriter

IOSCharArray * FFTJSONJsonWriter_QUOT_CHARS_;
IOSCharArray * FFTJSONJsonWriter_BS_CHARS_;
IOSCharArray * FFTJSONJsonWriter_LF_CHARS_;
IOSCharArray * FFTJSONJsonWriter_CR_CHARS_;
IOSCharArray * FFTJSONJsonWriter_TAB_CHARS_;
IOSCharArray * FFTJSONJsonWriter_UNICODE_2028_CHARS_;
IOSCharArray * FFTJSONJsonWriter_UNICODE_2029_CHARS_;
IOSCharArray * FFTJSONJsonWriter_HEX_DIGITS_;

- (id)initWithJavaIoWriter:(JavaIoWriter *)writer {
  if (self = [super init]) {
    self->writer_ = writer;
  }
  return self;
}

- (void)writeLiteralWithNSString:(NSString *)value {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithNSString:value];
}

- (void)writeNumberWithNSString:(NSString *)string {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithNSString:string];
}

- (void)writeStringWithNSString:(NSString *)string {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:'"'];
  [self writeJsonStringWithNSString:string];
  [writer_ writeWithInt:'"'];
}

- (void)writeArrayOpen {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:'['];
}

- (void)writeArrayClose {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:']'];
}

- (void)writeArraySeparator {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:','];
}

- (void)writeObjectOpen {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:'{'];
}

- (void)writeObjectClose {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:'}'];
}

- (void)writeMemberNameWithNSString:(NSString *)name {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:'"'];
  [self writeJsonStringWithNSString:name];
  [writer_ writeWithInt:'"'];
}

- (void)writeMemberSeparator {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:':'];
}

- (void)writeObjectSeparator {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:','];
}

- (void)writeJsonStringWithNSString:(NSString *)string {
  int length = ((int) [((NSString *) nil_chk(string)) length]);
  int start = 0;
  for (int index = 0; index < length; index++) {
    IOSCharArray *replacement = [FFTJSONJsonWriter getReplacementCharsWithChar:[string charAtWithInt:index]];
    if (replacement != nil) {
      [((JavaIoWriter *) nil_chk(writer_)) writeWithNSString:string withInt:start withInt:index - start];
      [writer_ writeWithCharArray:replacement];
      start = index + 1;
    }
  }
  [((JavaIoWriter *) nil_chk(writer_)) writeWithNSString:string withInt:start withInt:length - start];
}

+ (IOSCharArray *)getReplacementCharsWithChar:(unichar)ch {
  if (ch > '\\') {
    if (ch < 0x2028 || ch > 0x2029) {
      return nil;
    }
    return ch == 0x2028 ? FFTJSONJsonWriter_UNICODE_2028_CHARS_ : FFTJSONJsonWriter_UNICODE_2029_CHARS_;
  }
  if (ch == '\\') {
    return FFTJSONJsonWriter_BS_CHARS_;
  }
  if (ch > '"') {
    return nil;
  }
  if (ch == '"') {
    return FFTJSONJsonWriter_QUOT_CHARS_;
  }
  if (ch > FFTJSONJsonWriter_CONTROL_CHARACTERS_END) {
    return nil;
  }
  if (ch == 0x000a) {
    return FFTJSONJsonWriter_LF_CHARS_;
  }
  if (ch == 0x000d) {
    return FFTJSONJsonWriter_CR_CHARS_;
  }
  if (ch == 0x0009) {
    return FFTJSONJsonWriter_TAB_CHARS_;
  }
  return [IOSCharArray arrayWithChars:(unichar[]){ '\\', 'u', '0', '0', IOSCharArray_Get(nil_chk(FFTJSONJsonWriter_HEX_DIGITS_), (ch >> 4) & (int) 0x000f), IOSCharArray_Get(FFTJSONJsonWriter_HEX_DIGITS_, ch & (int) 0x000f) } count:6];
}

+ (void)initialize {
  if (self == [FFTJSONJsonWriter class]) {
    FFTJSONJsonWriter_QUOT_CHARS_ = [IOSCharArray arrayWithChars:(unichar[]){ '\\', '"' } count:2];
    FFTJSONJsonWriter_BS_CHARS_ = [IOSCharArray arrayWithChars:(unichar[]){ '\\', '\\' } count:2];
    FFTJSONJsonWriter_LF_CHARS_ = [IOSCharArray arrayWithChars:(unichar[]){ '\\', 'n' } count:2];
    FFTJSONJsonWriter_CR_CHARS_ = [IOSCharArray arrayWithChars:(unichar[]){ '\\', 'r' } count:2];
    FFTJSONJsonWriter_TAB_CHARS_ = [IOSCharArray arrayWithChars:(unichar[]){ '\\', 't' } count:2];
    FFTJSONJsonWriter_UNICODE_2028_CHARS_ = [IOSCharArray arrayWithChars:(unichar[]){ '\\', 'u', '2', '0', '2', '8' } count:6];
    FFTJSONJsonWriter_UNICODE_2029_CHARS_ = [IOSCharArray arrayWithChars:(unichar[]){ '\\', 'u', '2', '0', '2', '9' } count:6];
    FFTJSONJsonWriter_HEX_DIGITS_ = [IOSCharArray arrayWithChars:(unichar[]){ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' } count:16];
    FFTJSONJsonWriter_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(FFTJSONJsonWriter *)other {
  [super copyAllFieldsTo:other];
  other->writer_ = writer_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoWriter:", "JsonWriter", NULL, 0x0, NULL },
    { "writeLiteralWithNSString:", "writeLiteral", "V", 0x4, "Ljava.io.IOException;" },
    { "writeNumberWithNSString:", "writeNumber", "V", 0x4, "Ljava.io.IOException;" },
    { "writeStringWithNSString:", "writeString", "V", 0x4, "Ljava.io.IOException;" },
    { "writeArrayOpen", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "writeArrayClose", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "writeArraySeparator", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "writeObjectOpen", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "writeObjectClose", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "writeMemberNameWithNSString:", "writeMemberName", "V", 0x4, "Ljava.io.IOException;" },
    { "writeMemberSeparator", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "writeObjectSeparator", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "writeJsonStringWithNSString:", "writeJsonString", "V", 0x4, "Ljava.io.IOException;" },
    { "getReplacementCharsWithChar:", "getReplacementChars", "[C", 0xa, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "CONTROL_CHARACTERS_END_", NULL, 0x1a, "I", NULL, .constantValue.asInt = FFTJSONJsonWriter_CONTROL_CHARACTERS_END },
    { "QUOT_CHARS_", NULL, 0x1a, "[C", &FFTJSONJsonWriter_QUOT_CHARS_,  },
    { "BS_CHARS_", NULL, 0x1a, "[C", &FFTJSONJsonWriter_BS_CHARS_,  },
    { "LF_CHARS_", NULL, 0x1a, "[C", &FFTJSONJsonWriter_LF_CHARS_,  },
    { "CR_CHARS_", NULL, 0x1a, "[C", &FFTJSONJsonWriter_CR_CHARS_,  },
    { "TAB_CHARS_", NULL, 0x1a, "[C", &FFTJSONJsonWriter_TAB_CHARS_,  },
    { "UNICODE_2028_CHARS_", NULL, 0x1a, "[C", &FFTJSONJsonWriter_UNICODE_2028_CHARS_,  },
    { "UNICODE_2029_CHARS_", NULL, 0x1a, "[C", &FFTJSONJsonWriter_UNICODE_2029_CHARS_,  },
    { "HEX_DIGITS_", NULL, 0x1a, "[C", &FFTJSONJsonWriter_HEX_DIGITS_,  },
    { "writer_", NULL, 0x14, "Ljava.io.Writer;", NULL,  },
  };
  static J2ObjcClassInfo _FFTJSONJsonWriter = { "JsonWriter", "com.eclipsesource.json", NULL, 0x0, 14, methods, 10, fields, 0, NULL};
  return &_FFTJSONJsonWriter;
}

@end
