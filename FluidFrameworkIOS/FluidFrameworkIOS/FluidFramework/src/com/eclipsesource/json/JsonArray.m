//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-external/com/eclipsesource/json/JsonArray.java
//

#include "IOSClass.h"
#include "com/eclipsesource/json/Json.h"
#include "com/eclipsesource/json/JsonArray.h"
#include "com/eclipsesource/json/JsonValue.h"
#include "com/eclipsesource/json/JsonWriter.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Deprecated.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@implementation FFTJSONJsonArray

- (id)init {
  if (self = [super init]) {
    values__ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (id)initWithFFTJSONJsonArray:(FFTJSONJsonArray *)array {
  return [self initFFTJSONJsonArrayWithFFTJSONJsonArray:array withBoolean:NO];
}

- (id)initFFTJSONJsonArrayWithFFTJSONJsonArray:(FFTJSONJsonArray *)array
                                   withBoolean:(BOOL)unmodifiable {
  if (self = [super init]) {
    if (array == nil) {
      @throw [[JavaLangNullPointerException alloc] initWithNSString:@"array is null"];
    }
    if (unmodifiable) {
      values__ = [JavaUtilCollections unmodifiableListWithJavaUtilList:((FFTJSONJsonArray *) nil_chk(array))->values__];
    }
    else {
      values__ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:((FFTJSONJsonArray *) nil_chk(array))->values__];
    }
  }
  return self;
}

- (id)initWithFFTJSONJsonArray:(FFTJSONJsonArray *)array
                   withBoolean:(BOOL)unmodifiable {
  return [self initFFTJSONJsonArrayWithFFTJSONJsonArray:array withBoolean:unmodifiable];
}

+ (FFTJSONJsonArray *)readFromWithJavaIoReader:(JavaIoReader *)reader {
  return [((FFTJSONJsonValue *) nil_chk([FFTJSONJsonValue readFromWithJavaIoReader:reader])) asArray];
}

+ (FFTJSONJsonArray *)readFromWithNSString:(NSString *)string {
  return [((FFTJSONJsonValue *) nil_chk([FFTJSONJsonValue readFromWithNSString:string])) asArray];
}

+ (FFTJSONJsonArray *)unmodifiableArrayWithFFTJSONJsonArray:(FFTJSONJsonArray *)array {
  return [[FFTJSONJsonArray alloc] initWithFFTJSONJsonArray:array withBoolean:YES];
}

- (FFTJSONJsonArray *)addWithInt:(int)value {
  [((id<JavaUtilList>) nil_chk(values__)) addWithId:[FFTJSONJson valueWithInt:value]];
  return self;
}

- (FFTJSONJsonArray *)addWithLong:(long long int)value {
  [((id<JavaUtilList>) nil_chk(values__)) addWithId:[FFTJSONJson valueWithLong:value]];
  return self;
}

- (FFTJSONJsonArray *)addWithFloat:(float)value {
  [((id<JavaUtilList>) nil_chk(values__)) addWithId:[FFTJSONJson valueWithFloat:value]];
  return self;
}

- (FFTJSONJsonArray *)addWithDouble:(double)value {
  [((id<JavaUtilList>) nil_chk(values__)) addWithId:[FFTJSONJson valueWithDouble:value]];
  return self;
}

- (FFTJSONJsonArray *)addWithBoolean:(BOOL)value {
  [((id<JavaUtilList>) nil_chk(values__)) addWithId:[FFTJSONJson valueWithBoolean:value]];
  return self;
}

- (FFTJSONJsonArray *)addWithNSString:(NSString *)value {
  [((id<JavaUtilList>) nil_chk(values__)) addWithId:[FFTJSONJson valueWithNSString:value]];
  return self;
}

- (FFTJSONJsonArray *)addWithFFTJSONJsonValue:(FFTJSONJsonValue *)value {
  if (value == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"value is null"];
  }
  [((id<JavaUtilList>) nil_chk(values__)) addWithId:value];
  return self;
}

- (FFTJSONJsonArray *)setWithInt:(int)index
                         withInt:(int)value {
  (void) [((id<JavaUtilList>) nil_chk(values__)) setWithInt:index withId:[FFTJSONJson valueWithInt:value]];
  return self;
}

- (FFTJSONJsonArray *)setWithInt:(int)index
                        withLong:(long long int)value {
  (void) [((id<JavaUtilList>) nil_chk(values__)) setWithInt:index withId:[FFTJSONJson valueWithLong:value]];
  return self;
}

- (FFTJSONJsonArray *)setWithInt:(int)index
                       withFloat:(float)value {
  (void) [((id<JavaUtilList>) nil_chk(values__)) setWithInt:index withId:[FFTJSONJson valueWithFloat:value]];
  return self;
}

- (FFTJSONJsonArray *)setWithInt:(int)index
                      withDouble:(double)value {
  (void) [((id<JavaUtilList>) nil_chk(values__)) setWithInt:index withId:[FFTJSONJson valueWithDouble:value]];
  return self;
}

- (FFTJSONJsonArray *)setWithInt:(int)index
                     withBoolean:(BOOL)value {
  (void) [((id<JavaUtilList>) nil_chk(values__)) setWithInt:index withId:[FFTJSONJson valueWithBoolean:value]];
  return self;
}

- (FFTJSONJsonArray *)setWithInt:(int)index
                    withNSString:(NSString *)value {
  (void) [((id<JavaUtilList>) nil_chk(values__)) setWithInt:index withId:[FFTJSONJson valueWithNSString:value]];
  return self;
}

- (FFTJSONJsonArray *)setWithInt:(int)index
            withFFTJSONJsonValue:(FFTJSONJsonValue *)value {
  if (value == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"value is null"];
  }
  (void) [((id<JavaUtilList>) nil_chk(values__)) setWithInt:index withId:value];
  return self;
}

- (FFTJSONJsonArray *)removeWithInt:(int)index {
  (void) [((id<JavaUtilList>) nil_chk(values__)) removeWithInt:index];
  return self;
}

- (int)size {
  return [((id<JavaUtilList>) nil_chk(values__)) size];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilList>) nil_chk(values__)) isEmpty];
}

- (FFTJSONJsonValue *)getWithInt:(int)index {
  return [((id<JavaUtilList>) nil_chk(values__)) getWithInt:index];
}

- (id<JavaUtilList>)values {
  return [JavaUtilCollections unmodifiableListWithJavaUtilList:values__];
}

- (id<JavaUtilIterator>)iterator {
  id<JavaUtilIterator> iterator = [((id<JavaUtilList>) nil_chk(values__)) iterator];
  return [[FFTJSONJsonArray_$1 alloc] initWithJavaUtilIterator:iterator];
}

- (void)writeWithFFTJSONJsonWriter:(FFTJSONJsonWriter *)writer {
  [((FFTJSONJsonWriter *) nil_chk(writer)) writeArrayOpen];
  id<JavaUtilIterator> iterator = [self iterator];
  BOOL first = YES;
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    if (!first) {
      [writer writeArraySeparator];
    }
    [((FFTJSONJsonValue *) nil_chk([iterator next])) writeWithFFTJSONJsonWriter:writer];
    first = NO;
  }
  [writer writeArrayClose];
}

- (BOOL)isArray {
  return YES;
}

- (FFTJSONJsonArray *)asArray {
  return self;
}

- (NSUInteger)hash {
  return ((int) [((id<JavaUtilList>) nil_chk(values__)) hash]);
}

- (BOOL)isEqual:(id)object {
  if (self == object) {
    return YES;
  }
  if (object == nil) {
    return NO;
  }
  if ([self getClass] != [nil_chk(object) getClass]) {
    return NO;
  }
  FFTJSONJsonArray *other = (FFTJSONJsonArray *) check_class_cast(object, [FFTJSONJsonArray class]);
  return [((id<JavaUtilList>) nil_chk(values__)) isEqual:other->values__];
}

- (void)copyAllFieldsTo:(FFTJSONJsonArray *)other {
  [super copyAllFieldsTo:other];
  other->values__ = values__;
}
- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (IOSObjectArray *)__annotations_readFromWithJavaIoReader_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_readFromWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}


+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "JsonArray", NULL, 0x1, NULL },
    { "initWithFFTJSONJsonArray:", "JsonArray", NULL, 0x1, NULL },
    { "initWithFFTJSONJsonArray:withBoolean:", "JsonArray", NULL, 0x2, NULL },
    { "readFromWithJavaIoReader:", "readFrom", "Lcom.eclipsesource.json.JsonArray;", 0x9, "Ljava.io.IOException;" },
    { "readFromWithNSString:", "readFrom", "Lcom.eclipsesource.json.JsonArray;", 0x9, NULL },
    { "unmodifiableArrayWithFFTJSONJsonArray:", "unmodifiableArray", "Lcom.eclipsesource.json.JsonArray;", 0x9, NULL },
    { "addWithInt:", "add", "Lcom.eclipsesource.json.JsonArray;", 0x1, NULL },
    { "addWithLong:", "add", "Lcom.eclipsesource.json.JsonArray;", 0x1, NULL },
    { "addWithFloat:", "add", "Lcom.eclipsesource.json.JsonArray;", 0x1, NULL },
    { "addWithDouble:", "add", "Lcom.eclipsesource.json.JsonArray;", 0x1, NULL },
    { "addWithBoolean:", "add", "Lcom.eclipsesource.json.JsonArray;", 0x1, NULL },
    { "addWithNSString:", "add", "Lcom.eclipsesource.json.JsonArray;", 0x1, NULL },
    { "addWithFFTJSONJsonValue:", "add", "Lcom.eclipsesource.json.JsonArray;", 0x1, NULL },
    { "setWithInt:withInt:", "set", "Lcom.eclipsesource.json.JsonArray;", 0x1, NULL },
    { "setWithInt:withLong:", "set", "Lcom.eclipsesource.json.JsonArray;", 0x1, NULL },
    { "setWithInt:withFloat:", "set", "Lcom.eclipsesource.json.JsonArray;", 0x1, NULL },
    { "setWithInt:withDouble:", "set", "Lcom.eclipsesource.json.JsonArray;", 0x1, NULL },
    { "setWithInt:withBoolean:", "set", "Lcom.eclipsesource.json.JsonArray;", 0x1, NULL },
    { "setWithInt:withNSString:", "set", "Lcom.eclipsesource.json.JsonArray;", 0x1, NULL },
    { "setWithInt:withFFTJSONJsonValue:", "set", "Lcom.eclipsesource.json.JsonArray;", 0x1, NULL },
    { "removeWithInt:", "remove", "Lcom.eclipsesource.json.JsonArray;", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "getWithInt:", "get", "Lcom.eclipsesource.json.JsonValue;", 0x1, NULL },
    { "values", NULL, "Ljava.util.List;", 0x1, NULL },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL },
    { "writeWithFFTJSONJsonWriter:", "write", "V", 0x0, "Ljava.io.IOException;" },
    { "isArray", NULL, "Z", 0x1, NULL },
    { "asArray", NULL, "Lcom.eclipsesource.json.JsonArray;", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "values__", "values", 0x12, "Ljava.util.List;", NULL,  },
  };
  static J2ObjcClassInfo _FFTJSONJsonArray = { "JsonArray", "com.eclipsesource.json", NULL, 0x1, 31, methods, 1, fields, 0, NULL};
  return &_FFTJSONJsonArray;
}

@end

@implementation FFTJSONJsonArray_$1

- (BOOL)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(val$iterator_)) hasNext];
}

- (FFTJSONJsonValue *)next {
  return [((id<JavaUtilIterator>) nil_chk(val$iterator_)) next];
}

- (void)remove {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (id)initWithJavaUtilIterator:(id<JavaUtilIterator>)capture$0 {
  val$iterator_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "hasNext", NULL, "Z", 0x1, NULL },
    { "next", NULL, "Lcom.eclipsesource.json.JsonValue;", 0x1, NULL },
    { "remove", NULL, "V", 0x1, NULL },
    { "initWithJavaUtilIterator:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$iterator_", NULL, 0x1012, "Ljava.util.Iterator;", NULL,  },
  };
  static J2ObjcClassInfo _FFTJSONJsonArray_$1 = { "$1", "com.eclipsesource.json", "JsonArray", 0x8000, 4, methods, 1, fields, 0, NULL};
  return &_FFTJSONJsonArray_$1;
}

@end
