//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-external/com/eclipsesource/json/Json.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/eclipsesource/json/Json.h"
#include "com/eclipsesource/json/JsonArray.h"
#include "com/eclipsesource/json/JsonLiteral.h"
#include "com/eclipsesource/json/JsonNumber.h"
#include "com/eclipsesource/json/JsonObject.h"
#include "com/eclipsesource/json/JsonParser.h"
#include "com/eclipsesource/json/JsonString.h"
#include "com/eclipsesource/json/JsonValue.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"

BOOL FFTJSONJson_initialized = NO;

@implementation FFTJSONJson

FFTJSONJsonValue * FFTJSONJson_NULL__;
FFTJSONJsonValue * FFTJSONJson_TRUE__;
FFTJSONJsonValue * FFTJSONJson_FALSE__;

- (id)init {
  return [super init];
}

+ (FFTJSONJsonValue *)valueWithInt:(int)value {
  return [[FFTJSONJsonNumber alloc] initWithNSString:[JavaLangInteger toStringWithInt:value withInt:10]];
}

+ (FFTJSONJsonValue *)valueWithLong:(long long int)value {
  return [[FFTJSONJsonNumber alloc] initWithNSString:[JavaLangLong toStringWithLong:value withInt:10]];
}

+ (FFTJSONJsonValue *)valueWithFloat:(float)value {
  if ([JavaLangFloat isInfiniteWithFloat:value] || [JavaLangFloat isNaNWithFloat:value]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Infinite and NaN values not permitted in JSON"];
  }
  return [[FFTJSONJsonNumber alloc] initWithNSString:[FFTJSONJson cutOffPointZeroWithNSString:[JavaLangFloat toStringWithFloat:value]]];
}

+ (FFTJSONJsonValue *)valueWithDouble:(double)value {
  if ([JavaLangDouble isInfiniteWithDouble:value] || [JavaLangDouble isNaNWithDouble:value]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Infinite and NaN values not permitted in JSON"];
  }
  return [[FFTJSONJsonNumber alloc] initWithNSString:[FFTJSONJson cutOffPointZeroWithNSString:[JavaLangDouble toStringWithDouble:value]]];
}

+ (FFTJSONJsonValue *)valueWithNSString:(NSString *)string {
  return string == nil ? FFTJSONJson_NULL__ : [[FFTJSONJsonString alloc] initWithNSString:string];
}

+ (FFTJSONJsonValue *)valueWithBoolean:(BOOL)value {
  return value ? FFTJSONJson_TRUE__ : FFTJSONJson_FALSE__;
}

+ (FFTJSONJsonValue *)array {
  return [[FFTJSONJsonArray alloc] init];
}

+ (FFTJSONJsonArray *)arrayWithIntArray:(IOSIntArray *)values {
  if (values == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"values is null"];
  }
  FFTJSONJsonArray *array = [[FFTJSONJsonArray alloc] init];
  {
    IOSIntArray *a__ = values;
    int const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    int const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      int value = (*b__++);
      (void) [array addWithInt:value];
    }
  }
  return array;
}

+ (FFTJSONJsonArray *)arrayWithLongArray:(IOSLongArray *)values {
  if (values == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"values is null"];
  }
  FFTJSONJsonArray *array = [[FFTJSONJsonArray alloc] init];
  {
    IOSLongArray *a__ = values;
    long long int const *b__ = ((IOSLongArray *) nil_chk(a__))->buffer_;
    long long int const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      long long int value = (*b__++);
      (void) [array addWithLong:value];
    }
  }
  return array;
}

+ (FFTJSONJsonArray *)arrayWithFloatArray:(IOSFloatArray *)values {
  if (values == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"values is null"];
  }
  FFTJSONJsonArray *array = [[FFTJSONJsonArray alloc] init];
  {
    IOSFloatArray *a__ = values;
    float const *b__ = ((IOSFloatArray *) nil_chk(a__))->buffer_;
    float const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      float value = (*b__++);
      (void) [array addWithFloat:value];
    }
  }
  return array;
}

+ (FFTJSONJsonArray *)arrayWithDoubleArray:(IOSDoubleArray *)values {
  if (values == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"values is null"];
  }
  FFTJSONJsonArray *array = [[FFTJSONJsonArray alloc] init];
  {
    IOSDoubleArray *a__ = values;
    double const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    double const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      double value = (*b__++);
      (void) [array addWithDouble:value];
    }
  }
  return array;
}

+ (FFTJSONJsonArray *)arrayWithBooleanArray:(IOSBooleanArray *)values {
  if (values == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"values is null"];
  }
  FFTJSONJsonArray *array = [[FFTJSONJsonArray alloc] init];
  {
    IOSBooleanArray *a__ = values;
    BOOL const *b__ = ((IOSBooleanArray *) nil_chk(a__))->buffer_;
    BOOL const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      BOOL value = (*b__++);
      (void) [array addWithBoolean:value];
    }
  }
  return array;
}

+ (FFTJSONJsonArray *)arrayWithNSStringArray:(IOSObjectArray *)strings {
  if (strings == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"values is null"];
  }
  FFTJSONJsonArray *array = [[FFTJSONJsonArray alloc] init];
  {
    IOSObjectArray *a__ = strings;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *value = (*b__++);
      (void) [array addWithNSString:value];
    }
  }
  return array;
}

+ (FFTJSONJsonObject *)object {
  return [[FFTJSONJsonObject alloc] init];
}

+ (FFTJSONJsonValue *)parseWithNSString:(NSString *)string {
  if (string == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"string is null"];
  }
  @try {
    return [((FFTJSONJsonParser *) [[FFTJSONJsonParser alloc] initWithNSString:string]) parse];
  }
  @catch (JavaIoIOException *exception) {
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:exception];
  }
}

+ (FFTJSONJsonValue *)parseWithJavaIoReader:(JavaIoReader *)reader {
  if (reader == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"reader is null"];
  }
  return [((FFTJSONJsonParser *) [[FFTJSONJsonParser alloc] initWithJavaIoReader:reader]) parse];
}

+ (NSString *)cutOffPointZeroWithNSString:(NSString *)string {
  if ([((NSString *) nil_chk(string)) hasSuffix:@".0"]) {
    return [string substring:0 endIndex:((int) [string length]) - 2];
  }
  return string;
}

+ (void)initialize {
  if (self == [FFTJSONJson class]) {
    FFTJSONJson_NULL__ = [[FFTJSONJsonLiteral alloc] initWithNSString:@"null"];
    FFTJSONJson_TRUE__ = [[FFTJSONJsonLiteral alloc] initWithNSString:@"true"];
    FFTJSONJson_FALSE__ = [[FFTJSONJsonLiteral alloc] initWithNSString:@"false"];
    FFTJSONJson_initialized = YES;
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "Json", NULL, 0x2, NULL },
    { "valueWithInt:", "value", "Lcom.eclipsesource.json.JsonValue;", 0x9, NULL },
    { "valueWithLong:", "value", "Lcom.eclipsesource.json.JsonValue;", 0x9, NULL },
    { "valueWithFloat:", "value", "Lcom.eclipsesource.json.JsonValue;", 0x9, NULL },
    { "valueWithDouble:", "value", "Lcom.eclipsesource.json.JsonValue;", 0x9, NULL },
    { "valueWithNSString:", "value", "Lcom.eclipsesource.json.JsonValue;", 0x9, NULL },
    { "valueWithBoolean:", "value", "Lcom.eclipsesource.json.JsonValue;", 0x9, NULL },
    { "array", NULL, "Lcom.eclipsesource.json.JsonValue;", 0x9, NULL },
    { "arrayWithIntArray:", "array", "Lcom.eclipsesource.json.JsonArray;", 0x89, NULL },
    { "arrayWithLongArray:", "array", "Lcom.eclipsesource.json.JsonArray;", 0x89, NULL },
    { "arrayWithFloatArray:", "array", "Lcom.eclipsesource.json.JsonArray;", 0x89, NULL },
    { "arrayWithDoubleArray:", "array", "Lcom.eclipsesource.json.JsonArray;", 0x89, NULL },
    { "arrayWithBooleanArray:", "array", "Lcom.eclipsesource.json.JsonArray;", 0x89, NULL },
    { "arrayWithNSStringArray:", "array", "Lcom.eclipsesource.json.JsonArray;", 0x89, NULL },
    { "object", NULL, "Lcom.eclipsesource.json.JsonObject;", 0x9, NULL },
    { "parseWithNSString:", "parse", "Lcom.eclipsesource.json.JsonValue;", 0x9, NULL },
    { "parseWithJavaIoReader:", "parse", "Lcom.eclipsesource.json.JsonValue;", 0x9, "Ljava.io.IOException;" },
    { "cutOffPointZeroWithNSString:", "cutOffPointZero", "Ljava.lang.String;", 0xa, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "NULL__", "NULL", 0x19, "Lcom.eclipsesource.json.JsonValue;", &FFTJSONJson_NULL__,  },
    { "TRUE__", "TRUE", 0x19, "Lcom.eclipsesource.json.JsonValue;", &FFTJSONJson_TRUE__,  },
    { "FALSE__", "FALSE", 0x19, "Lcom.eclipsesource.json.JsonValue;", &FFTJSONJson_FALSE__,  },
  };
  static J2ObjcClassInfo _FFTJSONJson = { "Json", "com.eclipsesource.json", NULL, 0x11, 18, methods, 3, fields, 0, NULL};
  return &_FFTJSONJson;
}

@end
