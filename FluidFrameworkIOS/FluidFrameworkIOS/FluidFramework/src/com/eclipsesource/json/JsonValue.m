//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-external/com/eclipsesource/json/JsonValue.java
//

#include "IOSClass.h"
#include "com/eclipsesource/json/Json.h"
#include "com/eclipsesource/json/JsonArray.h"
#include "com/eclipsesource/json/JsonObject.h"
#include "com/eclipsesource/json/JsonParser.h"
#include "com/eclipsesource/json/JsonValue.h"
#include "com/eclipsesource/json/JsonWriter.h"
#include "com/eclipsesource/json/WriterConfig.h"
#include "com/eclipsesource/json/WritingBuffer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Deprecated.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/UnsupportedOperationException.h"

BOOL FFTJSONJsonValue_initialized = NO;

@implementation FFTJSONJsonValue

FFTJSONJsonValue * FFTJSONJsonValue_TRUE__;
FFTJSONJsonValue * FFTJSONJsonValue_FALSE__;
FFTJSONJsonValue * FFTJSONJsonValue_NULL__;

- (id)init {
  return [super init];
}

+ (FFTJSONJsonValue *)readFromWithJavaIoReader:(JavaIoReader *)reader {
  return [((FFTJSONJsonParser *) [[FFTJSONJsonParser alloc] initWithJavaIoReader:reader]) parse];
}

+ (FFTJSONJsonValue *)readFromWithNSString:(NSString *)text {
  @try {
    return [((FFTJSONJsonParser *) [[FFTJSONJsonParser alloc] initWithNSString:text]) parse];
  }
  @catch (JavaIoIOException *exception) {
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:exception];
  }
}

+ (FFTJSONJsonValue *)valueOfWithInt:(int)value {
  return [FFTJSONJson valueWithInt:value];
}

+ (FFTJSONJsonValue *)valueOfWithLong:(long long int)value {
  return [FFTJSONJson valueWithLong:value];
}

+ (FFTJSONJsonValue *)valueOfWithFloat:(float)value {
  return [FFTJSONJson valueWithFloat:value];
}

+ (FFTJSONJsonValue *)valueOfWithDouble:(double)value {
  return [FFTJSONJson valueWithDouble:value];
}

+ (FFTJSONJsonValue *)valueOfWithNSString:(NSString *)string {
  return [FFTJSONJson valueWithNSString:string];
}

+ (FFTJSONJsonValue *)valueOfWithBoolean:(BOOL)value {
  return [FFTJSONJson valueWithBoolean:value];
}

- (BOOL)isObject {
  return NO;
}

- (BOOL)isArray {
  return NO;
}

- (BOOL)isNumber {
  return NO;
}

- (BOOL)isString {
  return NO;
}

- (BOOL)isBoolean {
  return NO;
}

- (BOOL)isTrue {
  return NO;
}

- (BOOL)isFalse {
  return NO;
}

- (BOOL)isNull {
  return NO;
}

- (FFTJSONJsonObject *)asObject {
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[NSString stringWithFormat:@"Not an object: %@", [self description]]];
}

- (FFTJSONJsonArray *)asArray {
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[NSString stringWithFormat:@"Not an array: %@", [self description]]];
}

- (int)asInt {
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[NSString stringWithFormat:@"Not a number: %@", [self description]]];
}

- (long long int)asLong {
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[NSString stringWithFormat:@"Not a number: %@", [self description]]];
}

- (float)asFloat {
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[NSString stringWithFormat:@"Not a number: %@", [self description]]];
}

- (double)asDouble {
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[NSString stringWithFormat:@"Not a number: %@", [self description]]];
}

- (NSString *)asString {
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[NSString stringWithFormat:@"Not a string: %@", [self description]]];
}

- (BOOL)asBoolean {
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[NSString stringWithFormat:@"Not a boolean: %@", [self description]]];
}

- (void)writeToWithJavaIoWriter:(JavaIoWriter *)writer {
  [self writeToWithJavaIoWriter:writer withFFTJSONWriterConfig:FFTJSONWriterConfig_get_MINIMAL_()];
}

- (void)writeToWithJavaIoWriter:(JavaIoWriter *)writer
        withFFTJSONWriterConfig:(FFTJSONWriterConfig *)config {
  if (writer == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"writer is null"];
  }
  if (config == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"config is null"];
  }
  FFTJSONWritingBuffer *buffer = [[FFTJSONWritingBuffer alloc] initWithJavaIoWriter:writer withInt:128];
  [self writeWithFFTJSONJsonWriter:[((FFTJSONWriterConfig *) nil_chk(config)) createWriterWithJavaIoWriter:buffer]];
  [buffer flush];
}

- (NSString *)description {
  return [self toStringWithFFTJSONWriterConfig:FFTJSONWriterConfig_get_MINIMAL_()];
}

- (NSString *)toStringWithFFTJSONWriterConfig:(FFTJSONWriterConfig *)config {
  JavaIoStringWriter *writer = [[JavaIoStringWriter alloc] init];
  @try {
    [self writeToWithJavaIoWriter:writer withFFTJSONWriterConfig:config];
  }
  @catch (JavaIoIOException *exception) {
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:exception];
  }
  return [writer description];
}

- (BOOL)isEqual:(id)object {
  return [super isEqual:object];
}

- (NSUInteger)hash {
  return [super hash];
}

- (void)writeWithFFTJSONJsonWriter:(FFTJSONJsonWriter *)writer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (void)initialize {
  if (self == [FFTJSONJsonValue class]) {
    FFTJSONJsonValue_TRUE__ = FFTJSONJson_get_TRUE__();
    FFTJSONJsonValue_FALSE__ = FFTJSONJson_get_FALSE__();
    FFTJSONJsonValue_NULL__ = FFTJSONJson_get_NULL__();
    FFTJSONJsonValue_initialized = YES;
  }
}
+ (IOSObjectArray *)__annotations_readFromWithJavaIoReader_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_readFromWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_valueOfWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_valueOfWithLong_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_valueOfWithFloat_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_valueOfWithDouble_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_valueOfWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_valueOfWithBoolean_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_TRUE_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_FALSE_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_NULL_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}


+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "JsonValue", NULL, 0x0, NULL },
    { "readFromWithJavaIoReader:", "readFrom", "Lcom.eclipsesource.json.JsonValue;", 0x9, "Ljava.io.IOException;" },
    { "readFromWithNSString:", "readFrom", "Lcom.eclipsesource.json.JsonValue;", 0x9, NULL },
    { "valueOfWithInt:", "valueOf", "Lcom.eclipsesource.json.JsonValue;", 0x9, NULL },
    { "valueOfWithLong:", "valueOf", "Lcom.eclipsesource.json.JsonValue;", 0x9, NULL },
    { "valueOfWithFloat:", "valueOf", "Lcom.eclipsesource.json.JsonValue;", 0x9, NULL },
    { "valueOfWithDouble:", "valueOf", "Lcom.eclipsesource.json.JsonValue;", 0x9, NULL },
    { "valueOfWithNSString:", "valueOf", "Lcom.eclipsesource.json.JsonValue;", 0x9, NULL },
    { "valueOfWithBoolean:", "valueOf", "Lcom.eclipsesource.json.JsonValue;", 0x9, NULL },
    { "isObject", NULL, "Z", 0x1, NULL },
    { "isArray", NULL, "Z", 0x1, NULL },
    { "isNumber", NULL, "Z", 0x1, NULL },
    { "isString", NULL, "Z", 0x1, NULL },
    { "isBoolean", NULL, "Z", 0x1, NULL },
    { "isTrue", NULL, "Z", 0x1, NULL },
    { "isFalse", NULL, "Z", 0x1, NULL },
    { "isNull", NULL, "Z", 0x1, NULL },
    { "asObject", NULL, "Lcom.eclipsesource.json.JsonObject;", 0x1, NULL },
    { "asArray", NULL, "Lcom.eclipsesource.json.JsonArray;", 0x1, NULL },
    { "asInt", NULL, "I", 0x1, NULL },
    { "asLong", NULL, "J", 0x1, NULL },
    { "asFloat", NULL, "F", 0x1, NULL },
    { "asDouble", NULL, "D", 0x1, NULL },
    { "asString", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "asBoolean", NULL, "Z", 0x1, NULL },
    { "writeToWithJavaIoWriter:", "writeTo", "V", 0x1, "Ljava.io.IOException;" },
    { "writeToWithJavaIoWriter:withFFTJSONWriterConfig:", "writeTo", "V", 0x1, "Ljava.io.IOException;" },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "toStringWithFFTJSONWriterConfig:", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "writeWithFFTJSONJsonWriter:", "write", "V", 0x400, "Ljava.io.IOException;" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "TRUE__", "TRUE", 0x19, "Lcom.eclipsesource.json.JsonValue;", &FFTJSONJsonValue_TRUE__,  },
    { "FALSE__", "FALSE", 0x19, "Lcom.eclipsesource.json.JsonValue;", &FFTJSONJsonValue_FALSE__,  },
    { "NULL__", "NULL", 0x19, "Lcom.eclipsesource.json.JsonValue;", &FFTJSONJsonValue_NULL__,  },
  };
  static J2ObjcClassInfo _FFTJSONJsonValue = { "JsonValue", "com.eclipsesource.json", NULL, 0x401, 32, methods, 3, fields, 0, NULL};
  return &_FFTJSONJsonValue;
}

@end
