//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-external/com/eclipsesource/json/JsonString.java
//

#include "IOSClass.h"
#include "com/eclipsesource/json/JsonString.h"
#include "com/eclipsesource/json/JsonWriter.h"
#include "java/io/IOException.h"
#include "java/lang/NullPointerException.h"

@implementation FFTJsonString

- (id)initWithNSString:(NSString *)string {
  if (self = [super init]) {
    if (string == nil) {
      @throw [[JavaLangNullPointerException alloc] initWithNSString:@"string is null"];
    }
    self->string_ = string;
  }
  return self;
}

- (void)writeWithFFTJsonWriter:(FFTJsonWriter *)writer {
  [((FFTJsonWriter *) nil_chk(writer)) writeStringWithNSString:string_];
}

- (BOOL)isString {
  return YES;
}

- (NSString *)asString {
  return string_;
}

- (NSUInteger)hash {
  return ((int) [((NSString *) nil_chk(string_)) hash]);
}

- (BOOL)isEqual:(id)object {
  if (self == object) {
    return YES;
  }
  if (object == nil) {
    return NO;
  }
  if ([self getClass] != [nil_chk(object) getClass]) {
    return NO;
  }
  FFTJsonString *other = (FFTJsonString *) check_class_cast(object, [FFTJsonString class]);
  return [((NSString *) nil_chk(string_)) isEqual:other->string_];
}

- (void)copyAllFieldsTo:(FFTJsonString *)other {
  [super copyAllFieldsTo:other];
  other->string_ = string_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "JsonString", NULL, 0x0, NULL },
    { "writeWithFFTJsonWriter:", "write", "V", 0x0, "Ljava.io.IOException;" },
    { "isString", NULL, "Z", 0x1, NULL },
    { "asString", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "string_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _FFTJsonString = { "JsonString", "com.eclipsesource.json", NULL, 0x0, 6, methods, 1, fields, 0, NULL};
  return &_FFTJsonString;
}

@end
