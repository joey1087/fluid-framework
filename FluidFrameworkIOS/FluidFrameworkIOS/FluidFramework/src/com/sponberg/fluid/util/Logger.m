//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/util/Logger.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/sponberg/fluid/FluidApp.h"
#include "com/sponberg/fluid/GlobalState.h"
#include "com/sponberg/fluid/LoggingService.h"
#include "com/sponberg/fluid/SystemService.h"
#include "com/sponberg/fluid/util/Logger.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Runnable.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "org/slf4j/helpers/FormattingTuple.h"
#include "org/slf4j/helpers/MessageFormatter.h"

BOOL FFTLogger_initialized = NO;

@implementation FFTLogger

JavaTextSimpleDateFormat * FFTLogger_dateFormat_;
int FFTLogger_loggingLevel_ = 4;
BOOL FFTLogger_enabled_ = NO;
BOOL FFTLogger_includeClassName_ = YES;
BOOL FFTLogger_fullPackageName_ = NO;
BOOL FFTLogger_includeMethodName_ = YES;
BOOL FFTLogger_includeLineNumber_ = NO;

+ (void)debugWithId:(id)thisClass
       withNSString:(NSString *)msg
  withNSObjectArray:(IOSObjectArray *)params {
  [FFTLogger logWithInt:FFTLogger_LEVEL_DEBUG withIOSClass:[nil_chk(thisClass) getClass] withNSString:msg withNSObjectArray:params];
}

+ (void)debugWithId:(id)thisClass
withJavaLangThrowable:(JavaLangThrowable *)t {
  JavaIoByteArrayOutputStream *ostr = [[JavaIoByteArrayOutputStream alloc] init];
  [((JavaLangThrowable *) nil_chk(t)) printStackTraceWithJavaIoPrintStream:[[JavaIoPrintStream alloc] initWithJavaIoOutputStream:ostr]];
  [FFTLogger logWithInt:FFTLogger_LEVEL_DEBUG withIOSClass:[nil_chk(thisClass) getClass] withNSString:[NSString stringWithBytes:[ostr toByteArray]] withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
}

+ (void)infoWithId:(id)thisClass
      withNSString:(NSString *)msg
 withNSObjectArray:(IOSObjectArray *)params {
  [FFTLogger logWithInt:FFTLogger_LEVEL_INFO withIOSClass:[nil_chk(thisClass) getClass] withNSString:msg withNSObjectArray:params];
}

+ (void)infoWithId:(id)thisClass
withJavaLangThrowable:(JavaLangThrowable *)t {
  JavaIoByteArrayOutputStream *ostr = [[JavaIoByteArrayOutputStream alloc] init];
  [((JavaLangThrowable *) nil_chk(t)) printStackTraceWithJavaIoPrintStream:[[JavaIoPrintStream alloc] initWithJavaIoOutputStream:ostr]];
  [FFTLogger logWithInt:FFTLogger_LEVEL_INFO withIOSClass:[nil_chk(thisClass) getClass] withNSString:[NSString stringWithBytes:[ostr toByteArray]] withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
}

+ (void)warnWithId:(id)thisClass
      withNSString:(NSString *)msg
 withNSObjectArray:(IOSObjectArray *)params {
  [FFTLogger logWithInt:FFTLogger_LEVEL_WARN withIOSClass:[nil_chk(thisClass) getClass] withNSString:msg withNSObjectArray:params];
}

+ (void)warnWithId:(id)thisClass
withJavaLangThrowable:(JavaLangThrowable *)t {
  JavaIoByteArrayOutputStream *ostr = [[JavaIoByteArrayOutputStream alloc] init];
  [((JavaLangThrowable *) nil_chk(t)) printStackTraceWithJavaIoPrintStream:[[JavaIoPrintStream alloc] initWithJavaIoOutputStream:ostr]];
  [FFTLogger logWithInt:FFTLogger_LEVEL_WARN withIOSClass:[nil_chk(thisClass) getClass] withNSString:[NSString stringWithBytes:[ostr toByteArray]] withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
}

+ (void)errorWithId:(id)thisClass
       withNSString:(NSString *)msg
  withNSObjectArray:(IOSObjectArray *)params {
  [FFTLogger logWithInt:FFTLogger_LEVEL_ERROR withIOSClass:[nil_chk(thisClass) getClass] withNSString:msg withNSObjectArray:params];
}

+ (void)errorWithId:(id)thisClass
withJavaLangThrowable:(JavaLangThrowable *)t {
  JavaIoByteArrayOutputStream *ostr = [[JavaIoByteArrayOutputStream alloc] init];
  [((JavaLangThrowable *) nil_chk(t)) printStackTraceWithJavaIoPrintStream:[[JavaIoPrintStream alloc] initWithJavaIoOutputStream:ostr]];
  [FFTLogger logWithInt:FFTLogger_LEVEL_ERROR withIOSClass:[nil_chk(thisClass) getClass] withNSString:[NSString stringWithBytes:[ostr toByteArray]] withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
}

+ (void)logWithInt:(int)level
      withIOSClass:(IOSClass *)clazz
      withNSString:(NSString *)baseMessage
 withNSObjectArray:(IOSObjectArray *)params {
  if (level < FFTLogger_loggingLevel_ || !FFTLogger_enabled_ || [((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getLoggingService] == nil) {
    return;
  }
  if (![((id<FFTSystemService>) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getSystemService])) isOnUiThread]) {
    id<JavaLangRunnable> r = [[FFTLogger_$1 alloc] initWithInt:level withIOSClass:clazz withNSString:baseMessage withNSObjectArray:params];
    [((id<FFTSystemService>) nil_chk([FFTGlobalState_get_fluidApp__() getSystemService])) runOnUiThreadWithJavaLangRunnable:r];
    return;
  }
  NSString *formattedMsg = [FFTLogger getMessageWithInt:level withIOSClass:clazz withNSString:baseMessage withNSObjectArray:params];
  if (level >= FFTLogger_LEVEL_ERROR) {
    [((id<FFTLoggingService>) nil_chk([FFTGlobalState_get_fluidApp__() getLoggingService])) logErrorWithNSString:formattedMsg];
  }
  else {
  }
}

+ (NSString *)getMessageWithInt:(int)level
                   withIOSClass:(IOSClass *)clazz
                   withNSString:(NSString *)baseMessage
              withNSObjectArray:(IOSObjectArray *)params {
  int stackTraceIndex = 4;
  JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] init];
  (void) [builder appendWithNSString:[((JavaTextSimpleDateFormat *) nil_chk(FFTLogger_dateFormat_)) formatWithJavaUtilDate:[[JavaUtilDate alloc] init]]];
  switch (level) {
    case FFTLogger_LEVEL_DEBUG:
    (void) [builder appendWithNSString:@" [DEBUG] "];
    break;
    case FFTLogger_LEVEL_INFO:
    (void) [builder appendWithNSString:@" [INFO] "];
    break;
    case FFTLogger_LEVEL_WARN:
    (void) [builder appendWithNSString:@" [WARN] "];
    break;
    case FFTLogger_LEVEL_ERROR:
    (void) [builder appendWithNSString:@" [ERROR] "];
    break;
  }
  JavaLangStackTraceElement *stackTraceElement = nil;
  for (int index = stackTraceIndex; index < (int) [((IOSObjectArray *) nil_chk([((JavaLangThread *) nil_chk([JavaLangThread currentThread])) getStackTrace])) count]; index++) {
    stackTraceElement = IOSObjectArray_Get(nil_chk([((JavaLangThread *) nil_chk([JavaLangThread currentThread])) getStackTrace]), index);
    if (![((NSString *) nil_chk([((JavaLangStackTraceElement *) nil_chk(stackTraceElement)) getClassName])) isEqual:[[IOSClass classWithClass:[FFTLogger class]] getName]]) {
      break;
    }
  }
  if (FFTLogger_includeClassName_ && stackTraceElement == nil) {
    (void) [builder appendWithNSString:@"[?] "];
  }
  else if (FFTLogger_includeClassName_ && stackTraceElement != nil) {
    (void) [builder appendWithNSString:@"["];
    if (FFTLogger_fullPackageName_) {
      (void) [builder appendWithNSString:[((IOSClass *) nil_chk(clazz)) getName]];
    }
    else {
      (void) [builder appendWithNSString:[((IOSClass *) nil_chk(clazz)) getSimpleName]];
    }
    if (FFTLogger_includeMethodName_) {
      (void) [builder appendWithNSString:@" "];
      (void) [builder appendWithNSString:[stackTraceElement getMethodName]];
    }
    if (FFTLogger_includeLineNumber_ && [stackTraceElement getLineNumber] != -1) {
      (void) [builder appendWithNSString:@" "];
      (void) [builder appendWithInt:[stackTraceElement getLineNumber]];
    }
    (void) [builder appendWithNSString:@"] "];
  }
  (void) [builder appendWithNSString:[((OrgSlf4jHelpersFormattingTuple *) nil_chk([OrgSlf4jHelpersMessageFormatter arrayFormatWithNSString:baseMessage withNSObjectArray:params])) getMessage]];
  return [builder description];
}

+ (void)setDateFormatWithNSString:(NSString *)dateFormat {
  FFTLogger_dateFormat_ = [[JavaTextSimpleDateFormat alloc] initWithNSString:dateFormat];
}

+ (BOOL)isEnabled {
  return FFTLogger_enabled_;
}

+ (void)setEnabledWithBoolean:(BOOL)enabled {
  FFTLogger_enabled_ = enabled;
}

+ (int)getLoggingLevel {
  return FFTLogger_loggingLevel_;
}

+ (void)setLoggingLevelWithInt:(int)loggingLevel {
  FFTLogger_loggingLevel_ = loggingLevel;
}

+ (BOOL)isIncludeClassName {
  return FFTLogger_includeClassName_;
}

+ (void)setIncludeClassNameWithBoolean:(BOOL)includeClassName {
  FFTLogger_includeClassName_ = includeClassName;
}

+ (BOOL)isFullPackageName {
  return FFTLogger_fullPackageName_;
}

+ (void)setFullPackageNameWithBoolean:(BOOL)fullPackageName {
  FFTLogger_fullPackageName_ = fullPackageName;
}

+ (BOOL)isIncludeMethodName {
  return FFTLogger_includeMethodName_;
}

+ (void)setIncludeMethodNameWithBoolean:(BOOL)includeMethodName {
  FFTLogger_includeMethodName_ = includeMethodName;
}

+ (BOOL)isIncludeLineNumber {
  return FFTLogger_includeLineNumber_;
}

+ (void)setIncludeLineNumberWithBoolean:(BOOL)includeLineNumber {
  FFTLogger_includeLineNumber_ = includeLineNumber;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [FFTLogger class]) {
    FFTLogger_dateFormat_ = [[JavaTextSimpleDateFormat alloc] initWithNSString:@"yyyy-MM-dd hh:mm:ss"];
    FFTLogger_initialized = YES;
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "debugWithId:withNSString:withNSObjectArray:", "debug", "V", 0x89, NULL },
    { "debugWithId:withJavaLangThrowable:", "debug", "V", 0x9, NULL },
    { "infoWithId:withNSString:withNSObjectArray:", "info", "V", 0x89, NULL },
    { "infoWithId:withJavaLangThrowable:", "info", "V", 0x9, NULL },
    { "warnWithId:withNSString:withNSObjectArray:", "warn", "V", 0x89, NULL },
    { "warnWithId:withJavaLangThrowable:", "warn", "V", 0x9, NULL },
    { "errorWithId:withNSString:withNSObjectArray:", "error", "V", 0x89, NULL },
    { "errorWithId:withJavaLangThrowable:", "error", "V", 0x9, NULL },
    { "logWithInt:withIOSClass:withNSString:withNSObjectArray:", "log", "V", 0x8a, NULL },
    { "getMessageWithInt:withIOSClass:withNSString:withNSObjectArray:", "getMessage", "Ljava.lang.String;", 0x8a, NULL },
    { "setDateFormatWithNSString:", "setDateFormat", "V", 0x9, NULL },
    { "isEnabled", NULL, "Z", 0x9, NULL },
    { "setEnabledWithBoolean:", "setEnabled", "V", 0x9, NULL },
    { "getLoggingLevel", NULL, "I", 0x9, NULL },
    { "setLoggingLevelWithInt:", "setLoggingLevel", "V", 0x9, NULL },
    { "isIncludeClassName", NULL, "Z", 0x9, NULL },
    { "setIncludeClassNameWithBoolean:", "setIncludeClassName", "V", 0x9, NULL },
    { "isFullPackageName", NULL, "Z", 0x9, NULL },
    { "setFullPackageNameWithBoolean:", "setFullPackageName", "V", 0x9, NULL },
    { "isIncludeMethodName", NULL, "Z", 0x9, NULL },
    { "setIncludeMethodNameWithBoolean:", "setIncludeMethodName", "V", 0x9, NULL },
    { "isIncludeLineNumber", NULL, "Z", 0x9, NULL },
    { "setIncludeLineNumberWithBoolean:", "setIncludeLineNumber", "V", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "LEVEL_DEBUG_", NULL, 0x19, "I", NULL, .constantValue.asInt = FFTLogger_LEVEL_DEBUG },
    { "LEVEL_INFO_", NULL, 0x19, "I", NULL, .constantValue.asInt = FFTLogger_LEVEL_INFO },
    { "LEVEL_WARN_", NULL, 0x19, "I", NULL, .constantValue.asInt = FFTLogger_LEVEL_WARN },
    { "LEVEL_ERROR_", NULL, 0x19, "I", NULL, .constantValue.asInt = FFTLogger_LEVEL_ERROR },
    { "LEVEL_NONE_", NULL, 0x19, "I", NULL, .constantValue.asInt = FFTLogger_LEVEL_NONE },
    { "dateFormat_", NULL, 0x8, "Ljava.text.SimpleDateFormat;", &FFTLogger_dateFormat_,  },
    { "loggingLevel_", NULL, 0x8, "I", &FFTLogger_loggingLevel_,  },
    { "enabled_", NULL, 0x8, "Z", &FFTLogger_enabled_,  },
    { "includeClassName_", NULL, 0x8, "Z", &FFTLogger_includeClassName_,  },
    { "fullPackageName_", NULL, 0x8, "Z", &FFTLogger_fullPackageName_,  },
    { "includeMethodName_", NULL, 0x8, "Z", &FFTLogger_includeMethodName_,  },
    { "includeLineNumber_", NULL, 0x8, "Z", &FFTLogger_includeLineNumber_,  },
  };
  static J2ObjcClassInfo _FFTLogger = { "Logger", "com.sponberg.fluid.util", NULL, 0x1, 24, methods, 12, fields, 0, NULL};
  return &_FFTLogger;
}

@end

@implementation FFTLogger_SimpleLoggingService

- (void)logMessageWithNSString:(NSString *)message {
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:message];
}

- (void)logErrorWithNSString:(NSString *)message {
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:message];
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "logMessageWithNSString:", "logMessage", "V", 0x1, NULL },
    { "logErrorWithNSString:", "logError", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcClassInfo _FFTLogger_SimpleLoggingService = { "SimpleLoggingService", "com.sponberg.fluid.util", "Logger", 0x9, 3, methods, 0, NULL, 0, NULL};
  return &_FFTLogger_SimpleLoggingService;
}

@end

@implementation FFTLogger_$1

- (void)run {
  [FFTLogger logWithInt:val$level_ withIOSClass:val$clazz_ withNSString:val$baseMessage_ withNSObjectArray:val$params_];
}

- (id)initWithInt:(int)capture$0
     withIOSClass:(IOSClass *)capture$1
     withNSString:(NSString *)capture$2
withNSObjectArray:(IOSObjectArray *)capture$3 {
  val$level_ = capture$0;
  val$clazz_ = capture$1;
  val$baseMessage_ = capture$2;
  val$params_ = capture$3;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithInt:withIOSClass:withNSString:withNSObjectArray:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$level_", NULL, 0x1012, "I", NULL,  },
    { "val$clazz_", NULL, 0x1012, "Ljava.lang.Class;", NULL,  },
    { "val$baseMessage_", NULL, 0x1012, "Ljava.lang.String;", NULL,  },
    { "val$params_", NULL, 0x1012, "[Ljava.lang.Object;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLogger_$1 = { "$1", "com.sponberg.fluid.util", "Logger", 0x8000, 2, methods, 4, fields, 0, NULL};
  return &_FFTLogger_$1;
}

@end
