//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/layout/Layout.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/sponberg/fluid/FluidApp.h"
#include "com/sponberg/fluid/GlobalState.h"
#include "com/sponberg/fluid/layout/Color.h"
#include "com/sponberg/fluid/layout/Constraints.h"
#include "com/sponberg/fluid/layout/Coord.h"
#include "com/sponberg/fluid/layout/DataModelManager.h"
#include "com/sponberg/fluid/layout/Layout.h"
#include "com/sponberg/fluid/layout/LayoutAction.h"
#include "com/sponberg/fluid/layout/Length.h"
#include "com/sponberg/fluid/layout/PrecomputeLayoutManager.h"
#include "com/sponberg/fluid/layout/Subtractor.h"
#include "com/sponberg/fluid/layout/View.h"
#include "com/sponberg/fluid/layout/ViewBehavior.h"
#include "com/sponberg/fluid/layout/ViewPosition.h"
#include "com/sponberg/fluid/util/KeyValueList.h"
#include "com/sponberg/fluid/util/LRUCache.h"
#include "com/sponberg/fluid/util/Logger.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"

@implementation FFTLayout

- (id)initWithNSString:(NSString *)id_
          withNSString:(NSString *)name
          withNSString:(NSString *)nameKey
            withDouble:(double)baseUnit {
  if (self = [super init]) {
    precomputedPositions_ = NO;
    wrapInScrollView_ = NO;
    blockFocusViewOnLoad_ = NO;
    lastLayout_ = [[FFTLayout_LastLayout alloc] init];
    viewCache_ = [[FFTLRUCache alloc] initWithInt:100];
    spacerId_ = 0;
    portrait_ = [[FFTLayout_Orientation alloc] initWithBoolean:NO];
    landscape_ = nil;
    currentOrientation_ = portrait_;
    allViews_ = [[JavaUtilLinkedHashSet alloc] init];
    allViewsToBePresentedToUI_ = nil;
    viewMap_ = [[JavaUtilHashMap alloc] init];
    propertiesByCategory_ = [[JavaUtilHashMap alloc] init];
    cache_ = [[FFTLRUCache alloc] initWithInt:32];
    self->name_ = name;
    self->nameKey_ = nameKey;
    self->id__ = id_;
    self->baseUnit_ = baseUnit;
    [self->viewCache_ addRemovedListenerWithFFTLRUCache_RemovedListener:self];
  }
  return self;
}

- (id<JavaUtilCollection>)getAllViews {
  return allViews_;
}

- (id<JavaUtilCollection>)getAllViewsToBePresentedToUI {
  if (allViewsToBePresentedToUI_ == nil) {
    allViewsToBePresentedToUI_ = [[JavaUtilArrayList alloc] init];
    for (FFTView * __strong view in nil_chk(allViews_)) {
      if ([((FFTViewBehavior *) nil_chk([((FFTView *) nil_chk(view)) getViewBehavior])) isShouldBePresentedToUI]) {
        [allViewsToBePresentedToUI_ addWithId:view];
      }
    }
  }
  return allViewsToBePresentedToUI_;
}

- (void)setAnchorWithFFTView:(FFTView *)anchor
 withFFTLayout_DirectionEnum:(FFTLayout_DirectionEnum *)direction {
  ((FFTLayout_Orientation_Layer *) nil_chk(((FFTLayout_Orientation *) nil_chk(currentOrientation_))->currentLayer_))->hasAnchor_ = YES;
  [currentOrientation_ setDirectionOfWithFFTView:anchor withFFTLayout_DirectionEnum:direction];
  lastLeftEdge_ = anchor;
  lastRightEdge_ = anchor;
  [self addViewWithFFTView:anchor];
  [self setupDynamicCoordsWithFFTView:anchor];
}

- (void)setPropertiesWithJavaUtilList:(id<JavaUtilList>)properties {
  self->propertiesByCategory_ = [[JavaUtilHashMap alloc] init];
  if (properties != nil) {
    for (id<FFTKeyValueList> __strong kvl in properties) {
      (void) [propertiesByCategory_ putWithId:[((id<FFTKeyValueList>) nil_chk(kvl)) getValue] withId:kvl];
    }
  }
}

- (NSString *)getPropertyWithNSString:(NSString *)category
                         withNSString:(NSString *)property {
  id<FFTKeyValueList> kvl = [((JavaUtilHashMap *) nil_chk(self->propertiesByCategory_)) getWithId:category];
  if (kvl != nil && [kvl containsWithNSString:property]) {
    return [kvl getValueWithNSString:property];
  }
  else {
    return nil;
  }
}

- (void)addViewWithFFTView:(FFTView *)view {
  if (!((FFTLayout_Orientation_Layer *) nil_chk(((FFTLayout_Orientation *) nil_chk(currentOrientation_))->currentLayer_))->hasAnchor_) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Anchor not set yet"];
  }
  [currentOrientation_ setHorizontalChainWithFFTView:view];
  [((id<JavaUtilCollection>) nil_chk(currentOrientation_->currentLayer_->views_)) addWithId:view];
  if (currentOrientation_->currentLayer_->horizontalChain_ == [((JavaUtilArrayList *) nil_chk(currentOrientation_->currentLayer_->horizontalChains_)) size]) {
    [currentOrientation_->currentLayer_->horizontalChains_ addWithId:[[JavaUtilArrayList alloc] init]];
  }
  [((JavaUtilArrayList *) nil_chk([currentOrientation_->currentLayer_->horizontalChains_ getWithInt:currentOrientation_->currentLayer_->horizontalChain_])) addWithId:view];
  (void) [((JavaUtilHashMap *) nil_chk(viewMap_)) putWithId:((FFTView *) nil_chk(view))->id__ withId:view];
  [((JavaUtilLinkedHashSet *) nil_chk(allViews_)) addWithId:view];
  last_ = view;
}

- (void)setupDynamicCoordsWithFFTView:(FFTView *)view {
  if ([((FFTConstraints *) nil_chk([((FFTView *) nil_chk(view)) getGivenConstraints])) getX] != nil && [((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([view getGivenConstraints])) getX])) isRelativeToView]) {
    FFTView *source = [((JavaUtilHashMap *) nil_chk(viewMap_)) getWithId:[((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([view getGivenConstraints])) getX])) getRelativeId]];
    if ([((NSString *) nil_chk([((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([view getGivenConstraints])) getX])) getRelativeEdge])) equalsIgnoreCase:@"left"]) {
      id<FFTLayoutAction> action = [[FFTLayout_$1 alloc] initWithFFTLayout:self withFFTView:source withFFTView:view];
      [((FFTView *) nil_chk(source)) addActionXWithFFTLayoutAction:action];
    }
    else {
      id<FFTLayoutAction> action = [[FFTLayout_$2 alloc] initWithFFTLayout:self withFFTView:source withFFTView:view];
      [((FFTView *) nil_chk(source)) addActionX2WithFFTLayoutAction:action];
    }
  }
  if ([((FFTConstraints *) nil_chk([view getGivenConstraints])) getX2] != nil && [((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([view getGivenConstraints])) getX2])) isRelativeToView]) {
    FFTView *source = [((JavaUtilHashMap *) nil_chk(viewMap_)) getWithId:[((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([view getGivenConstraints])) getX2])) getRelativeId]];
    if ([((NSString *) nil_chk([((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([view getGivenConstraints])) getX2])) getRelativeEdge])) equalsIgnoreCase:@"left"]) {
      id<FFTLayoutAction> action = [[FFTLayout_$3 alloc] initWithFFTLayout:self withFFTView:source withFFTView:view];
      [((FFTView *) nil_chk(source)) addActionXWithFFTLayoutAction:action];
    }
    else {
      id<FFTLayoutAction> action = [[FFTLayout_$4 alloc] initWithFFTLayout:self withFFTView:source withFFTView:view];
      [((FFTView *) nil_chk(source)) addActionX2WithFFTLayoutAction:action];
    }
  }
  if ([((FFTConstraints *) nil_chk([view getGivenConstraints])) getY] != nil && [((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([view getGivenConstraints])) getY])) isRelativeToView]) {
    FFTView *source = [((JavaUtilHashMap *) nil_chk(viewMap_)) getWithId:[((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([view getGivenConstraints])) getY])) getRelativeId]];
    if ([((NSString *) nil_chk([((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([view getGivenConstraints])) getY])) getRelativeEdge])) equalsIgnoreCase:@"top"]) {
      id<FFTLayoutAction> action = [[FFTLayout_$5 alloc] initWithFFTLayout:self withFFTView:source withFFTView:view];
      [((FFTView *) nil_chk(source)) addActionYWithFFTLayoutAction:action];
    }
    else {
      id<FFTLayoutAction> action = [[FFTLayout_$6 alloc] initWithFFTLayout:self withFFTView:source withFFTView:view];
      [((FFTView *) nil_chk(source)) addActionY2WithFFTLayoutAction:action];
    }
  }
  if ([((FFTConstraints *) nil_chk([view getGivenConstraints])) getY2] != nil && [((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([view getGivenConstraints])) getY2])) isRelativeToView]) {
    FFTView *source = [((JavaUtilHashMap *) nil_chk(viewMap_)) getWithId:[((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([view getGivenConstraints])) getY2])) getRelativeId]];
    if ([((NSString *) nil_chk([((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([view getGivenConstraints])) getY2])) getRelativeEdge])) equalsIgnoreCase:@"top"]) {
      id<FFTLayoutAction> action = [[FFTLayout_$7 alloc] initWithFFTLayout:self withFFTView:source withFFTView:view];
      [((FFTView *) nil_chk(source)) addActionYWithFFTLayoutAction:action];
    }
    else {
      id<FFTLayoutAction> action = [[FFTLayout_$8 alloc] initWithFFTLayout:self withFFTView:source withFFTView:view];
      [((FFTView *) nil_chk(source)) addActionY2WithFFTLayoutAction:action];
    }
  }
}

- (void)registerDynamicCoordRelativeHeightWithFFTView:(FFTView *)view
                                  withFFTLayoutAction:(id<FFTLayoutAction>)action {
  for (FFTSubtractor * __strong subtractor in nil_chk(((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([((FFTView *) nil_chk(view)) getGivenConstraints])) getX]))->subtractors_)) {
    if ([((FFTSubtractor *) nil_chk(subtractor)) isRelativeToView]) {
      NSString *viewId = subtractor->relativeToView_;
      FFTView *v = [((JavaUtilHashMap *) nil_chk(viewMap_)) getWithId:viewId];
      if (v == nil || [v getWidth] == nil) {
        [((FFTView *) nil_chk(v)) addActionWidthWithFFTLayoutAction:action];
      }
    }
  }
}

- (void)registerDynamicCoordRelativeHeight2WithFFTView:(FFTView *)view
                                   withFFTLayoutAction:(id<FFTLayoutAction>)action {
  for (FFTSubtractor * __strong subtractor in nil_chk(((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([((FFTView *) nil_chk(view)) getGivenConstraints])) getY]))->subtractors_)) {
    if ([((FFTSubtractor *) nil_chk(subtractor)) isRelativeToView]) {
      NSString *viewId = subtractor->relativeToView_;
      FFTView *v = [((JavaUtilHashMap *) nil_chk(viewMap_)) getWithId:viewId];
      if (v == nil || [v getHeight] == nil) {
        [((FFTView *) nil_chk(v)) addActionHeightWithFFTLayoutAction:action];
      }
    }
  }
}

- (void)addNewLayerWithNSString:(NSString *)visibleCondition {
  [self addNewLayerWithNSString:visibleCondition withInt:[((JavaUtilArrayList *) nil_chk(((FFTLayout_Orientation *) nil_chk(currentOrientation_))->layers_)) size]];
}

- (void)addNewLayerWithNSString:(NSString *)visibleCondition
                        withInt:(int)zIndex {
  for (FFTLayout_Orientation_Layer * __strong layer in nil_chk(((FFTLayout_Orientation *) nil_chk(currentOrientation_))->layers_)) {
    if (((FFTLayout_Orientation_Layer *) nil_chk(layer))->zIndex_ == zIndex) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"There is already a layer with the z-index %d", zIndex]];
    }
  }
  currentOrientation_->currentLayer_ = [[FFTLayout_Orientation_Layer alloc] initWithInt:zIndex];
  currentOrientation_->currentLayer_->visibleCondition_ = visibleCondition;
  [currentOrientation_->layers_ addWithId:currentOrientation_->currentLayer_];
}

- (void)addRightWithFFTView:(FFTView *)view
    withFFTLayout_AlignEnum:(FFTLayout_AlignEnum *)vAlign {
  [((FFTLayout_Orientation *) nil_chk(currentOrientation_)) setDirectionOfWithFFTView:view withFFTLayout_DirectionEnum:FFTLayout_DirectionEnum_get_RIGHT()];
  FFTView *source = last_;
  [((FFTView *) nil_chk(source)) addActionX2WithFFTLayoutAction:[[FFTLayout_$9 alloc] initWithFFTView:view withFFTView:source]];
  if (vAlign == FFTLayout_AlignEnum_get_TOP()) {
    [source addActionYWithFFTLayoutAction:[[FFTLayout_$10 alloc] initWithFFTView:view withFFTView:source]];
  }
  else {
    if (YES) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Not implemented"];
    }
  }
  lastRightEdge_ = view;
  [self addViewWithFFTView:view];
}

- (void)addLeftWithFFTView:(FFTView *)view
   withFFTLayout_AlignEnum:(FFTLayout_AlignEnum *)vAlign {
  [((FFTLayout_Orientation *) nil_chk(currentOrientation_)) setDirectionOfWithFFTView:view withFFTLayout_DirectionEnum:FFTLayout_DirectionEnum_get_LEFT()];
  FFTView *source = last_;
  [((FFTView *) nil_chk(source)) addActionXWithFFTLayoutAction:[[FFTLayout_$11 alloc] initWithFFTView:view withFFTView:source]];
  if (vAlign == FFTLayout_AlignEnum_get_TOP()) {
    [source addActionYWithFFTLayoutAction:[[FFTLayout_$12 alloc] initWithFFTView:view withFFTView:source]];
  }
  else {
    if (YES) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Not implemented"];
    }
  }
  lastLeftEdge_ = view;
  [self addViewWithFFTView:view];
}

- (void)addDownWithFFTView:(FFTView *)view
   withFFTLayout_AlignEnum:(FFTLayout_AlignEnum *)align
withFFTLayout_DirectionEnum:(FFTLayout_DirectionEnum *)direction {
  ((FFTLayout_Orientation_Layer *) nil_chk(((FFTLayout_Orientation *) nil_chk(currentOrientation_))->currentLayer_))->horizontalChain_++;
  [currentOrientation_ setDirectionOfWithFFTView:view withFFTLayout_DirectionEnum:direction];
  FFTView *source;
  if (direction == FFTLayout_DirectionEnum_get_RIGHT()) {
    source = lastLeftEdge_;
  }
  else {
    source = lastRightEdge_;
  }
  [((FFTView *) nil_chk(source)) addActionY2WithFFTLayoutAction:[[FFTLayout_$13 alloc] initWithFFTView:view withFFTView:source]];
  if (align == FFTLayout_AlignEnum_get_LEFT()) {
    [source addActionXWithFFTLayoutAction:[[FFTLayout_$14 alloc] initWithFFTView:view withFFTView:source]];
  }
  else if (align == FFTLayout_AlignEnum_get_CENTER()) {
    [source addActionXWithFFTLayoutAction:[[FFTLayout_$15 alloc] initWithFFTView:view withFFTView:source]];
    [source addActionX2WithFFTLayoutAction:[[FFTLayout_$16 alloc] initWithFFTView:view withFFTView:source]];
  }
  else {
    [source addActionX2WithFFTLayoutAction:[[FFTLayout_$17 alloc] initWithFFTView:view withFFTView:source]];
  }
  lastLeftEdge_ = view;
  lastRightEdge_ = view;
  [self addViewWithFFTView:view];
}

- (id<JavaUtilCollection>)getViewsWithBoolean:(BOOL)landscape
                                   withDouble:(double)width
                                   withDouble:(double)height
                                 withNSString:(NSString *)viewPath {
  @synchronized(self) {
    {
      return [self getViewsWithBoolean:landscape withDouble:width withDouble:height withNSString:nil withNSString:viewPath];
    }
  }
}

- (id<JavaUtilCollection>)getViewsWithBoolean:(BOOL)landscape
                                   withDouble:(double)width
                                   withDouble:(double)height
                                 withNSString:(NSString *)dataModelPrefix
                                 withNSString:(NSString *)viewPath {
  @synchronized(self) {
    {
      return [self getViewsWithBoolean:landscape withDouble:width withDouble:height withNSString:dataModelPrefix withNSString:viewPath withBoolean:NO];
    }
  }
}

- (void)invalidateCacheWithNSString:(NSString *)dataModelPrefix {
  @synchronized(self) {
    {
      NSString *cacheId = (dataModelPrefix == nil) ? @"default" : dataModelPrefix;
      (void) [((FFTLRUCache *) nil_chk(viewCache_)) removeWithId:cacheId];
    }
  }
}

- (id<JavaUtilCollection>)getViewsWithBoolean:(BOOL)landscape
                                   withDouble:(double)width
                                   withDouble:(double)height
                                 withNSString:(NSString *)dataModelPrefix
                                 withNSString:(NSString *)viewPath
                                  withBoolean:(BOOL)printTable {
  @synchronized(self) {
    {
      self->isInLandscape__ = landscape;
      if (!FFTFluidApp_useCaching && precomputedPositions_) {
        JavaUtilArrayList *viewPositions = [[JavaUtilArrayList alloc] init];
        for (FFTView * __strong view in nil_chk([self getAllViewsToBePresentedToUI])) {
          FFTViewPosition *vp = [((FFTPrecomputeLayoutManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getPrecomputeLayoutManager])) getViewPositionWithNSString:[NSString stringWithFormat:@"%@.%@", viewPath, [((FFTView *) nil_chk(view)) getId]]];
          if (vp == nil) {
            @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"view must be in PrecomputeLayoutManager if parent is precompute-positions: %@ %@", viewPath, [view getId]]];
          }
          [((FFTViewPosition *) nil_chk(vp)) setViewBehaviorWithFFTViewBehavior:[view getViewBehavior]];
          [viewPositions addWithId:vp];
        }
        return viewPositions;
      }
      else if (!FFTFluidApp_useCaching) {
        return [self layoutWithBoolean:landscape withDouble:width withDouble:height withNSString:dataModelPrefix withBoolean:printTable withBoolean:NO withBoolean:NO withNSString:viewPath];
      }
      else {
        NSString *cacheId = (dataModelPrefix == nil) ? @"default" : dataModelPrefix;
        FFTLayout_LastLayout *lastLayout = [((FFTLRUCache *) nil_chk(viewCache_)) getWithId:cacheId];
        BOOL lastLayoutCreated = NO;
        if (lastLayout == nil) {
          lastLayout = [[FFTLayout_LastLayout alloc] init];
          lastLayoutCreated = YES;
          (void) [viewCache_ putWithId:cacheId withId:lastLayout];
        }
        if (((FFTLayout_LastLayout *) nil_chk(lastLayout))->width_ != width || lastLayout->height_ != height) {
          if (precomputedPositions_) {
            lastLayout->views_ = [[JavaUtilArrayList alloc] init];
            if (lastLayoutCreated && conditionalKeys_ == nil) {
              [self resetWithDouble:baseUnit_ withNSString:dataModelPrefix withDouble:width];
            }
            BOOL precomputeNotAvailable = NO;
            for (FFTView * __strong view in nil_chk([self getAllViewsToBePresentedToUI])) {
              FFTViewPosition *vp = [((FFTPrecomputeLayoutManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getPrecomputeLayoutManager])) getViewPositionWithNSString:[NSString stringWithFormat:@"%@.%@", viewPath, [((FFTView *) nil_chk(view)) getId]]];
              if (vp == nil) {
                precomputeNotAvailable = YES;
                break;
              }
              [((FFTViewPosition *) nil_chk(vp)) setViewBehaviorWithFFTViewBehavior:[view getViewBehavior]];
              if (lastLayoutCreated && conditionalKeys_ == nil) {
                [self checkViewConditionWithNSString:vp->visibleCondition_ withNSString:dataModelPrefix];
              }
              [lastLayout->views_ addWithId:vp];
            }
            if (precomputeNotAvailable) {
              [FFTLogger debugWithId:self withNSString:@"View is using precompute, but it is not available {}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ viewPath } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
              lastLayout->views_ = [self layoutWithBoolean:landscape withDouble:width withDouble:height withNSString:dataModelPrefix withBoolean:printTable withBoolean:NO withBoolean:YES withNSString:viewPath];
              lastLayout->width_ = width;
              lastLayout->height_ = height;
            }
          }
          else {
            lastLayout->views_ = [self layoutWithBoolean:landscape withDouble:width withDouble:height withNSString:dataModelPrefix withBoolean:printTable withBoolean:NO withBoolean:YES withNSString:viewPath];
            lastLayout->width_ = width;
            lastLayout->height_ = height;
          }
          if (lastLayoutCreated) {
            for (NSString * __strong conditionalKey in nil_chk(conditionalKeys_)) {
              [((FFTDataModelManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getDataModelManager])) addDataChangeListenerWithNSString:conditionalKey withNSString:[NSString stringWithFormat:@"%@-conditional-%@", [self getId], cacheId] withFFTDataChangeListener:[[FFTLayout_$18 alloc] initWithFFTLayout:self withNSString:cacheId]];
            }
          }
        }
        return lastLayout->views_;
      }
    }
  }
}

+ (id<JavaUtilCollection>)getViewPositionsWithNSString:(NSString *)viewPath
                                withJavaUtilCollection:(id<JavaUtilCollection>)views {
  @synchronized([FFTLayout getClass]) {
    {
      JavaUtilArrayList *viewPositions = [[JavaUtilArrayList alloc] init];
      for (FFTView * __strong view in nil_chk(views)) {
        [viewPositions addWithId:[[FFTViewPosition alloc] initWithNSString:viewPath withFFTView:view]];
      }
      return viewPositions;
    }
  }
}

- (void)createOrientationLandscape {
  @synchronized(self) {
    {
      landscape_ = [[FFTLayout_Orientation alloc] initWithBoolean:YES];
    }
  }
}

- (void)setOrientationLandscapeWithBoolean:(BOOL)isLandscape {
  @synchronized(self) {
    {
      if (landscape_ != nil) {
        currentOrientation_ = (isLandscape) ? landscape_ : portrait_;
      }
      [self sortAllViewsAccordingToLayerZIndex];
      [((FFTLayout_Orientation *) nil_chk(currentOrientation_)) setViewsOrienation];
    }
  }
}

- (void)sortAllViewsAccordingToLayerZIndex {
  JavaUtilArrayList *layers = [[JavaUtilArrayList alloc] init];
  for (FFTLayout_Orientation_Layer * __strong l in nil_chk(((FFTLayout_Orientation *) nil_chk(currentOrientation_))->layers_)) {
    [layers addWithId:l];
  }
  [JavaUtilCollections sortWithJavaUtilList:layers withJavaUtilComparator:[[FFTLayout_$19 alloc] init]];
  allViews_ = [[JavaUtilLinkedHashSet alloc] init];
  for (FFTLayout_Orientation_Layer * __strong layer in layers) {
    for (FFTView * __strong view in nil_chk(((FFTLayout_Orientation_Layer *) nil_chk(layer))->views_)) {
      [allViews_ addWithId:view];
    }
  }
  allViewsToBePresentedToUI_ = nil;
  (void) [self getAllViewsToBePresentedToUI];
}

- (JavaUtilArrayList *)layoutWithBoolean:(BOOL)landscape
                              withDouble:(double)width
                              withDouble:(double)height
                            withNSString:(NSString *)dataModelPrefix
                             withBoolean:(BOOL)printTable
                             withBoolean:(BOOL)computingHeight
                             withBoolean:(BOOL)useComputingHeightCache
                            withNSString:(NSString *)viewPath {
  @synchronized(self) {
    {
      [self setOrientationLandscapeWithBoolean:landscape];
      [self resetWithDouble:baseUnit_ withNSString:dataModelPrefix withDouble:width];
      [self setWidthsWithDouble:width withNSString:dataModelPrefix];
      [self setHeightsWithDouble:height withBoolean:computingHeight withNSString:dataModelPrefix withBoolean:useComputingHeightCache];
      if (printTable) {
        [self printTable];
      }
      if (viewPath == nil) {
        return nil;
      }
      JavaUtilArrayList *viewPositions = [[JavaUtilArrayList alloc] init];
      for (FFTView * __strong view in nil_chk([self getAllViewsToBePresentedToUI])) {
        [viewPositions addWithId:[[FFTViewPosition alloc] initWithNSString:viewPath withFFTView:view]];
      }
      return viewPositions;
    }
  }
}

- (void)setWidthsWithDouble:(double)width
               withNSString:(NSString *)dataModelPrefix {
  for (FFTLayout_Orientation_Layer * __strong layer in nil_chk(((FFTLayout_Orientation *) nil_chk(currentOrientation_))->layers_)) {
    [self setWidthsHelperWithDouble:width withFFTLayout_Orientation_Layer:layer withNSString:dataModelPrefix];
  }
}

- (void)setWidthsHelperWithDouble:(double)width
  withFFTLayout_Orientation_Layer:(FFTLayout_Orientation_Layer *)layer
                     withNSString:(NSString *)dataModelPrefix {
  JavaUtilArrayList *viewsForSecondPass = [[JavaUtilArrayList alloc] init];
  int horizontalChain = 0;
  for (FFTView * __strong view in nil_chk(((FFTLayout_Orientation_Layer *) nil_chk(layer))->views_)) {
    if ([((FFTLayout_Orientation *) nil_chk(currentOrientation_)) getHorizontalChainOfWithFFTView:view] != horizontalChain) {
      for (FFTView * __strong v in viewsForSecondPass) {
        if (((FFTView *) nil_chk(v))->width_ == nil) {
          [self computeWidthSecondPassWithFFTView:v withDouble:width withFFTLayout_Orientation_Layer:layer];
        }
      }
      [viewsForSecondPass clear];
      horizontalChain = [currentOrientation_ getHorizontalChainOfWithFFTView:view];
    }
    if (((FFTView *) nil_chk(view))->width_ != nil) {
      continue;
    }
    if (![self computeWidthWithFFTView:view withDouble:width withNSString:dataModelPrefix]) {
      [viewsForSecondPass addWithId:view];
    }
  }
  for (FFTView * __strong v in viewsForSecondPass) {
    if (((FFTView *) nil_chk(v))->width_ == nil) {
      [self computeWidthSecondPassWithFFTView:v withDouble:width withFFTLayout_Orientation_Layer:layer];
    }
  }
}

- (BOOL)computeWidthWithFFTView:(FFTView *)view
                     withDouble:(double)width
                   withNSString:(NSString *)dataModelPrefix {
  if ([((FFTLength *) nil_chk(((FFTConstraints *) nil_chk([((FFTView *) nil_chk(view)) getGivenConstraints]))->width_)) relativeToView]) {
    FFTView *v = [((JavaUtilHashMap *) nil_chk(viewMap_)) getWithId:[((FFTConstraints *) nil_chk([view getGivenConstraints]))->width_ getRelativeId]];
    if ([((FFTView *) nil_chk(v)) getWidth] == nil) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Width can't be resolved for %@ from %@", view, v]];
    }
    double w = [((JavaLangDouble *) nil_chk([v getWidth])) doubleValue] * [((FFTConstraints *) nil_chk([view getGivenConstraints]))->width_ getRatio];
    w -= [((JavaLangDouble *) nil_chk([self subtractorViewsWidthWithJavaUtilArrayList:[((FFTConstraints *) nil_chk([view getGivenConstraints]))->width_ getSubtractors] withBoolean:NO])) doubleValue];
    [view setWidthWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:w]];
  }
  else if ([((FFTConstraints *) nil_chk([view getGivenConstraints]))->width_ relativeToParent]) {
    double w = width * [((FFTConstraints *) nil_chk([view getGivenConstraints]))->width_ getRatio];
    w -= [((JavaLangDouble *) nil_chk([self subtractorViewsWidthWithJavaUtilArrayList:[((FFTConstraints *) nil_chk([view getGivenConstraints]))->width_ getSubtractors] withBoolean:NO])) doubleValue];
    [view setWidthWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:w]];
  }
  else if ([((FFTConstraints *) nil_chk([view getGivenConstraints]))->width_ relativeToRow]) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Width relative to row is not supported"];
  }
  else if ([((FFTConstraints *) nil_chk([view getGivenConstraints]))->width_ summation]) {
    double sum = 0;
    {
      IOSObjectArray *a__ = [((FFTConstraints *) nil_chk([view getGivenConstraints]))->width_ getSummationOf];
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *id_ = (*b__++);
        FFTView *v = [((JavaUtilHashMap *) nil_chk(viewMap_)) getWithId:id_];
        if (v == nil || [v getWidth] == nil) {
          @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Error computing width for %@. Width unknown for %@", [view getId], [((FFTView *) nil_chk(v)) getId]]];
        }
        sum += [((JavaLangDouble *) nil_chk([((FFTView *) nil_chk(v)) getWidth])) doubleValue] * baseUnit_;
      }
    }
    [view setWidthWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:sum]];
  }
  else if ([((FFTConstraints *) nil_chk([view getGivenConstraints]))->width_ isFromDataModel]) {
    NSString *widthString = [((FFTDataModelManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getDataModelManager])) getValueWithNSString:dataModelPrefix withNSString:[((FFTConstraints *) nil_chk([view getGivenConstraints]))->width_ getDataModelKey] withNSString:@"{0}" withNSString:nil];
    if ([((NSString *) nil_chk(widthString)) isEqual:@"nan"]) {
      [view setWidthWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:0.0]];
    }
    else {
      [view setWidthWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:[FFTGlobalState_get_fluidApp__() sizeToPixelsWithNSString:widthString]]];
    }
  }
  else {
    return NO;
  }
  return YES;
}

- (void)computeWidthSecondPassWithFFTView:(FFTView *)view
                               withDouble:(double)width
          withFFTLayout_Orientation_Layer:(FFTLayout_Orientation_Layer *)layer {
  int horizontalChain = [((FFTLayout_Orientation *) nil_chk(currentOrientation_)) getHorizontalChainOfWithFFTView:view];
  JavaUtilArrayList *views = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:[((JavaUtilArrayList *) nil_chk(((FFTLayout_Orientation_Layer *) nil_chk(layer))->horizontalChains_)) getWithInt:horizontalChain]];
  double remaining = [self getRemainingWidthCheckingEarlierChainWithJavaUtilArrayList:views withInt:horizontalChain withDouble:width withFFTLayout_Orientation_Layer:layer];
  FFTLayout_DirectionEnum *direction = [currentOrientation_ getDirectionOfWithFFTView:view];
  JavaLangDouble *firstMaxWidth = nil;
  BOOL firstIsMiddleAligned = NO;
  FFTView *first = [views getWithInt:0];
  if (direction == FFTLayout_DirectionEnum_get_RIGHT()) {
    if ([((FFTView *) nil_chk(first)) getX] != nil) {
      remaining -= [((JavaLangDouble *) nil_chk([first getX])) doubleValue];
    }
    else if ([first getX2] != nil) {
      if ([first getWidth] != nil) {
        remaining -= [((JavaLangDouble *) nil_chk([first getX2])) doubleValue];
      }
      else {
        firstMaxWidth = [first getX2];
      }
    }
    else {
      if ([first getWidth] != nil) {
        remaining -= [((JavaLangDouble *) nil_chk([first getX2])) doubleValue];
      }
      else {
        remaining -= [((JavaLangDouble *) nil_chk([first getMiddleX])) doubleValue];
        firstIsMiddleAligned = YES;
        firstMaxWidth = [JavaLangDouble valueOfWithDouble:[((JavaLangDouble *) nil_chk([first getMiddleX])) doubleValue] * 2];
      }
    }
  }
  else {
    if ([((FFTView *) nil_chk(first)) getX2] != nil) {
      remaining -= (width - [((JavaLangDouble *) nil_chk([first getX2])) doubleValue]);
    }
    else if ([first getX] != nil) {
      if ([first getWidth] != nil) {
        remaining -= (width - [((JavaLangDouble *) nil_chk([first getX])) doubleValue]);
      }
      else {
        firstMaxWidth = [JavaLangDouble valueOfWithDouble:width - [((JavaLangDouble *) nil_chk([first getX])) doubleValue]];
      }
    }
    else {
      if ([first getWidth] != nil) {
        remaining -= (width - [((JavaLangDouble *) nil_chk([first getX])) doubleValue]);
      }
      else {
        remaining -= (width - [((JavaLangDouble *) nil_chk([first getMiddleX])) doubleValue]);
        firstIsMiddleAligned = YES;
        firstMaxWidth = [JavaLangDouble valueOfWithDouble:(width - [((JavaLangDouble *) nil_chk([first getMiddleX])) doubleValue]) * 2];
      }
    }
  }
  for (id<JavaUtilIterator> i = [views iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    FFTView *v = [i next];
    if (((FFTView *) nil_chk(v))->width_ != nil) {
      if (v == view) {
        @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Not expecting a view with a width passed in"];
      }
      remaining -= [v->width_ doubleValue];
      [i remove];
    }
  }
  BOOL allAreEqualsOrFill = YES;
  for (FFTView * __strong v in views) {
    if (![((FFTLength *) nil_chk(((FFTConstraints *) nil_chk([((FFTView *) nil_chk(v)) getGivenConstraints]))->width_)) equal] && ![((FFTConstraints *) nil_chk([v getGivenConstraints]))->width_ fill]) {
      allAreEqualsOrFill = NO;
      break;
    }
  }
  if (allAreEqualsOrFill) {
    double widthForEach;
    if (firstIsMiddleAligned) {
      widthForEach = remaining / ([views size] - 0.5);
    }
    else {
      widthForEach = remaining / [views size];
    }
    if (firstMaxWidth != nil && widthForEach > [firstMaxWidth doubleValue]) {
      widthForEach = [firstMaxWidth doubleValue];
    }
    for (FFTView * __strong v in views) {
      [((FFTView *) nil_chk(v)) setWidthWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:widthForEach]];
    }
    return;
  }
  BOOL allAreFillRatio = YES;
  double totalRatio = 0;
  for (FFTView * __strong v in views) {
    if (![((FFTLength *) nil_chk(((FFTConstraints *) nil_chk([((FFTView *) nil_chk(v)) getGivenConstraints]))->width_)) fillRatio]) {
      allAreFillRatio = NO;
      break;
    }
    totalRatio += [((FFTConstraints *) nil_chk([v getGivenConstraints]))->width_ getRatio];
  }
  if (allAreFillRatio) {
    if (totalRatio != 1) {
      JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] initWithNSString:@"Fill ratio must add up to 1 for:\n "];
      for (FFTView * __strong v in views) {
        (void) [buf appendWithNSString:[NSString stringWithFormat:@"%@\n ", v]];
      }
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[buf description]];
    }
    double denom = 1;
    if (firstIsMiddleAligned) {
      denom = 1 - [((FFTLength *) nil_chk(((FFTConstraints *) nil_chk([((FFTView *) nil_chk(first)) getGivenConstraints]))->width_)) getRatio] / 2;
      double newFirstRatio = [((FFTConstraints *) nil_chk([first getGivenConstraints]))->width_ getRatio] / denom;
      double widthForFirst = remaining * newFirstRatio;
      if (widthForFirst > [((JavaLangDouble *) nil_chk(firstMaxWidth)) doubleValue]) {
        double applyRatio = [firstMaxWidth doubleValue] / widthForFirst;
        denom /= applyRatio;
      }
    }
    for (FFTView * __strong v in views) {
      double ratio = [((FFTLength *) nil_chk(((FFTConstraints *) nil_chk([((FFTView *) nil_chk(v)) getGivenConstraints]))->width_)) getRatio] / denom;
      [v setWidthWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:remaining * ratio]];
    }
    return;
  }
  BOOL last = [views getWithInt:[views size] - 1] == view;
  [views removeWithId:view];
  if (last && [views size] == 0 && [((FFTLength *) nil_chk(((FFTConstraints *) nil_chk([((FFTView *) nil_chk(view)) getGivenConstraints]))->width_)) fill]) {
    [view setWidthWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:remaining]];
    return;
  }
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Can't resolve width for %@", view]];
}

- (double)getRemainingWidthCheckingEarlierChainWithJavaUtilArrayList:(JavaUtilArrayList *)viewsInChain
                                                             withInt:(int)horizontalChain
                                                          withDouble:(double)width
                                     withFFTLayout_Orientation_Layer:(FFTLayout_Orientation_Layer *)layer {
  JavaLangDouble *minY = nil;
  for (FFTView * __strong view in nil_chk(viewsInChain)) {
    if ([((FFTView *) nil_chk(view)) getY] != nil) {
      if (minY == nil) {
        minY = [view getY];
      }
      else {
        minY = [JavaLangDouble valueOfWithDouble:[JavaLangMath minWithDouble:[minY doubleValue] withDouble:[((JavaLangDouble *) nil_chk([view getY])) doubleValue]]];
      }
    }
  }
  if (minY == nil) {
    return width;
  }
  double remaining = width;
  for (FFTView * __strong v in nil_chk(((FFTLayout_Orientation_Layer *) nil_chk(layer))->views_)) {
    if ([((FFTLayout_Orientation *) nil_chk(currentOrientation_)) getHorizontalChainOfWithFFTView:v] == horizontalChain) {
      break;
    }
    if ([((FFTView *) nil_chk(v)) getY2] != nil && [((JavaLangDouble *) nil_chk(minY)) doubleValue] < [((JavaLangDouble *) nil_chk([v getY2])) doubleValue]) {
      remaining -= [((JavaLangDouble *) nil_chk([v getWidth])) doubleValue];
    }
  }
  return remaining;
}

- (void)setHeightsWithDouble:(double)height
                 withBoolean:(BOOL)computingHeight
                withNSString:(NSString *)dataModelPrefix
                 withBoolean:(BOOL)useComputingHeightCache {
  for (FFTLayout_Orientation_Layer * __strong layer in nil_chk(((FFTLayout_Orientation *) nil_chk(currentOrientation_))->layers_)) {
    [self setHeightsHelperWithDouble:height withFFTLayout_Orientation_Layer:layer withBoolean:computingHeight withNSString:dataModelPrefix withBoolean:useComputingHeightCache];
  }
}

- (void)setHeightsHelperWithDouble:(double)height
   withFFTLayout_Orientation_Layer:(FFTLayout_Orientation_Layer *)layer
                       withBoolean:(BOOL)computingHeight
                      withNSString:(NSString *)dataModelPrefix
                       withBoolean:(BOOL)useComputingHeightCache {
  JavaUtilArrayList *viewsForSecondPass = [[JavaUtilArrayList alloc] init];
  for (FFTView * __strong view in nil_chk(((FFTLayout_Orientation_Layer *) nil_chk(layer))->views_)) {
    if (((FFTView *) nil_chk(view))->height_ != nil) {
      continue;
    }
    if (![self computeHeightWithFFTView:view withDouble:height withNSString:dataModelPrefix withBoolean:useComputingHeightCache]) {
      [viewsForSecondPass addWithId:view];
    }
  }
  BOOL allAreFill = YES;
  for (FFTView * __strong v in viewsForSecondPass) {
    if (![((FFTLength *) nil_chk(((FFTConstraints *) nil_chk([((FFTView *) nil_chk(v)) getGivenConstraints]))->height_)) fill]) {
      allAreFill = NO;
      break;
    }
  }
  if ([viewsForSecondPass size] == 0) {
    return;
  }
  if (allAreFill) {
    if (computingHeight) {
      for (FFTView * __strong view in viewsForSecondPass) {
        [((FFTView *) nil_chk(view)) setHeightWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:0.0]];
      }
      return;
    }
    double remainingHeight = [self getRemainingHeightWithFFTView:[viewsForSecondPass getWithInt:0] withDouble:height withFFTLayout_Orientation_Layer:layer];
    double heightForEach;
    heightForEach = remainingHeight / [viewsForSecondPass size];
    for (FFTView * __strong v in viewsForSecondPass) {
      [((FFTView *) nil_chk(v)) setHeightWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:heightForEach]];
    }
  }
  else {
    for (FFTView * __strong view in viewsForSecondPass) {
      [self computeHeightSecondPassWithFFTView:view withDouble:height withFFTLayout_Orientation_Layer:layer withBoolean:computingHeight];
    }
  }
}

- (BOOL)computeHeightWithFFTView:(FFTView *)view
                      withDouble:(double)height
                    withNSString:(NSString *)dataModelPrefix
                     withBoolean:(BOOL)useComputingHeightCache {
  if ([((FFTLength *) nil_chk(((FFTConstraints *) nil_chk([((FFTView *) nil_chk(view)) getGivenConstraints]))->height_)) relativeToView]) {
    FFTView *v = [((JavaUtilHashMap *) nil_chk(viewMap_)) getWithId:[((FFTConstraints *) nil_chk([view getGivenConstraints]))->height_ getRelativeId]];
    if ([((FFTView *) nil_chk(v)) getHeight] == nil) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Height can't be resolved for %@ from %@", view, v]];
    }
    double calcHeight = [((JavaLangDouble *) nil_chk([v getHeight])) doubleValue] * [((FFTConstraints *) nil_chk([view getGivenConstraints]))->height_ getRatio];
    calcHeight -= [((JavaLangDouble *) nil_chk([self subtractorViewsHeightWithJavaUtilArrayList:((FFTConstraints *) nil_chk([view getGivenConstraints]))->height_->subtractors_ withBoolean:NO])) doubleValue];
    [view setHeightWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:calcHeight]];
  }
  else if ([((FFTConstraints *) nil_chk([view getGivenConstraints]))->height_ relativeToParent]) {
    double calcHeight = (height * [((FFTConstraints *) nil_chk([view getGivenConstraints]))->height_ getRatio]);
    calcHeight -= [((JavaLangDouble *) nil_chk([self subtractorViewsHeightWithJavaUtilArrayList:((FFTConstraints *) nil_chk([view getGivenConstraints]))->height_->subtractors_ withBoolean:NO])) doubleValue];
    [view setHeightWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:calcHeight]];
  }
  else if ([((FFTConstraints *) nil_chk([view getGivenConstraints]))->height_ fill]) {
    return NO;
  }
  else if ([((FFTConstraints *) nil_chk([view getGivenConstraints]))->height_ relativeToRow]) {
    return NO;
  }
  else if ([((FFTConstraints *) nil_chk([view getGivenConstraints]))->height_ relativeToLayer]) {
    double layerHeight = [self heightForLayerWithInt:[((FFTConstraints *) nil_chk([view getGivenConstraints]))->height_ getLayerIndex]];
    layerHeight -= [((JavaLangDouble *) nil_chk([self subtractorViewsHeightWithJavaUtilArrayList:((FFTConstraints *) nil_chk([view getGivenConstraints]))->height_->subtractors_ withBoolean:NO])) doubleValue];
    [view setHeightWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:layerHeight * [((FFTConstraints *) nil_chk([view getGivenConstraints]))->height_ getRatio]]];
  }
  else if ([((FFTConstraints *) nil_chk([view getGivenConstraints]))->height_ compute]) {
    double computedHeight = [((FFTViewBehavior *) nil_chk([view getViewBehavior])) computeHeightWithBoolean:isInLandscape__ withNSString:dataModelPrefix withFFTView:view withBoolean:useComputingHeightCache];
    computedHeight -= [((JavaLangDouble *) nil_chk([self subtractorViewsHeightWithJavaUtilArrayList:((FFTConstraints *) nil_chk([view getGivenConstraints]))->height_->subtractors_ withBoolean:NO])) doubleValue];
    [view setHeightWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:computedHeight]];
  }
  else if ([((FFTConstraints *) nil_chk([view getGivenConstraints]))->height_ isFromDataModel]) {
    NSString *heightString = [((FFTDataModelManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getDataModelManager])) getValueWithNSString:dataModelPrefix withNSString:[((FFTConstraints *) nil_chk([view getGivenConstraints]))->height_ getDataModelKey] withNSString:@"{0}" withNSString:nil];
    if ([((NSString *) nil_chk(heightString)) isEqual:@"nan"]) {
      [view setHeightWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:0.0]];
    }
    else {
      [view setHeightWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:[FFTGlobalState_get_fluidApp__() sizeToPixelsWithNSString:heightString]]];
    }
  }
  else {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Can't resolve height for %@", view]];
  }
  return YES;
}

- (JavaLangDouble *)subtractorViewsWidthWithJavaUtilArrayList:(JavaUtilArrayList *)subtractors
                                                  withBoolean:(BOOL)setingUpDynamicCoords {
  double w = 0;
  for (FFTSubtractor * __strong subtractor in nil_chk(subtractors)) {
    if (![((FFTSubtractor *) nil_chk(subtractor)) isRelativeToView]) {
      w += [subtractor getFixed];
    }
    else {
      NSString *viewId = subtractor->relativeToView_;
      FFTView *v = [((JavaUtilHashMap *) nil_chk(viewMap_)) getWithId:viewId];
      if (v == nil || [v getWidth] == nil) {
        if (setingUpDynamicCoords) {
          return nil;
        }
        else {
          @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Error computing width for %@. Width unknown for %@", [((FFTView *) nil_chk(v)) getId], viewId]];
        }
      }
      w += subtractor->ratioRelativeToView_ * [((JavaLangDouble *) nil_chk([((FFTView *) nil_chk(v)) getWidth])) doubleValue];
    }
  }
  return [JavaLangDouble valueOfWithDouble:w];
}

- (JavaLangDouble *)subtractorViewsHeightWithJavaUtilArrayList:(JavaUtilArrayList *)subtractors
                                                   withBoolean:(BOOL)setingUpDynamicCoords {
  double w = 0;
  for (FFTSubtractor * __strong subtractor in nil_chk(subtractors)) {
    if (![((FFTSubtractor *) nil_chk(subtractor)) isRelativeToView]) {
      w += [subtractor getFixed];
    }
    else {
      NSString *viewId = subtractor->relativeToView_;
      FFTView *v = [((JavaUtilHashMap *) nil_chk(viewMap_)) getWithId:viewId];
      if (v == nil || [v getHeight] == nil) {
        if (setingUpDynamicCoords) {
          return nil;
        }
        else {
          @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Error computing height for %@. Height unknown for %@", [((FFTView *) nil_chk(v)) getId], viewId]];
        }
      }
      w += subtractor->ratioRelativeToView_ * [((JavaLangDouble *) nil_chk([((FFTView *) nil_chk(v)) getHeight])) doubleValue];
    }
  }
  return [JavaLangDouble valueOfWithDouble:w];
}

- (double)heightForLayerWithInt:(int)layerIndex {
  FFTLayout_Orientation_Layer *layer = [((JavaUtilArrayList *) nil_chk(((FFTLayout_Orientation *) nil_chk(self->currentOrientation_))->layers_)) getWithInt:layerIndex];
  double maxHeight = 0;
  for (FFTView * __strong v in nil_chk(((FFTLayout_Orientation_Layer *) nil_chk(layer))->views_)) {
    double height = [((JavaLangDouble *) nil_chk([((FFTView *) nil_chk(v)) getY2])) doubleValue];
    if (height > maxHeight) {
      maxHeight = height;
    }
  }
  return maxHeight;
}

- (BOOL)computeHeightSecondPassWithFFTView:(FFTView *)view
                                withDouble:(double)height
           withFFTLayout_Orientation_Layer:(FFTLayout_Orientation_Layer *)layer
                               withBoolean:(BOOL)computingHeight {
  if ([((FFTLength *) nil_chk(((FFTConstraints *) nil_chk([((FFTView *) nil_chk(view)) getGivenConstraints]))->height_)) fill]) {
    if (computingHeight) {
      [view setHeightWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:0.0]];
    }
    else {
      double remaining = [self getRemainingHeightWithFFTView:view withDouble:height withFFTLayout_Orientation_Layer:layer];
      [view setHeightWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:remaining]];
    }
  }
  else if ([((FFTConstraints *) nil_chk([view getGivenConstraints]))->height_ relativeToRow]) {
    double rowHeight = [self maxHeightForChainWithInt:[((FFTLayout_Orientation *) nil_chk(currentOrientation_)) getHorizontalChainOfWithFFTView:view] withFFTLayout_Orientation_Layer:layer];
    [view setHeightWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:rowHeight * [((FFTConstraints *) nil_chk([view getGivenConstraints]))->height_ getRatio]]];
  }
  else {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Can't resolve height for %@", view]];
  }
  return YES;
}

- (double)getRemainingHeightWithFFTView:(FFTView *)view
                             withDouble:(double)height
        withFFTLayout_Orientation_Layer:(FFTLayout_Orientation_Layer *)layer {
  JavaLangDouble *minX = [((FFTView *) nil_chk(view)) getX];
  JavaLangDouble *maxX = [view getX2];
  if (minX == nil || maxX == nil) {
    JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] initWithNSString:@"Height can't be resolved for:\n "];
    (void) [buf appendWithNSString:[NSString stringWithFormat:@"%@ ", view]];
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[buf description]];
  }
  double remaining = height;
  for (JavaUtilArrayList * __strong chain in nil_chk(((FFTLayout_Orientation_Layer *) nil_chk(layer))->horizontalChains_)) {
    double heightForChain = [self computeHeightForChainIntersectingViewWithJavaUtilArrayList:chain withFFTView:view];
    remaining -= heightForChain;
  }
  if (remaining < 0) {
    return 0;
  }
  else {
    return remaining;
  }
}

- (double)computeHeightForChainIntersectingViewWithJavaUtilArrayList:(JavaUtilArrayList *)chain
                                                         withFFTView:(FFTView *)view {
  JavaLangDouble *minX = [((FFTView *) nil_chk(view)) getX];
  JavaLangDouble *maxX = [view getX2];
  double maxHeight = 0;
  for (FFTView * __strong v in nil_chk(chain)) {
    if ([((FFTLayout_Orientation *) nil_chk(currentOrientation_)) getHorizontalChainOfWithFFTView:v] == [currentOrientation_ getHorizontalChainOfWithFFTView:view]) {
      return 0;
    }
    if (!([((JavaLangDouble *) nil_chk(minX)) doubleValue] >= [((JavaLangDouble *) nil_chk([((FFTView *) nil_chk(v)) getX2])) doubleValue] || [((JavaLangDouble *) nil_chk(maxX)) doubleValue] <= [((JavaLangDouble *) nil_chk([v getX])) doubleValue])) {
      if ([v getHeight] != nil) {
        maxHeight = [JavaLangMath maxWithDouble:maxHeight withDouble:[((JavaLangDouble *) nil_chk([v getHeight])) doubleValue]];
      }
    }
  }
  return maxHeight;
}

- (double)maxHeightForChainWithInt:(int)horizontalChain
   withFFTLayout_Orientation_Layer:(FFTLayout_Orientation_Layer *)layer {
  JavaUtilArrayList *chain = [((JavaUtilArrayList *) nil_chk(((FFTLayout_Orientation_Layer *) nil_chk(layer))->horizontalChains_)) getWithInt:horizontalChain];
  double maxHeight = 0;
  for (FFTView * __strong v in nil_chk(chain)) {
    if ([((FFTView *) nil_chk(v)) getHeight] != nil) {
      maxHeight = [JavaLangMath maxWithDouble:maxHeight withDouble:[((JavaLangDouble *) nil_chk([v getHeight])) doubleValue]];
    }
  }
  return maxHeight;
}

- (void)printTable {
  NSString *sep = @"\t";
  for (FFTLayout_Orientation_Layer * __strong layer in nil_chk(((FFTLayout_Orientation *) nil_chk(currentOrientation_))->layers_)) {
    for (FFTView * __strong view in nil_chk(((FFTLayout_Orientation_Layer *) nil_chk(layer))->views_)) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printWithNSString:[NSString stringWithFormat:@"%@%@", ((FFTView *) nil_chk(view))->id__, sep]];
      [JavaLangSystem_get_out_() printWithNSString:[NSString stringWithFormat:@"%@%@", view->x_, sep]];
      [JavaLangSystem_get_out_() printWithNSString:[NSString stringWithFormat:@"%@%@", view->y_, sep]];
      [JavaLangSystem_get_out_() printWithNSString:[NSString stringWithFormat:@"%@%@", view->x2_, sep]];
      [JavaLangSystem_get_out_() printWithNSString:[NSString stringWithFormat:@"%@%@", view->y2_, sep]];
      [JavaLangSystem_get_out_() printWithNSString:[NSString stringWithFormat:@"%@%@", view->width_, sep]];
      [JavaLangSystem_get_out_() printlnWithId:view->height_];
    }
  }
}

- (id<JavaUtilCollection>)getConditionalKeys {
  @synchronized(self) {
    {
      return conditionalKeys_;
    }
  }
}

- (void)resetWithDouble:(double)baseUnit
           withNSString:(NSString *)dataModelPrefix
             withDouble:(double)width {
  for (FFTView * __strong view in nil_chk([self getAllViews])) {
    [self clearViewWithFFTView:view];
  }
  NSString *cacheId = (dataModelPrefix == nil) ? @"default" : dataModelPrefix;
  conditionalKeys_ = [[JavaUtilHashSet alloc] init];
  for (FFTView * __strong view in nil_chk([self getAllViews])) {
    BOOL visible = [self isViewVisibleWithFFTLayout_Orientation:currentOrientation_ withFFTView:view withNSString:dataModelPrefix];
    if ([((FFTView *) nil_chk(view)) isVisible] != visible) {
      (void) [((FFTLRUCache *) nil_chk(viewCache_)) removeWithId:cacheId];
    }
    [self resetViewWithFFTView:view withDouble:baseUnit withBoolean:visible withDouble:width];
  }
}

- (BOOL)isViewVisibleWithFFTLayout_Orientation:(FFTLayout_Orientation *)o
                                   withFFTView:(FFTView *)view
                                  withNSString:(NSString *)dataModelPrefix {
  for (FFTLayout_Orientation_Layer * __strong layer in nil_chk(((FFTLayout_Orientation *) nil_chk(o))->layers_)) {
    if ([((id<JavaUtilCollection>) nil_chk(((FFTLayout_Orientation_Layer *) nil_chk(layer))->views_)) containsWithId:view]) {
      BOOL layerVisible = [self checkViewConditionWithNSString:layer->visibleCondition_ withNSString:dataModelPrefix];
      return layerVisible && [self checkViewConditionWithNSString:((FFTView *) nil_chk(view))->visibleCondition_ withNSString:dataModelPrefix];
    }
  }
  return NO;
}

- (BOOL)checkViewConditionWithNSString:(NSString *)visibleCondition
                          withNSString:(NSString *)dataModelPrefix {
  if (visibleCondition == nil) {
    return YES;
  }
  else {
    return [((FFTDataModelManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getDataModelManager])) checkConditionWithNSString:visibleCondition withNSString:dataModelPrefix withJavaUtilCollection:conditionalKeys_];
  }
}

- (void)clearViewWithFFTView:(FFTView *)view {
  ((FFTView *) nil_chk(view))->x_ = nil;
  view->y_ = nil;
  view->x2_ = nil;
  view->y2_ = nil;
  view->width_ = nil;
  view->height_ = nil;
}

- (void)resetViewWithFFTView:(FFTView *)view
                  withDouble:(double)baseUnit
                 withBoolean:(BOOL)isVisible
                  withDouble:(double)width {
  FFTConstraints *c = [((FFTView *) nil_chk(view)) getGivenConstraints];
  if (((FFTConstraints *) nil_chk(c))->x_ != nil && ![c->x_ isDynamic]) {
    [view setXWithJavaLangDouble:[c->x_ getFixed]];
  }
  if (c->y_ != nil && ![c->y_ isDynamic]) {
    [view setYWithJavaLangDouble:[c->y_ getFixed]];
  }
  if (c->x2_ != nil && ![c->x2_ isDynamic]) {
    [view setX2WithJavaLangDouble:[c->x2_ getFixed]];
  }
  if (c->y2_ != nil && ![c->y2_ isDynamic]) {
    [view setY2WithJavaLangDouble:[c->y2_ getFixed]];
  }
  if (!isVisible) {
    [view setHeightWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:0.0]];
    [view setVisibleWithBoolean:NO];
  }
  else {
    [view setVisibleWithBoolean:YES];
  }
  if (![((FFTLength *) nil_chk(c->width_)) isDynamic]) {
    [view setWidthWithJavaLangDouble:[c->width_ getFixedLength]];
  }
  if (![((FFTLength *) nil_chk(c->height_)) isDynamic] && isVisible) {
    [view setHeightWithJavaLangDouble:[c->height_ getFixedLength]];
  }
  if ([((FFTConstraints *) nil_chk([view getGivenConstraints])) getX2] != nil && [((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([view getGivenConstraints])) getX2])) isRelativeToParent]) {
    if ([((NSString *) nil_chk([((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([view getGivenConstraints])) getX2])) getRelativeEdge])) equalsIgnoreCase:@"right"]) {
      [view setX2WithJavaLangDouble:[JavaLangDouble valueOfWithDouble:width]];
    }
  }
}

- (FFTLayout *)getLayoutWithNSString:(NSString *)viewId
                        withNSString:(NSString *)layoutId {
  @synchronized(self) {
    {
      return [((FFTViewBehavior *) nil_chk([((FFTView *) nil_chk([((JavaUtilHashMap *) nil_chk(viewMap_)) getWithId:viewId])) getViewBehavior])) getLayoutWithNSString:layoutId];
    }
  }
}

- (double)calculateHeightWithBoolean:(BOOL)landscape
                           withFloat:(float)width
                        withNSString:(NSString *)dataModelPrefix {
  @synchronized(self) {
    {
      return [self calculateHeightWithBoolean:landscape withFloat:width withNSString:dataModelPrefix withBoolean:YES];
    }
  }
}

- (double)calculateHeightWithBoolean:(BOOL)landscape
                           withFloat:(float)width
                        withNSString:(NSString *)dataModelPrefix
                         withBoolean:(BOOL)useCache {
  @synchronized(self) {
    {
      if ([@"" isEqual:dataModelPrefix]) {
        dataModelPrefix = nil;
      }
      NSString *dataModelPrefixFinal = dataModelPrefix;
      if (dataModelPrefixFinal != nil && FFTFluidApp_useCaching && useCache) {
        FFTLayout_CalculatedHeight *calculatedHeight = [((FFTLRUCache *) nil_chk(cache_)) getWithId:dataModelPrefixFinal];
        if (calculatedHeight != nil && width == calculatedHeight->width_) {
          return calculatedHeight->calculatedHeight_;
        }
      }
      (void) [self layoutWithBoolean:landscape withDouble:width withDouble:0 withNSString:dataModelPrefix withBoolean:NO withBoolean:YES withBoolean:useCache withNSString:nil];
      double maxHeight = 0;
      for (FFTView * __strong v in nil_chk([self getAllViews])) {
        double height = [((JavaLangDouble *) nil_chk([((FFTView *) nil_chk(v)) getY2])) doubleValue];
        if (height > maxHeight) {
          maxHeight = height;
        }
      }
      if (dataModelPrefixFinal != nil && FFTFluidApp_useCaching && useCache) {
        (void) [((FFTLRUCache *) nil_chk(cache_)) putWithId:dataModelPrefixFinal withId:[[FFTLayout_CalculatedHeight alloc] initWithFloat:width withDouble:maxHeight]];
        [((FFTDataModelManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getDataModelManager])) addDataChangeListenerWithNSString:nil withNSString:dataModelPrefixFinal withNSString:[NSString stringWithFormat:@"%@%@-calculateHeight", [self getId], dataModelPrefixFinal] withFFTDataChangeListener:[[FFTLayout_$20 alloc] initWithFFTLayout:self withNSString:dataModelPrefixFinal]];
      }
      return maxHeight;
    }
  }
}

- (void)entryWasRemovedWithId:(NSString *)cacheId
                       withId:(FFTLayout_LastLayout *)entry_ {
  [((FFTDataModelManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getDataModelManager])) removeDataChangeListenerWithNSString:cacheId];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"Layout(name=%@, nameKey=%@, subtitle=%@, subtitleKey=%@, id=%@, backgroundColor=%@, precomputedPositions=%@, wrapInScrollView=%@, blockFocusViewOnLoad=%@, lastLayout=%@, viewCache=%@, spacerId=%d, portrait=%@, landscape=%@, currentOrientation=%@, allViews=%@, allViewsToBePresentedToUI=%@, viewMap=%@, propertiesByCategory=%@, lastLeftEdge=%@, lastRightEdge=%@, last=%@, baseUnit=%f, isInLandscape=%@, conditionalKeys=%@, cache=%@)", [self getName], [self getNameKey], [self getSubtitle], [self getSubtitleKey], [self getId], [self getBackgroundColor], [JavaLangBoolean toStringWithBoolean:[self isPrecomputedPositions]], [JavaLangBoolean toStringWithBoolean:[self isWrapInScrollView]], [JavaLangBoolean toStringWithBoolean:[self isBlockFocusViewOnLoad]], [self getLastLayout], [self getViewCache], [self getSpacerId], [self getPortrait], [self getLandscape], [self getCurrentOrientation], [self getAllViews], [self getAllViewsToBePresentedToUI], [self getViewMap], [self getPropertiesByCategory], [self getLastLeftEdge], [self getLastRightEdge], [self getLast], [self getBaseUnit], [JavaLangBoolean toStringWithBoolean:[self isInLandscape]], [self getConditionalKeys], [self getCache]];
}

- (NSString *)getName {
  return self->name_;
}

- (NSString *)getNameKey {
  return self->nameKey_;
}

- (NSString *)getSubtitle {
  return self->subtitle_;
}

- (NSString *)getSubtitleKey {
  return self->subtitleKey_;
}

- (NSString *)getId {
  return self->id__;
}

- (FFTColor *)getBackgroundColor {
  return self->backgroundColor_;
}

- (BOOL)isPrecomputedPositions {
  return self->precomputedPositions_;
}

- (BOOL)isWrapInScrollView {
  return self->wrapInScrollView_;
}

- (BOOL)isBlockFocusViewOnLoad {
  return self->blockFocusViewOnLoad_;
}

- (FFTLayout_LastLayout *)getLastLayout {
  return self->lastLayout_;
}

- (FFTLRUCache *)getViewCache {
  return self->viewCache_;
}

- (int)getSpacerId {
  return self->spacerId_;
}

- (FFTLayout_Orientation *)getPortrait {
  return self->portrait_;
}

- (FFTLayout_Orientation *)getLandscape {
  return self->landscape_;
}

- (FFTLayout_Orientation *)getCurrentOrientation {
  return self->currentOrientation_;
}

- (JavaUtilHashMap *)getViewMap {
  return self->viewMap_;
}

- (JavaUtilHashMap *)getPropertiesByCategory {
  return self->propertiesByCategory_;
}

- (FFTView *)getLastLeftEdge {
  return self->lastLeftEdge_;
}

- (FFTView *)getLastRightEdge {
  return self->lastRightEdge_;
}

- (FFTView *)getLast {
  return self->last_;
}

- (double)getBaseUnit {
  return self->baseUnit_;
}

- (BOOL)isInLandscape {
  return self->isInLandscape__;
}

- (FFTLRUCache *)getCache {
  return self->cache_;
}

- (void)setSubtitleWithNSString:(NSString *)subtitle {
  self->subtitle_ = subtitle;
}

- (void)setSubtitleKeyWithNSString:(NSString *)subtitleKey {
  self->subtitleKey_ = subtitleKey;
}

- (void)setBackgroundColorWithFFTColor:(FFTColor *)backgroundColor {
  self->backgroundColor_ = backgroundColor;
}

- (void)setPrecomputedPositionsWithBoolean:(BOOL)precomputedPositions {
  self->precomputedPositions_ = precomputedPositions;
}

- (void)setWrapInScrollViewWithBoolean:(BOOL)wrapInScrollView {
  self->wrapInScrollView_ = wrapInScrollView;
}

- (void)setBlockFocusViewOnLoadWithBoolean:(BOOL)blockFocusViewOnLoad {
  self->blockFocusViewOnLoad_ = blockFocusViewOnLoad;
}

- (void)setLastLayoutWithFFTLayout_LastLayout:(FFTLayout_LastLayout *)lastLayout {
  self->lastLayout_ = lastLayout;
}

- (void)setViewCacheWithFFTLRUCache:(FFTLRUCache *)viewCache {
  self->viewCache_ = viewCache;
}

- (void)setSpacerIdWithInt:(int)spacerId {
  self->spacerId_ = spacerId;
}

- (void)setPortraitWithFFTLayout_Orientation:(FFTLayout_Orientation *)portrait {
  self->portrait_ = portrait;
}

- (void)setLandscapeWithFFTLayout_Orientation:(FFTLayout_Orientation *)landscape {
  self->landscape_ = landscape;
}

- (void)setCurrentOrientationWithFFTLayout_Orientation:(FFTLayout_Orientation *)currentOrientation {
  self->currentOrientation_ = currentOrientation;
}

- (void)setAllViewsWithJavaUtilLinkedHashSet:(JavaUtilLinkedHashSet *)allViews {
  self->allViews_ = allViews;
}

- (void)setAllViewsToBePresentedToUIWithJavaUtilArrayList:(JavaUtilArrayList *)allViewsToBePresentedToUI {
  self->allViewsToBePresentedToUI_ = allViewsToBePresentedToUI;
}

- (void)setViewMapWithJavaUtilHashMap:(JavaUtilHashMap *)viewMap {
  self->viewMap_ = viewMap;
}

- (void)setPropertiesByCategoryWithJavaUtilHashMap:(JavaUtilHashMap *)propertiesByCategory {
  self->propertiesByCategory_ = propertiesByCategory;
}

- (void)setLastLeftEdgeWithFFTView:(FFTView *)lastLeftEdge {
  self->lastLeftEdge_ = lastLeftEdge;
}

- (void)setLastRightEdgeWithFFTView:(FFTView *)lastRightEdge {
  self->lastRightEdge_ = lastRightEdge;
}

- (void)setLastWithFFTView:(FFTView *)last {
  self->last_ = last;
}

- (void)setBaseUnitWithDouble:(double)baseUnit {
  self->baseUnit_ = baseUnit;
}

- (void)setInLandscapeWithBoolean:(BOOL)isInLandscape {
  self->isInLandscape__ = isInLandscape;
}

- (void)setConditionalKeysWithJavaUtilHashSet:(JavaUtilHashSet *)conditionalKeys {
  self->conditionalKeys_ = conditionalKeys;
}

- (void)setCacheWithFFTLRUCache:(FFTLRUCache *)cache {
  self->cache_ = cache;
}

- (BOOL)isEqual:(id)o {
  if (o == self) return YES;
  if (!([o isKindOfClass:[FFTLayout class]])) return NO;
  FFTLayout *other = (FFTLayout *) check_class_cast(o, [FFTLayout class]);
  if (![((FFTLayout *) nil_chk(other)) canEqualWithId:(id) check_class_cast(self, [NSObject class])]) return NO;
  id this$name = [self getName];
  id other$name = [other getName];
  if (this$name == nil ? other$name != nil : ![this$name isEqual:other$name]) return NO;
  id this$nameKey = [self getNameKey];
  id other$nameKey = [other getNameKey];
  if (this$nameKey == nil ? other$nameKey != nil : ![this$nameKey isEqual:other$nameKey]) return NO;
  id this$subtitle = [self getSubtitle];
  id other$subtitle = [other getSubtitle];
  if (this$subtitle == nil ? other$subtitle != nil : ![this$subtitle isEqual:other$subtitle]) return NO;
  id this$subtitleKey = [self getSubtitleKey];
  id other$subtitleKey = [other getSubtitleKey];
  if (this$subtitleKey == nil ? other$subtitleKey != nil : ![this$subtitleKey isEqual:other$subtitleKey]) return NO;
  id this$id = [self getId];
  id other$id = [other getId];
  if (this$id == nil ? other$id != nil : ![this$id isEqual:other$id]) return NO;
  id this$backgroundColor = [self getBackgroundColor];
  id other$backgroundColor = [other getBackgroundColor];
  if (this$backgroundColor == nil ? other$backgroundColor != nil : ![this$backgroundColor isEqual:other$backgroundColor]) return NO;
  if ([self isPrecomputedPositions] != [other isPrecomputedPositions]) return NO;
  if ([self isWrapInScrollView] != [other isWrapInScrollView]) return NO;
  if ([self isBlockFocusViewOnLoad] != [other isBlockFocusViewOnLoad]) return NO;
  id this$lastLayout = [self getLastLayout];
  id other$lastLayout = [other getLastLayout];
  if (this$lastLayout == nil ? other$lastLayout != nil : ![this$lastLayout isEqual:other$lastLayout]) return NO;
  id this$viewCache = [self getViewCache];
  id other$viewCache = [other getViewCache];
  if (this$viewCache == nil ? other$viewCache != nil : ![this$viewCache isEqual:other$viewCache]) return NO;
  if ([self getSpacerId] != [other getSpacerId]) return NO;
  id this$portrait = [self getPortrait];
  id other$portrait = [other getPortrait];
  if (this$portrait == nil ? other$portrait != nil : ![this$portrait isEqual:other$portrait]) return NO;
  id this$landscape = [self getLandscape];
  id other$landscape = [other getLandscape];
  if (this$landscape == nil ? other$landscape != nil : ![this$landscape isEqual:other$landscape]) return NO;
  id this$currentOrientation = [self getCurrentOrientation];
  id other$currentOrientation = [other getCurrentOrientation];
  if (this$currentOrientation == nil ? other$currentOrientation != nil : ![this$currentOrientation isEqual:other$currentOrientation]) return NO;
  id this$allViews = [self getAllViews];
  id other$allViews = [other getAllViews];
  if (this$allViews == nil ? other$allViews != nil : ![this$allViews isEqual:other$allViews]) return NO;
  id this$allViewsToBePresentedToUI = [self getAllViewsToBePresentedToUI];
  id other$allViewsToBePresentedToUI = [other getAllViewsToBePresentedToUI];
  if (this$allViewsToBePresentedToUI == nil ? other$allViewsToBePresentedToUI != nil : ![this$allViewsToBePresentedToUI isEqual:other$allViewsToBePresentedToUI]) return NO;
  id this$viewMap = [self getViewMap];
  id other$viewMap = [other getViewMap];
  if (this$viewMap == nil ? other$viewMap != nil : ![this$viewMap isEqual:other$viewMap]) return NO;
  id this$propertiesByCategory = [self getPropertiesByCategory];
  id other$propertiesByCategory = [other getPropertiesByCategory];
  if (this$propertiesByCategory == nil ? other$propertiesByCategory != nil : ![this$propertiesByCategory isEqual:other$propertiesByCategory]) return NO;
  id this$lastLeftEdge = [self getLastLeftEdge];
  id other$lastLeftEdge = [other getLastLeftEdge];
  if (this$lastLeftEdge == nil ? other$lastLeftEdge != nil : ![this$lastLeftEdge isEqual:other$lastLeftEdge]) return NO;
  id this$lastRightEdge = [self getLastRightEdge];
  id other$lastRightEdge = [other getLastRightEdge];
  if (this$lastRightEdge == nil ? other$lastRightEdge != nil : ![this$lastRightEdge isEqual:other$lastRightEdge]) return NO;
  id this$last = [self getLast];
  id other$last = [other getLast];
  if (this$last == nil ? other$last != nil : ![this$last isEqual:other$last]) return NO;
  if ([JavaLangDouble compareWithDouble:[self getBaseUnit] withDouble:[other getBaseUnit]] != 0) return NO;
  if ([self isInLandscape] != [other isInLandscape]) return NO;
  id this$conditionalKeys = [self getConditionalKeys];
  id other$conditionalKeys = [other getConditionalKeys];
  if (this$conditionalKeys == nil ? other$conditionalKeys != nil : ![this$conditionalKeys isEqual:other$conditionalKeys]) return NO;
  id this$cache = [self getCache];
  id other$cache = [other getCache];
  if (this$cache == nil ? other$cache != nil : ![this$cache isEqual:other$cache]) return NO;
  return YES;
}

- (BOOL)canEqualWithId:(id)other {
  return [other isKindOfClass:[FFTLayout class]];
}

- (NSUInteger)hash {
  int PRIME = 59;
  int result = 1;
  id $name = [self getName];
  result = result * PRIME + ($name == nil ? 0 : ((int) [$name hash]));
  id $nameKey = [self getNameKey];
  result = result * PRIME + ($nameKey == nil ? 0 : ((int) [$nameKey hash]));
  id $subtitle = [self getSubtitle];
  result = result * PRIME + ($subtitle == nil ? 0 : ((int) [$subtitle hash]));
  id $subtitleKey = [self getSubtitleKey];
  result = result * PRIME + ($subtitleKey == nil ? 0 : ((int) [$subtitleKey hash]));
  id $id = [self getId];
  result = result * PRIME + ($id == nil ? 0 : ((int) [$id hash]));
  id $backgroundColor = [self getBackgroundColor];
  result = result * PRIME + ($backgroundColor == nil ? 0 : ((int) [$backgroundColor hash]));
  result = result * PRIME + ([self isPrecomputedPositions] ? 79 : 97);
  result = result * PRIME + ([self isWrapInScrollView] ? 79 : 97);
  result = result * PRIME + ([self isBlockFocusViewOnLoad] ? 79 : 97);
  id $lastLayout = [self getLastLayout];
  result = result * PRIME + ($lastLayout == nil ? 0 : ((int) [$lastLayout hash]));
  id $viewCache = [self getViewCache];
  result = result * PRIME + ($viewCache == nil ? 0 : ((int) [$viewCache hash]));
  result = result * PRIME + [self getSpacerId];
  id $portrait = [self getPortrait];
  result = result * PRIME + ($portrait == nil ? 0 : ((int) [$portrait hash]));
  id $landscape = [self getLandscape];
  result = result * PRIME + ($landscape == nil ? 0 : ((int) [$landscape hash]));
  id $currentOrientation = [self getCurrentOrientation];
  result = result * PRIME + ($currentOrientation == nil ? 0 : ((int) [$currentOrientation hash]));
  id $allViews = [self getAllViews];
  result = result * PRIME + ($allViews == nil ? 0 : ((int) [$allViews hash]));
  id $allViewsToBePresentedToUI = [self getAllViewsToBePresentedToUI];
  result = result * PRIME + ($allViewsToBePresentedToUI == nil ? 0 : ((int) [$allViewsToBePresentedToUI hash]));
  id $viewMap = [self getViewMap];
  result = result * PRIME + ($viewMap == nil ? 0 : ((int) [$viewMap hash]));
  id $propertiesByCategory = [self getPropertiesByCategory];
  result = result * PRIME + ($propertiesByCategory == nil ? 0 : ((int) [$propertiesByCategory hash]));
  id $lastLeftEdge = [self getLastLeftEdge];
  result = result * PRIME + ($lastLeftEdge == nil ? 0 : ((int) [$lastLeftEdge hash]));
  id $lastRightEdge = [self getLastRightEdge];
  result = result * PRIME + ($lastRightEdge == nil ? 0 : ((int) [$lastRightEdge hash]));
  id $last = [self getLast];
  result = result * PRIME + ($last == nil ? 0 : ((int) [$last hash]));
  long long int $baseUnit = [JavaLangDouble doubleToLongBitsWithDouble:[self getBaseUnit]];
  result = result * PRIME + (int) ((long long) (((unsigned long long) $baseUnit) >> 32) ^ $baseUnit);
  result = result * PRIME + ([self isInLandscape] ? 79 : 97);
  id $conditionalKeys = [self getConditionalKeys];
  result = result * PRIME + ($conditionalKeys == nil ? 0 : ((int) [$conditionalKeys hash]));
  id $cache = [self getCache];
  result = result * PRIME + ($cache == nil ? 0 : ((int) [$cache hash]));
  return result;
}

- (void)copyAllFieldsTo:(FFTLayout *)other {
  [super copyAllFieldsTo:other];
  other->allViews_ = allViews_;
  other->allViewsToBePresentedToUI_ = allViewsToBePresentedToUI_;
  other->backgroundColor_ = backgroundColor_;
  other->baseUnit_ = baseUnit_;
  other->blockFocusViewOnLoad_ = blockFocusViewOnLoad_;
  other->cache_ = cache_;
  other->conditionalKeys_ = conditionalKeys_;
  other->currentOrientation_ = currentOrientation_;
  other->id__ = id__;
  other->isInLandscape__ = isInLandscape__;
  other->landscape_ = landscape_;
  other->last_ = last_;
  other->lastLayout_ = lastLayout_;
  other->lastLeftEdge_ = lastLeftEdge_;
  other->lastRightEdge_ = lastRightEdge_;
  other->name_ = name_;
  other->nameKey_ = nameKey_;
  other->portrait_ = portrait_;
  other->precomputedPositions_ = precomputedPositions_;
  other->propertiesByCategory_ = propertiesByCategory_;
  other->spacerId_ = spacerId_;
  other->subtitle_ = subtitle_;
  other->subtitleKey_ = subtitleKey_;
  other->viewCache_ = viewCache_;
  other->viewMap_ = viewMap_;
  other->wrapInScrollView_ = wrapInScrollView_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withNSString:withDouble:", "Layout", NULL, 0x1, NULL },
    { "getAllViews", NULL, "Ljava.util.Collection;", 0x1, NULL },
    { "getAllViewsToBePresentedToUI", NULL, "Ljava.util.Collection;", 0x1, NULL },
    { "setAnchorWithFFTView:withFFTLayout_DirectionEnum:", "setAnchor", "V", 0x1, NULL },
    { "setPropertiesWithJavaUtilList:", "setProperties", "V", 0x1, NULL },
    { "getPropertyWithNSString:withNSString:", "getProperty", "Ljava.lang.String;", 0x1, NULL },
    { "addViewWithFFTView:", "addView", "V", 0x0, NULL },
    { "setupDynamicCoordsWithFFTView:", "setupDynamicCoords", "V", 0x2, NULL },
    { "registerDynamicCoordRelativeHeightWithFFTView:withFFTLayoutAction:", "registerDynamicCoordRelativeHeight", "V", 0x2, NULL },
    { "registerDynamicCoordRelativeHeight2WithFFTView:withFFTLayoutAction:", "registerDynamicCoordRelativeHeight2", "V", 0x2, NULL },
    { "addNewLayerWithNSString:", "addNewLayer", "V", 0x1, NULL },
    { "addNewLayerWithNSString:withInt:", "addNewLayer", "V", 0x1, NULL },
    { "addRightWithFFTView:withFFTLayout_AlignEnum:", "addRight", "V", 0x1, NULL },
    { "addLeftWithFFTView:withFFTLayout_AlignEnum:", "addLeft", "V", 0x1, NULL },
    { "addDownWithFFTView:withFFTLayout_AlignEnum:withFFTLayout_DirectionEnum:", "addDown", "V", 0x1, NULL },
    { "getViewsWithBoolean:withDouble:withDouble:withNSString:", "getViews", "Ljava.util.Collection;", 0x21, NULL },
    { "getViewsWithBoolean:withDouble:withDouble:withNSString:withNSString:", "getViews", "Ljava.util.Collection;", 0x21, NULL },
    { "invalidateCacheWithNSString:", "invalidateCache", "V", 0x21, NULL },
    { "getViewsWithBoolean:withDouble:withDouble:withNSString:withNSString:withBoolean:", "getViews", "Ljava.util.Collection;", 0x22, NULL },
    { "getViewPositionsWithNSString:withJavaUtilCollection:", "getViewPositions", "Ljava.util.Collection;", 0x29, NULL },
    { "createOrientationLandscape", NULL, "V", 0x21, NULL },
    { "setOrientationLandscapeWithBoolean:", "setOrientationLandscape", "V", 0x21, NULL },
    { "sortAllViewsAccordingToLayerZIndex", NULL, "V", 0x2, NULL },
    { "layoutWithBoolean:withDouble:withDouble:withNSString:withBoolean:withBoolean:withBoolean:withNSString:", "layout", "Ljava.util.ArrayList;", 0x24, NULL },
    { "setWidthsWithDouble:withNSString:", "setWidths", "V", 0x2, NULL },
    { "setWidthsHelperWithDouble:withFFTLayout_Orientation_Layer:withNSString:", "setWidthsHelper", "V", 0x2, NULL },
    { "computeWidthWithFFTView:withDouble:withNSString:", "computeWidth", "Z", 0x2, NULL },
    { "computeWidthSecondPassWithFFTView:withDouble:withFFTLayout_Orientation_Layer:", "computeWidthSecondPass", "V", 0x2, NULL },
    { "getRemainingWidthCheckingEarlierChainWithJavaUtilArrayList:withInt:withDouble:withFFTLayout_Orientation_Layer:", "getRemainingWidthCheckingEarlierChain", "D", 0x2, NULL },
    { "setHeightsWithDouble:withBoolean:withNSString:withBoolean:", "setHeights", "V", 0x2, NULL },
    { "setHeightsHelperWithDouble:withFFTLayout_Orientation_Layer:withBoolean:withNSString:withBoolean:", "setHeightsHelper", "V", 0x2, NULL },
    { "computeHeightWithFFTView:withDouble:withNSString:withBoolean:", "computeHeight", "Z", 0x2, NULL },
    { "subtractorViewsWidthWithJavaUtilArrayList:withBoolean:", "subtractorViewsWidth", "Ljava.lang.Double;", 0x2, NULL },
    { "subtractorViewsHeightWithJavaUtilArrayList:withBoolean:", "subtractorViewsHeight", "Ljava.lang.Double;", 0x2, NULL },
    { "heightForLayerWithInt:", "heightForLayer", "D", 0x2, NULL },
    { "computeHeightSecondPassWithFFTView:withDouble:withFFTLayout_Orientation_Layer:withBoolean:", "computeHeightSecondPass", "Z", 0x2, NULL },
    { "getRemainingHeightWithFFTView:withDouble:withFFTLayout_Orientation_Layer:", "getRemainingHeight", "D", 0x2, NULL },
    { "computeHeightForChainIntersectingViewWithJavaUtilArrayList:withFFTView:", "computeHeightForChainIntersectingView", "D", 0x2, NULL },
    { "maxHeightForChainWithInt:withFFTLayout_Orientation_Layer:", "maxHeightForChain", "D", 0x2, NULL },
    { "printTable", NULL, "V", 0x2, NULL },
    { "getConditionalKeys", NULL, "Ljava.util.Collection;", 0x21, NULL },
    { "resetWithDouble:withNSString:withDouble:", "reset", "V", 0x1, NULL },
    { "isViewVisibleWithFFTLayout_Orientation:withFFTView:withNSString:", "isViewVisible", "Z", 0x2, NULL },
    { "checkViewConditionWithNSString:withNSString:", "checkViewCondition", "Z", 0x2, NULL },
    { "clearViewWithFFTView:", "clearView", "V", 0x2, NULL },
    { "resetViewWithFFTView:withDouble:withBoolean:withDouble:", "resetView", "V", 0x2, NULL },
    { "getLayoutWithNSString:withNSString:", "getLayout", "Lcom.sponberg.fluid.layout.Layout;", 0x21, NULL },
    { "calculateHeightWithBoolean:withFloat:withNSString:", "calculateHeight", "D", 0x21, NULL },
    { "calculateHeightWithBoolean:withFloat:withNSString:withBoolean:", "calculateHeight", "D", 0x21, NULL },
    { "entryWasRemovedWithNSString:withFFTLayout_LastLayout:", "entryWasRemoved", "V", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getNameKey", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getSubtitle", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getSubtitleKey", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getId", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getBackgroundColor", NULL, "Lcom.sponberg.fluid.layout.Color;", 0x1, NULL },
    { "isPrecomputedPositions", NULL, "Z", 0x1, NULL },
    { "isWrapInScrollView", NULL, "Z", 0x1, NULL },
    { "isBlockFocusViewOnLoad", NULL, "Z", 0x1, NULL },
    { "getLastLayout", NULL, "Lcom.sponberg.fluid.layout.Layout$LastLayout;", 0x1, NULL },
    { "getViewCache", NULL, "Lcom.sponberg.fluid.util.LRUCache;", 0x1, NULL },
    { "getSpacerId", NULL, "I", 0x1, NULL },
    { "getPortrait", NULL, "Lcom.sponberg.fluid.layout.Layout$Orientation;", 0x1, NULL },
    { "getLandscape", NULL, "Lcom.sponberg.fluid.layout.Layout$Orientation;", 0x1, NULL },
    { "getCurrentOrientation", NULL, "Lcom.sponberg.fluid.layout.Layout$Orientation;", 0x1, NULL },
    { "getViewMap", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "getPropertiesByCategory", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "getLastLeftEdge", NULL, "Lcom.sponberg.fluid.layout.View;", 0x1, NULL },
    { "getLastRightEdge", NULL, "Lcom.sponberg.fluid.layout.View;", 0x1, NULL },
    { "getLast", NULL, "Lcom.sponberg.fluid.layout.View;", 0x1, NULL },
    { "getBaseUnit", NULL, "D", 0x1, NULL },
    { "isInLandscape", NULL, "Z", 0x1, NULL },
    { "getCache", NULL, "Lcom.sponberg.fluid.util.LRUCache;", 0x1, NULL },
    { "setSubtitleWithNSString:", "setSubtitle", "V", 0x1, NULL },
    { "setSubtitleKeyWithNSString:", "setSubtitleKey", "V", 0x1, NULL },
    { "setBackgroundColorWithFFTColor:", "setBackgroundColor", "V", 0x1, NULL },
    { "setPrecomputedPositionsWithBoolean:", "setPrecomputedPositions", "V", 0x1, NULL },
    { "setWrapInScrollViewWithBoolean:", "setWrapInScrollView", "V", 0x1, NULL },
    { "setBlockFocusViewOnLoadWithBoolean:", "setBlockFocusViewOnLoad", "V", 0x1, NULL },
    { "setLastLayoutWithFFTLayout_LastLayout:", "setLastLayout", "V", 0x1, NULL },
    { "setViewCacheWithFFTLRUCache:", "setViewCache", "V", 0x1, NULL },
    { "setSpacerIdWithInt:", "setSpacerId", "V", 0x1, NULL },
    { "setPortraitWithFFTLayout_Orientation:", "setPortrait", "V", 0x1, NULL },
    { "setLandscapeWithFFTLayout_Orientation:", "setLandscape", "V", 0x1, NULL },
    { "setCurrentOrientationWithFFTLayout_Orientation:", "setCurrentOrientation", "V", 0x1, NULL },
    { "setAllViewsWithJavaUtilLinkedHashSet:", "setAllViews", "V", 0x1, NULL },
    { "setAllViewsToBePresentedToUIWithJavaUtilArrayList:", "setAllViewsToBePresentedToUI", "V", 0x1, NULL },
    { "setViewMapWithJavaUtilHashMap:", "setViewMap", "V", 0x1, NULL },
    { "setPropertiesByCategoryWithJavaUtilHashMap:", "setPropertiesByCategory", "V", 0x1, NULL },
    { "setLastLeftEdgeWithFFTView:", "setLastLeftEdge", "V", 0x1, NULL },
    { "setLastRightEdgeWithFFTView:", "setLastRightEdge", "V", 0x1, NULL },
    { "setLastWithFFTView:", "setLast", "V", 0x1, NULL },
    { "setBaseUnitWithDouble:", "setBaseUnit", "V", 0x1, NULL },
    { "setInLandscapeWithBoolean:", "setInLandscape", "V", 0x1, NULL },
    { "setConditionalKeysWithJavaUtilHashSet:", "setConditionalKeys", "V", 0x1, NULL },
    { "setCacheWithFFTLRUCache:", "setCache", "V", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "canEqualWithId:", "canEqual", "Z", 0x4, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "nameKey_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "subtitle_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "subtitleKey_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "id__", "id", 0x12, "Ljava.lang.String;", NULL,  },
    { "backgroundColor_", NULL, 0x2, "Lcom.sponberg.fluid.layout.Color;", NULL,  },
    { "precomputedPositions_", NULL, 0x2, "Z", NULL,  },
    { "wrapInScrollView_", NULL, 0x2, "Z", NULL,  },
    { "blockFocusViewOnLoad_", NULL, 0x2, "Z", NULL,  },
    { "lastLayout_", NULL, 0x0, "Lcom.sponberg.fluid.layout.Layout$LastLayout;", NULL,  },
    { "viewCache_", NULL, 0x0, "Lcom.sponberg.fluid.util.LRUCache;", NULL,  },
    { "spacerId_", NULL, 0x2, "I", NULL,  },
    { "portrait_", NULL, 0x0, "Lcom.sponberg.fluid.layout.Layout$Orientation;", NULL,  },
    { "landscape_", NULL, 0x0, "Lcom.sponberg.fluid.layout.Layout$Orientation;", NULL,  },
    { "currentOrientation_", NULL, 0x0, "Lcom.sponberg.fluid.layout.Layout$Orientation;", NULL,  },
    { "allViews_", NULL, 0x0, "Ljava.util.LinkedHashSet;", NULL,  },
    { "allViewsToBePresentedToUI_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
    { "viewMap_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "propertiesByCategory_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "lastLeftEdge_", NULL, 0x0, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "lastRightEdge_", NULL, 0x0, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "last_", NULL, 0x0, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "baseUnit_", NULL, 0x0, "D", NULL,  },
    { "isInLandscape__", "isInLandscape", 0x0, "Z", NULL,  },
    { "conditionalKeys_", NULL, 0x2, "Ljava.util.HashSet;", NULL,  },
    { "cache_", NULL, 0x0, "Lcom.sponberg.fluid.util.LRUCache;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout = { "Layout", "com.sponberg.fluid.layout", NULL, 0x1, 100, methods, 26, fields, 0, NULL};
  return &_FFTLayout;
}

@end

BOOL FFTLayout_DirectionEnum_initialized = NO;

FFTLayout_DirectionEnum *FFTLayout_DirectionEnum_values[2];

@implementation FFTLayout_DirectionEnum

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (id)initWithNSString:(NSString *)__name withInt:(int)__ordinal {
  return [super initWithNSString:__name withInt:__ordinal];
}

+ (void)initialize {
  if (self == [FFTLayout_DirectionEnum class]) {
    FFTLayout_DirectionEnum_RIGHT = [[FFTLayout_DirectionEnum alloc] initWithNSString:@"RIGHT" withInt:0];
    FFTLayout_DirectionEnum_LEFT = [[FFTLayout_DirectionEnum alloc] initWithNSString:@"LEFT" withInt:1];
    FFTLayout_DirectionEnum_initialized = YES;
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithObjects:FFTLayout_DirectionEnum_values count:2 type:[IOSClass classWithClass:[FFTLayout_DirectionEnum class]]];
}

+ (FFTLayout_DirectionEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < 2; i++) {
    FFTLayout_DirectionEnum *e = FFTLayout_DirectionEnum_values[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "RIGHT", "RIGHT", 0x4019, "Lcom.sponberg.fluid.layout.Layout$Direction;", &FFTLayout_DirectionEnum_RIGHT,  },
    { "LEFT", "LEFT", 0x4019, "Lcom.sponberg.fluid.layout.Layout$Direction;", &FFTLayout_DirectionEnum_LEFT,  },
  };
  static const char *superclass_type_args[] = {"Lcom.sponberg.fluid.layout.Layout$Direction;"};
  static J2ObjcClassInfo _FFTLayout_DirectionEnum = { "Direction", "com.sponberg.fluid.layout", "Layout", 0x4019, 1, methods, 2, fields, 1, superclass_type_args};
  return &_FFTLayout_DirectionEnum;
}

@end

BOOL FFTLayout_AlignEnum_initialized = NO;

FFTLayout_AlignEnum *FFTLayout_AlignEnum_values[6];

@implementation FFTLayout_AlignEnum

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (id)initWithNSString:(NSString *)__name withInt:(int)__ordinal {
  return [super initWithNSString:__name withInt:__ordinal];
}

+ (void)initialize {
  if (self == [FFTLayout_AlignEnum class]) {
    FFTLayout_AlignEnum_TOP = [[FFTLayout_AlignEnum alloc] initWithNSString:@"TOP" withInt:0];
    FFTLayout_AlignEnum_BOTTOM = [[FFTLayout_AlignEnum alloc] initWithNSString:@"BOTTOM" withInt:1];
    FFTLayout_AlignEnum_LEFT = [[FFTLayout_AlignEnum alloc] initWithNSString:@"LEFT" withInt:2];
    FFTLayout_AlignEnum_CENTER = [[FFTLayout_AlignEnum alloc] initWithNSString:@"CENTER" withInt:3];
    FFTLayout_AlignEnum_RIGHT = [[FFTLayout_AlignEnum alloc] initWithNSString:@"RIGHT" withInt:4];
    FFTLayout_AlignEnum_UNASSIGNED = [[FFTLayout_AlignEnum alloc] initWithNSString:@"UNASSIGNED" withInt:5];
    FFTLayout_AlignEnum_initialized = YES;
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithObjects:FFTLayout_AlignEnum_values count:6 type:[IOSClass classWithClass:[FFTLayout_AlignEnum class]]];
}

+ (FFTLayout_AlignEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < 6; i++) {
    FFTLayout_AlignEnum *e = FFTLayout_AlignEnum_values[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "TOP", "TOP", 0x4019, "Lcom.sponberg.fluid.layout.Layout$Align;", &FFTLayout_AlignEnum_TOP,  },
    { "BOTTOM", "BOTTOM", 0x4019, "Lcom.sponberg.fluid.layout.Layout$Align;", &FFTLayout_AlignEnum_BOTTOM,  },
    { "LEFT", "LEFT", 0x4019, "Lcom.sponberg.fluid.layout.Layout$Align;", &FFTLayout_AlignEnum_LEFT,  },
    { "CENTER", "CENTER", 0x4019, "Lcom.sponberg.fluid.layout.Layout$Align;", &FFTLayout_AlignEnum_CENTER,  },
    { "RIGHT", "RIGHT", 0x4019, "Lcom.sponberg.fluid.layout.Layout$Align;", &FFTLayout_AlignEnum_RIGHT,  },
    { "UNASSIGNED", "UNASSIGNED", 0x4019, "Lcom.sponberg.fluid.layout.Layout$Align;", &FFTLayout_AlignEnum_UNASSIGNED,  },
  };
  static const char *superclass_type_args[] = {"Lcom.sponberg.fluid.layout.Layout$Align;"};
  static J2ObjcClassInfo _FFTLayout_AlignEnum = { "Align", "com.sponberg.fluid.layout", "Layout", 0x4019, 1, methods, 6, fields, 1, superclass_type_args};
  return &_FFTLayout_AlignEnum;
}

@end

@implementation FFTLayout_CalculatedHeight

- (id)initWithFloat:(float)width
         withDouble:(double)calculatedHeight {
  if (self = [super init]) {
    self->width_ = width;
    self->calculatedHeight_ = calculatedHeight;
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTLayout_CalculatedHeight *)other {
  [super copyAllFieldsTo:other];
  other->calculatedHeight_ = calculatedHeight_;
  other->width_ = width_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithFloat:withDouble:", "CalculatedHeight", NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "width_", NULL, 0x0, "F", NULL,  },
    { "calculatedHeight_", NULL, 0x0, "D", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_CalculatedHeight = { "CalculatedHeight", "com.sponberg.fluid.layout", "Layout", 0x8, 1, methods, 2, fields, 0, NULL};
  return &_FFTLayout_CalculatedHeight;
}

@end

@implementation FFTLayout_LastLayout

- (id)init {
  if (self = [super init]) {
    width_ = -1;
    height_ = -1;
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTLayout_LastLayout *)other {
  [super copyAllFieldsTo:other];
  other->height_ = height_;
  other->views_ = views_;
  other->width_ = width_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "width_", NULL, 0x0, "D", NULL,  },
    { "height_", NULL, 0x0, "D", NULL,  },
    { "views_", NULL, 0x0, "Ljava.util.Collection;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_LastLayout = { "LastLayout", "com.sponberg.fluid.layout", "Layout", 0x8, 1, methods, 3, fields, 0, NULL};
  return &_FFTLayout_LastLayout;
}

@end

@implementation FFTLayout_Orientation

- (id)initWithBoolean:(BOOL)landscape {
  if (self = [super init]) {
    layers_ = [[JavaUtilArrayList alloc] init];
    self->landscape_ = landscape;
    currentLayer_ = [[FFTLayout_Orientation_Layer alloc] initWithInt:0];
    [layers_ addWithId:currentLayer_];
  }
  return self;
}

- (int)getHorizontalChainOfWithFFTView:(FFTView *)view {
  if (landscape_) {
    return ((FFTView_OrientationProperties *) nil_chk(((FFTView *) nil_chk(view))->landscape_))->horizontalChain_;
  }
  else {
    return ((FFTView_OrientationProperties *) nil_chk(((FFTView *) nil_chk(view))->portrait_))->horizontalChain_;
  }
}

- (void)setDirectionOfWithFFTView:(FFTView *)view
      withFFTLayout_DirectionEnum:(FFTLayout_DirectionEnum *)direction {
  if (landscape_) {
    ((FFTView_OrientationProperties *) nil_chk(((FFTView *) nil_chk(view))->landscape_))->direction_ = direction;
  }
  else {
    ((FFTView_OrientationProperties *) nil_chk(((FFTView *) nil_chk(view))->portrait_))->direction_ = direction;
  }
}

- (FFTLayout_DirectionEnum *)getDirectionOfWithFFTView:(FFTView *)view {
  if (landscape_) {
    return ((FFTView_OrientationProperties *) nil_chk(((FFTView *) nil_chk(view))->landscape_))->direction_;
  }
  else {
    return ((FFTView_OrientationProperties *) nil_chk(((FFTView *) nil_chk(view))->portrait_))->direction_;
  }
}

- (void)setHorizontalChainWithFFTView:(FFTView *)view {
  if (landscape_) {
    ((FFTView_OrientationProperties *) nil_chk(((FFTView *) nil_chk(view))->landscape_))->horizontalChain_ = ((FFTLayout_Orientation_Layer *) nil_chk(currentLayer_))->horizontalChain_;
  }
  else {
    ((FFTView_OrientationProperties *) nil_chk(((FFTView *) nil_chk(view))->portrait_))->horizontalChain_ = ((FFTLayout_Orientation_Layer *) nil_chk(currentLayer_))->horizontalChain_;
  }
}

- (void)setViewsOrienation {
  for (FFTLayout_Orientation_Layer * __strong l in nil_chk(layers_)) {
    for (FFTView * __strong v in nil_chk(((FFTLayout_Orientation_Layer *) nil_chk(l))->views_)) {
      if (landscape_) {
        ((FFTView *) nil_chk(v))->currentLayout_ = v->landscape_;
      }
      else {
        ((FFTView *) nil_chk(v))->currentLayout_ = v->portrait_;
      }
    }
  }
}

- (void)copyAllFieldsTo:(FFTLayout_Orientation *)other {
  [super copyAllFieldsTo:other];
  other->currentLayer_ = currentLayer_;
  other->landscape_ = landscape_;
  other->layers_ = layers_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:", "Orientation", NULL, 0x1, NULL },
    { "getHorizontalChainOfWithFFTView:", "getHorizontalChainOf", "I", 0x1, NULL },
    { "setDirectionOfWithFFTView:withFFTLayout_DirectionEnum:", "setDirectionOf", "V", 0x1, NULL },
    { "getDirectionOfWithFFTView:", "getDirectionOf", "Lcom.sponberg.fluid.layout.Layout$Direction;", 0x1, NULL },
    { "setHorizontalChainWithFFTView:", "setHorizontalChain", "V", 0x1, NULL },
    { "setViewsOrienation", NULL, "V", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "landscape_", NULL, 0x10, "Z", NULL,  },
    { "layers_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
    { "currentLayer_", NULL, 0x0, "Lcom.sponberg.fluid.layout.Layout$Orientation$Layer;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_Orientation = { "Orientation", "com.sponberg.fluid.layout", "Layout", 0x8, 6, methods, 3, fields, 0, NULL};
  return &_FFTLayout_Orientation;
}

@end

@implementation FFTLayout_Orientation_Layer

- (id)initWithInt:(int)zIndex {
  if (self = [super init]) {
    horizontalChain_ = 0;
    hasAnchor_ = NO;
    horizontalChains_ = [[JavaUtilArrayList alloc] init];
    views_ = [[JavaUtilLinkedHashSet alloc] init];
    self->zIndex_ = zIndex;
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTLayout_Orientation_Layer *)other {
  [super copyAllFieldsTo:other];
  other->hasAnchor_ = hasAnchor_;
  other->horizontalChain_ = horizontalChain_;
  other->horizontalChains_ = horizontalChains_;
  other->views_ = views_;
  other->visibleCondition_ = visibleCondition_;
  other->zIndex_ = zIndex_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "Layer", NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "horizontalChain_", NULL, 0x0, "I", NULL,  },
    { "hasAnchor_", NULL, 0x0, "Z", NULL,  },
    { "horizontalChains_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
    { "views_", NULL, 0x0, "Ljava.util.Collection;", NULL,  },
    { "zIndex_", NULL, 0x0, "I", NULL,  },
    { "visibleCondition_", NULL, 0x0, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_Orientation_Layer = { "Layer", "com.sponberg.fluid.layout", "Layout$Orientation", 0x9, 1, methods, 6, fields, 0, NULL};
  return &_FFTLayout_Orientation_Layer;
}

@end

@implementation FFTLayout_$1

- (void)run {
  double x = [((JavaLangDouble *) nil_chk([((FFTView *) nil_chk(val$source_)) getX])) doubleValue];
  JavaLangDouble *size = [this$0_ subtractorViewsWidthWithJavaUtilArrayList:((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([((FFTView *) nil_chk(val$view_)) getGivenConstraints])) getX]))->subtractors_ withBoolean:YES];
  if (size == nil) {
    if (!registered_) {
      [this$0_ registerDynamicCoordRelativeHeightWithFFTView:val$view_ withFFTLayoutAction:self];
      registered_ = YES;
    }
    return;
  }
  x -= [((JavaLangDouble *) nil_chk(size)) doubleValue];
  [val$view_ setXWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:x]];
}

- (id)initWithFFTLayout:(FFTLayout *)outer$
            withFFTView:(FFTView *)capture$0
            withFFTView:(FFTView *)capture$1 {
  this$0_ = outer$;
  val$source_ = capture$0;
  val$view_ = capture$1;
  if (self = [super init]) {
    registered_ = NO;
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTLayout_$1 *)other {
  [super copyAllFieldsTo:other];
  other->registered_ = registered_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTLayout:withFFTView:withFFTView:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.Layout;", NULL,  },
    { "registered_", NULL, 0x0, "Z", NULL,  },
    { "val$source_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "val$view_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$1 = { "$1", "com.sponberg.fluid.layout", "Layout", 0x8000, 2, methods, 4, fields, 0, NULL};
  return &_FFTLayout_$1;
}

@end

@implementation FFTLayout_$2

- (void)run {
  double x = [((JavaLangDouble *) nil_chk([((FFTView *) nil_chk(val$source_)) getX2])) doubleValue];
  JavaLangDouble *size = [this$0_ subtractorViewsWidthWithJavaUtilArrayList:((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([((FFTView *) nil_chk(val$view_)) getGivenConstraints])) getX]))->subtractors_ withBoolean:YES];
  if (size == nil) {
    if (!registered_) {
      [this$0_ registerDynamicCoordRelativeHeightWithFFTView:val$view_ withFFTLayoutAction:self];
      registered_ = YES;
    }
    return;
  }
  x -= [((JavaLangDouble *) nil_chk(size)) doubleValue];
  [val$view_ setXWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:x]];
}

- (id)initWithFFTLayout:(FFTLayout *)outer$
            withFFTView:(FFTView *)capture$0
            withFFTView:(FFTView *)capture$1 {
  this$0_ = outer$;
  val$source_ = capture$0;
  val$view_ = capture$1;
  if (self = [super init]) {
    registered_ = NO;
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTLayout_$2 *)other {
  [super copyAllFieldsTo:other];
  other->registered_ = registered_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTLayout:withFFTView:withFFTView:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.Layout;", NULL,  },
    { "registered_", NULL, 0x0, "Z", NULL,  },
    { "val$source_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "val$view_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$2 = { "$2", "com.sponberg.fluid.layout", "Layout", 0x8000, 2, methods, 4, fields, 0, NULL};
  return &_FFTLayout_$2;
}

@end

@implementation FFTLayout_$3

- (void)run {
  double x = [((JavaLangDouble *) nil_chk([((FFTView *) nil_chk(val$source_)) getX])) doubleValue];
  JavaLangDouble *size = [this$0_ subtractorViewsWidthWithJavaUtilArrayList:((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([((FFTView *) nil_chk(val$view_)) getGivenConstraints])) getX2]))->subtractors_ withBoolean:YES];
  if (size == nil) {
    if (!registered_) {
      [this$0_ registerDynamicCoordRelativeHeightWithFFTView:val$view_ withFFTLayoutAction:self];
      registered_ = YES;
    }
    return;
  }
  x -= [((JavaLangDouble *) nil_chk(size)) doubleValue];
  [val$view_ setX2WithJavaLangDouble:[JavaLangDouble valueOfWithDouble:x]];
}

- (id)initWithFFTLayout:(FFTLayout *)outer$
            withFFTView:(FFTView *)capture$0
            withFFTView:(FFTView *)capture$1 {
  this$0_ = outer$;
  val$source_ = capture$0;
  val$view_ = capture$1;
  if (self = [super init]) {
    registered_ = NO;
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTLayout_$3 *)other {
  [super copyAllFieldsTo:other];
  other->registered_ = registered_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTLayout:withFFTView:withFFTView:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.Layout;", NULL,  },
    { "registered_", NULL, 0x0, "Z", NULL,  },
    { "val$source_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "val$view_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$3 = { "$3", "com.sponberg.fluid.layout", "Layout", 0x8000, 2, methods, 4, fields, 0, NULL};
  return &_FFTLayout_$3;
}

@end

@implementation FFTLayout_$4

- (void)run {
  double x = [((JavaLangDouble *) nil_chk([((FFTView *) nil_chk(val$source_)) getX2])) doubleValue];
  JavaLangDouble *size = [this$0_ subtractorViewsWidthWithJavaUtilArrayList:((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([((FFTView *) nil_chk(val$view_)) getGivenConstraints])) getX2]))->subtractors_ withBoolean:YES];
  if (size == nil) {
    if (!registered_) {
      [this$0_ registerDynamicCoordRelativeHeightWithFFTView:val$view_ withFFTLayoutAction:self];
      registered_ = YES;
    }
    return;
  }
  x -= [((JavaLangDouble *) nil_chk(size)) doubleValue];
  [val$view_ setX2WithJavaLangDouble:[JavaLangDouble valueOfWithDouble:x]];
}

- (id)initWithFFTLayout:(FFTLayout *)outer$
            withFFTView:(FFTView *)capture$0
            withFFTView:(FFTView *)capture$1 {
  this$0_ = outer$;
  val$source_ = capture$0;
  val$view_ = capture$1;
  if (self = [super init]) {
    registered_ = NO;
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTLayout_$4 *)other {
  [super copyAllFieldsTo:other];
  other->registered_ = registered_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTLayout:withFFTView:withFFTView:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.Layout;", NULL,  },
    { "registered_", NULL, 0x0, "Z", NULL,  },
    { "val$source_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "val$view_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$4 = { "$4", "com.sponberg.fluid.layout", "Layout", 0x8000, 2, methods, 4, fields, 0, NULL};
  return &_FFTLayout_$4;
}

@end

@implementation FFTLayout_$5

- (void)run {
  double y = [((JavaLangDouble *) nil_chk([((FFTView *) nil_chk(val$source_)) getY])) doubleValue];
  JavaLangDouble *size = [this$0_ subtractorViewsHeightWithJavaUtilArrayList:((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([((FFTView *) nil_chk(val$view_)) getGivenConstraints])) getY]))->subtractors_ withBoolean:YES];
  if (size == nil) {
    if (!registered_) {
      [this$0_ registerDynamicCoordRelativeHeight2WithFFTView:val$view_ withFFTLayoutAction:self];
      registered_ = YES;
    }
    return;
  }
  y -= [((JavaLangDouble *) nil_chk(size)) doubleValue];
  [val$view_ setYWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:y]];
}

- (id)initWithFFTLayout:(FFTLayout *)outer$
            withFFTView:(FFTView *)capture$0
            withFFTView:(FFTView *)capture$1 {
  this$0_ = outer$;
  val$source_ = capture$0;
  val$view_ = capture$1;
  if (self = [super init]) {
    registered_ = NO;
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTLayout_$5 *)other {
  [super copyAllFieldsTo:other];
  other->registered_ = registered_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTLayout:withFFTView:withFFTView:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.Layout;", NULL,  },
    { "registered_", NULL, 0x0, "Z", NULL,  },
    { "val$source_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "val$view_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$5 = { "$5", "com.sponberg.fluid.layout", "Layout", 0x8000, 2, methods, 4, fields, 0, NULL};
  return &_FFTLayout_$5;
}

@end

@implementation FFTLayout_$6

- (void)run {
  double y = [((JavaLangDouble *) nil_chk([((FFTView *) nil_chk(val$source_)) getY2])) doubleValue];
  JavaLangDouble *size = [this$0_ subtractorViewsHeightWithJavaUtilArrayList:((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([((FFTView *) nil_chk(val$view_)) getGivenConstraints])) getY]))->subtractors_ withBoolean:YES];
  if (size == nil) {
    if (!registered_) {
      [this$0_ registerDynamicCoordRelativeHeight2WithFFTView:val$view_ withFFTLayoutAction:self];
      registered_ = YES;
    }
    return;
  }
  y -= [((JavaLangDouble *) nil_chk(size)) doubleValue];
  [val$view_ setYWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:y]];
}

- (id)initWithFFTLayout:(FFTLayout *)outer$
            withFFTView:(FFTView *)capture$0
            withFFTView:(FFTView *)capture$1 {
  this$0_ = outer$;
  val$source_ = capture$0;
  val$view_ = capture$1;
  if (self = [super init]) {
    registered_ = NO;
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTLayout_$6 *)other {
  [super copyAllFieldsTo:other];
  other->registered_ = registered_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTLayout:withFFTView:withFFTView:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.Layout;", NULL,  },
    { "registered_", NULL, 0x0, "Z", NULL,  },
    { "val$source_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "val$view_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$6 = { "$6", "com.sponberg.fluid.layout", "Layout", 0x8000, 2, methods, 4, fields, 0, NULL};
  return &_FFTLayout_$6;
}

@end

@implementation FFTLayout_$7

- (void)run {
  double y = [((JavaLangDouble *) nil_chk([((FFTView *) nil_chk(val$source_)) getY])) doubleValue];
  JavaLangDouble *size = [this$0_ subtractorViewsHeightWithJavaUtilArrayList:((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([((FFTView *) nil_chk(val$view_)) getGivenConstraints])) getY2]))->subtractors_ withBoolean:YES];
  if (size == nil) {
    if (!registered_) {
      [this$0_ registerDynamicCoordRelativeHeight2WithFFTView:val$view_ withFFTLayoutAction:self];
      registered_ = YES;
    }
    return;
  }
  y -= [((JavaLangDouble *) nil_chk(size)) doubleValue];
  [val$view_ setY2WithJavaLangDouble:[JavaLangDouble valueOfWithDouble:y]];
}

- (id)initWithFFTLayout:(FFTLayout *)outer$
            withFFTView:(FFTView *)capture$0
            withFFTView:(FFTView *)capture$1 {
  this$0_ = outer$;
  val$source_ = capture$0;
  val$view_ = capture$1;
  if (self = [super init]) {
    registered_ = NO;
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTLayout_$7 *)other {
  [super copyAllFieldsTo:other];
  other->registered_ = registered_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTLayout:withFFTView:withFFTView:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.Layout;", NULL,  },
    { "registered_", NULL, 0x0, "Z", NULL,  },
    { "val$source_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "val$view_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$7 = { "$7", "com.sponberg.fluid.layout", "Layout", 0x8000, 2, methods, 4, fields, 0, NULL};
  return &_FFTLayout_$7;
}

@end

@implementation FFTLayout_$8

- (void)run {
  double y = [((JavaLangDouble *) nil_chk([((FFTView *) nil_chk(val$source_)) getY2])) doubleValue];
  JavaLangDouble *size = [this$0_ subtractorViewsHeightWithJavaUtilArrayList:((FFTCoord *) nil_chk([((FFTConstraints *) nil_chk([((FFTView *) nil_chk(val$view_)) getGivenConstraints])) getY2]))->subtractors_ withBoolean:YES];
  if (size == nil) {
    if (!registered_) {
      [this$0_ registerDynamicCoordRelativeHeight2WithFFTView:val$view_ withFFTLayoutAction:self];
      registered_ = YES;
    }
    return;
  }
  y -= [((JavaLangDouble *) nil_chk(size)) doubleValue];
  [val$view_ setY2WithJavaLangDouble:[JavaLangDouble valueOfWithDouble:y]];
}

- (id)initWithFFTLayout:(FFTLayout *)outer$
            withFFTView:(FFTView *)capture$0
            withFFTView:(FFTView *)capture$1 {
  this$0_ = outer$;
  val$source_ = capture$0;
  val$view_ = capture$1;
  if (self = [super init]) {
    registered_ = NO;
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTLayout_$8 *)other {
  [super copyAllFieldsTo:other];
  other->registered_ = registered_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTLayout:withFFTView:withFFTView:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.Layout;", NULL,  },
    { "registered_", NULL, 0x0, "Z", NULL,  },
    { "val$source_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "val$view_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$8 = { "$8", "com.sponberg.fluid.layout", "Layout", 0x8000, 2, methods, 4, fields, 0, NULL};
  return &_FFTLayout_$8;
}

@end

@implementation FFTLayout_$9

- (void)run {
  [((FFTView *) nil_chk(val$view_)) setXWithJavaLangDouble:[((FFTView *) nil_chk(val$source_)) getX2]];
}

- (id)initWithFFTView:(FFTView *)capture$0
          withFFTView:(FFTView *)capture$1 {
  val$view_ = capture$0;
  val$source_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTView:withFFTView:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$view_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "val$source_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$9 = { "$9", "com.sponberg.fluid.layout", "Layout", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_FFTLayout_$9;
}

@end

@implementation FFTLayout_$10

- (void)run {
  [((FFTView *) nil_chk(val$view_)) setYWithJavaLangDouble:[((FFTView *) nil_chk(val$source_)) getY]];
}

- (id)initWithFFTView:(FFTView *)capture$0
          withFFTView:(FFTView *)capture$1 {
  val$view_ = capture$0;
  val$source_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTView:withFFTView:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$view_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "val$source_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$10 = { "$10", "com.sponberg.fluid.layout", "Layout", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_FFTLayout_$10;
}

@end

@implementation FFTLayout_$11

- (void)run {
  [((FFTView *) nil_chk(val$view_)) setX2WithJavaLangDouble:[((FFTView *) nil_chk(val$source_)) getX]];
}

- (id)initWithFFTView:(FFTView *)capture$0
          withFFTView:(FFTView *)capture$1 {
  val$view_ = capture$0;
  val$source_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTView:withFFTView:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$view_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "val$source_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$11 = { "$11", "com.sponberg.fluid.layout", "Layout", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_FFTLayout_$11;
}

@end

@implementation FFTLayout_$12

- (void)run {
  [((FFTView *) nil_chk(val$view_)) setYWithJavaLangDouble:[((FFTView *) nil_chk(val$source_)) getY]];
}

- (id)initWithFFTView:(FFTView *)capture$0
          withFFTView:(FFTView *)capture$1 {
  val$view_ = capture$0;
  val$source_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTView:withFFTView:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$view_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "val$source_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$12 = { "$12", "com.sponberg.fluid.layout", "Layout", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_FFTLayout_$12;
}

@end

@implementation FFTLayout_$13

- (void)run {
  [((FFTView *) nil_chk(val$view_)) setYWithJavaLangDouble:[((FFTView *) nil_chk(val$source_)) getY2]];
}

- (id)initWithFFTView:(FFTView *)capture$0
          withFFTView:(FFTView *)capture$1 {
  val$view_ = capture$0;
  val$source_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTView:withFFTView:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$view_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "val$source_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$13 = { "$13", "com.sponberg.fluid.layout", "Layout", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_FFTLayout_$13;
}

@end

@implementation FFTLayout_$14

- (void)run {
  [((FFTView *) nil_chk(val$view_)) setXWithJavaLangDouble:[((FFTView *) nil_chk(val$source_)) getX]];
}

- (id)initWithFFTView:(FFTView *)capture$0
          withFFTView:(FFTView *)capture$1 {
  val$view_ = capture$0;
  val$source_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTView:withFFTView:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$view_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "val$source_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$14 = { "$14", "com.sponberg.fluid.layout", "Layout", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_FFTLayout_$14;
}

@end

@implementation FFTLayout_$15

- (void)run {
  if ([((FFTView *) nil_chk(val$view_)) getWidth] != nil && [((FFTView *) nil_chk(val$source_)) getWidth] != nil) {
    double middle = [((JavaLangDouble *) nil_chk(val$source_->x_)) doubleValue] + [((JavaLangDouble *) nil_chk([val$source_ getWidth])) doubleValue] / 2;
    double viewX = middle - [((JavaLangDouble *) nil_chk([val$view_ getWidth])) doubleValue] / 2;
    [val$view_ setXWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:viewX]];
  }
  else if ([((FFTView *) nil_chk(val$source_)) getWidth] != nil) {
    double middle = [((JavaLangDouble *) nil_chk(val$source_->x_)) doubleValue] + [((JavaLangDouble *) nil_chk([val$source_ getWidth])) doubleValue] / 2;
    [val$view_ setMiddleXWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:middle]];
  }
}

- (id)initWithFFTView:(FFTView *)capture$0
          withFFTView:(FFTView *)capture$1 {
  val$view_ = capture$0;
  val$source_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTView:withFFTView:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$view_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "val$source_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$15 = { "$15", "com.sponberg.fluid.layout", "Layout", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_FFTLayout_$15;
}

@end

@implementation FFTLayout_$16

- (void)run {
  if ([((FFTView *) nil_chk(val$view_)) getWidth] != nil && [((FFTView *) nil_chk(val$source_)) getWidth] != nil) {
    double middle = [((JavaLangDouble *) nil_chk(val$source_->x2_)) doubleValue] - [((JavaLangDouble *) nil_chk([val$source_ getWidth])) doubleValue] / 2;
    double viewX = middle - [((JavaLangDouble *) nil_chk([val$view_ getWidth])) doubleValue] / 2;
    [val$view_ setXWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:viewX]];
  }
  else if ([((FFTView *) nil_chk(val$source_)) getWidth] != nil) {
    double middle = [((JavaLangDouble *) nil_chk(val$source_->x_)) doubleValue] + [((JavaLangDouble *) nil_chk([val$source_ getWidth])) doubleValue] / 2;
    [val$view_ setMiddleXWithJavaLangDouble:[JavaLangDouble valueOfWithDouble:middle]];
  }
}

- (id)initWithFFTView:(FFTView *)capture$0
          withFFTView:(FFTView *)capture$1 {
  val$view_ = capture$0;
  val$source_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTView:withFFTView:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$view_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "val$source_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$16 = { "$16", "com.sponberg.fluid.layout", "Layout", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_FFTLayout_$16;
}

@end

@implementation FFTLayout_$17

- (void)run {
  [((FFTView *) nil_chk(val$view_)) setX2WithJavaLangDouble:[((FFTView *) nil_chk(val$source_)) getX2]];
}

- (id)initWithFFTView:(FFTView *)capture$0
          withFFTView:(FFTView *)capture$1 {
  val$view_ = capture$0;
  val$source_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTView:withFFTView:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$view_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
    { "val$source_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.View;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$17 = { "$17", "com.sponberg.fluid.layout", "Layout", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_FFTLayout_$17;
}

@end

@implementation FFTLayout_$18

- (void)dataChangedWithNSString:(NSString *)key
              withNSStringArray:(IOSObjectArray *)subKeys {
  (void) [((FFTLRUCache *) nil_chk(this$0_->viewCache_)) removeWithId:val$cacheId_];
}

- (void)dataRemovedWithNSString:(NSString *)key {
  (void) [((FFTLRUCache *) nil_chk(this$0_->viewCache_)) removeWithId:val$cacheId_];
}

- (id)initWithFFTLayout:(FFTLayout *)outer$
           withNSString:(NSString *)capture$0 {
  this$0_ = outer$;
  val$cacheId_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "dataChangedWithNSString:withNSStringArray:", "dataChanged", "V", 0x81, NULL },
    { "dataRemovedWithNSString:", "dataRemoved", "V", 0x1, NULL },
    { "initWithFFTLayout:withNSString:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.Layout;", NULL,  },
    { "val$cacheId_", NULL, 0x1012, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$18 = { "$18", "com.sponberg.fluid.layout", "Layout", 0x8000, 3, methods, 2, fields, 0, NULL};
  return &_FFTLayout_$18;
}

@end

@implementation FFTLayout_$19

- (int)compareWithId:(FFTLayout_Orientation_Layer *)o1
              withId:(FFTLayout_Orientation_Layer *)o2 {
  return ((FFTLayout_Orientation_Layer *) nil_chk(o1))->zIndex_ - ((FFTLayout_Orientation_Layer *) nil_chk(o2))->zIndex_;
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "compareWithFFTLayout_Orientation_Layer:withFFTLayout_Orientation_Layer:", "compare", "I", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static J2ObjcClassInfo _FFTLayout_$19 = { "$19", "com.sponberg.fluid.layout", "Layout", 0x8000, 2, methods, 0, NULL, 0, NULL};
  return &_FFTLayout_$19;
}

@end

@implementation FFTLayout_$20

- (void)dataChangedWithNSString:(NSString *)key
              withNSStringArray:(IOSObjectArray *)subKeys {
  (void) [((FFTLRUCache *) nil_chk(this$0_->cache_)) removeWithId:val$dataModelPrefixFinal_];
  [((FFTDataModelManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getDataModelManager])) removeDataChangeListenerWithNSString:[NSString stringWithFormat:@"%@%@-calculateHeight", [this$0_ getId], val$dataModelPrefixFinal_]];
}

- (void)dataRemovedWithNSString:(NSString *)key {
  (void) [((FFTLRUCache *) nil_chk(this$0_->cache_)) removeWithId:val$dataModelPrefixFinal_];
  [((FFTDataModelManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getDataModelManager])) removeDataChangeListenerWithNSString:[NSString stringWithFormat:@"%@%@-calculateHeight", [this$0_ getId], val$dataModelPrefixFinal_]];
}

- (id)initWithFFTLayout:(FFTLayout *)outer$
           withNSString:(NSString *)capture$0 {
  this$0_ = outer$;
  val$dataModelPrefixFinal_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "dataChangedWithNSString:withNSStringArray:", "dataChanged", "V", 0x81, NULL },
    { "dataRemovedWithNSString:", "dataRemoved", "V", 0x1, NULL },
    { "initWithFFTLayout:withNSString:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.Layout;", NULL,  },
    { "val$dataModelPrefixFinal_", NULL, 0x1012, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _FFTLayout_$20 = { "$20", "com.sponberg.fluid.layout", "Layout", 0x8000, 3, methods, 2, fields, 0, NULL};
  return &_FFTLayout_$20;
}

@end
