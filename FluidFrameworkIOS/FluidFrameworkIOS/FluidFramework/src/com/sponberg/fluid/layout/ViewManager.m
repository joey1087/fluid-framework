//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/layout/ViewManager.java
//

#include "IOSObjectArray.h"
#include "com/sponberg/fluid/FluidApp.h"
#include "com/sponberg/fluid/layout/Color.h"
#include "com/sponberg/fluid/layout/Layout.h"
#include "com/sponberg/fluid/layout/Screen.h"
#include "com/sponberg/fluid/layout/Tab.h"
#include "com/sponberg/fluid/layout/TableLayout.h"
#include "com/sponberg/fluid/layout/ViewManager.h"
#include "com/sponberg/fluid/util/KeyValueList.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"

@implementation FFTViewManager

- (double)getBaseUnit {
  return baseUnit_;
}

- (void)setBaseUnitWithDouble:(double)baseUnit {
  self->baseUnit_ = baseUnit;
}

- (void)addScreenWithFFTLayout:(FFTLayout *)layout {
  (void) [((JavaUtilHashMap *) nil_chk(screens_)) putWithId:[((FFTLayout *) nil_chk(layout)) getId] withId:[[FFTScreen alloc] initWithFFTLayout:layout]];
}

- (void)addLayoutWithFFTLayout:(FFTLayout *)layout {
  (void) [((JavaUtilHashMap *) nil_chk(layouts_)) putWithId:[((FFTLayout *) nil_chk(layout)) getId] withId:layout];
}

- (void)addTableLayoutWithFFTTableLayout:(FFTTableLayout *)layout {
  (void) [((JavaUtilHashMap *) nil_chk(tableLayouts_)) putWithId:[((FFTTableLayout *) nil_chk(layout)) getId] withId:layout];
}

- (void)addTabWithFFTTab:(FFTTab *)tab {
  [((JavaUtilArrayList *) nil_chk(tabs_)) addWithId:tab];
}

- (JavaUtilArrayList *)getTabs {
  return tabs_;
}

- (void)initialize__WithFFTFluidApp:(FFTFluidApp *)app {
  if (baseUnit_ == 0) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Must set baseUnit"];
  }
}

- (FFTScreen *)getScreenWithNSString:(NSString *)screenId {
  return [((JavaUtilHashMap *) nil_chk(screens_)) getWithId:screenId];
}

- (FFTLayout *)getLayoutWithNSString:(NSString *)layoutId {
  return [((JavaUtilHashMap *) nil_chk(layouts_)) getWithId:layoutId];
}

- (FFTTableLayout *)getTableLayoutWithNSString:(NSString *)tableLayoutId {
  return [((JavaUtilHashMap *) nil_chk(tableLayouts_)) getWithId:tableLayoutId];
}

- (void)setColorsByNameWithFFTKeyValueList:(id<FFTKeyValueList>)colorsByName {
  self->colorsByName_ = colorsByName;
}

- (void)setSizesByNameWithFFTKeyValueList:(id<FFTKeyValueList>)sizesByName {
  self->sizesByName_ = sizesByName;
}

- (void)setFontsByNameWithFFTKeyValueList:(id<FFTKeyValueList>)fontsByName {
  self->fontsByName_ = fontsByName;
}

- (void)setFontStylesWithFFTKeyValueList:(id<FFTKeyValueList>)fontStyles {
  self->fontStyles_ = fontStyles;
}

- (FFTColor *)getColorWithNSString:(NSString *)name {
  if ([((id<FFTKeyValueList>) nil_chk(colorsByName_)) containsWithNSString:name]) {
    return [FFTColor colorFromStringWithNSString:[colorsByName_ getValueWithNSString:name]];
  }
  else {
    return [FFTColor colorFromStringWithNSString:name];
  }
}

- (int)getIntWithNSString:(NSString *)intString {
  return [JavaLangInteger parseIntWithNSString:intString];
}

- (NSString *)getFontFamilyNameWithNSString:(NSString *)refId {
  if (fontsByName_ != nil && [fontsByName_ containsWithNSString:refId]) {
    return [fontsByName_ getValueWithNSString:refId];
  }
  else {
    return nil;
  }
}

- (NSString *)getFontStyleWithNSString:(NSString *)refId {
  if (fontStyles_ != nil && [fontStyles_ containsWithNSString:refId]) {
    return [fontStyles_ getValueWithNSString:refId];
  }
  else {
    return nil;
  }
}

- (NSString *)getSpecifiedDefaultFontFamilyName {
  if (fontsByName_ != nil && [fontsByName_ containsWithNSString:@"default-font"]) {
    return [fontsByName_ getValueWithNSString:@"default-font"];
  }
  else {
    return nil;
  }
}

- (NSString *)getSpecifiedDefaultFontStyle {
  if (fontStyles_ != nil && [fontStyles_ containsWithNSString:@"default-style"]) {
    return [fontStyles_ getValueWithNSString:@"default-style"];
  }
  else {
    return nil;
  }
}

- (NSString *)getSizeWithNSString:(NSString *)name {
  if ([((id<FFTKeyValueList>) nil_chk(sizesByName_)) containsWithNSString:name]) {
    return [sizesByName_ getValueWithNSString:name];
  }
  else {
    return name;
  }
}

- (double)sizeToPixelsWithNSString:(NSString *)size {
  if ([((NSString *) nil_chk(size)) hasSuffix:@"pa"]) {
    return [self pixelsActualToPixelsWithDouble:[JavaLangDouble parseDoubleWithNSString:[size substring:0 endIndex:((int) [size length]) - 2]]];
  }
  else if ([size hasSuffix:@"p"]) {
    return [self pixelsToPixelsWithDouble:[JavaLangDouble parseDoubleWithNSString:[size substring:0 endIndex:((int) [size length]) - 1]]];
  }
  else {
    return [self unitsToPixelsWithDouble:[JavaLangDouble parseDoubleWithNSString:size]];
  }
}

- (double)unitsToPixelsWithDouble:(double)units {
  return units * baseUnit_;
}

- (double)pixelsToPixelsWithDouble:(double)pixels {
  return pixels * devicePixelToPixelMultiplier_;
}

- (double)pixelsActualToPixelsWithDouble:(double)pixels {
  return pixels * devicePixelActualToPixelMultiplier_;
}

- (double)pixelsToUnitsWithDouble:(double)pixels {
  return pixels / baseUnit_;
}

- (double)fontPointsToPixelsWithDouble:(double)points {
  double units = points / 72 * 25.4 * devicePixelActualToPixelMultiplier_;
  return [self unitsToPixelsWithDouble:units];
}

- (double)unitsToFontPointsWithDouble:(double)units {
  return units * 72 / 25.4 / devicePixelActualToPixelMultiplier_;
}

- (IOSObjectArray *)getSupportedPlatforms {
  return nil;
}

- (double)getDevicePixelMultiplier {
  return devicePixelToPixelMultiplier_;
}

- (double)getDevicePixelActualMultiplier {
  return devicePixelActualToPixelMultiplier_;
}

- (void)setDevicePixelMultiplierWithDouble:(double)devicePixelMultiplier {
  self->devicePixelToPixelMultiplier_ = devicePixelMultiplier;
}

- (void)setDevicePixelActualMultiplierWithDouble:(double)devicePixelActualMultiplier {
  self->devicePixelActualToPixelMultiplier_ = devicePixelActualMultiplier;
}

- (id)init {
  if (self = [super init]) {
    screens_ = [[JavaUtilHashMap alloc] init];
    layouts_ = [[JavaUtilHashMap alloc] init];
    tableLayouts_ = [[JavaUtilHashMap alloc] init];
    tabs_ = [[JavaUtilArrayList alloc] init];
    baseUnit_ = 0;
    devicePixelToPixelMultiplier_ = 1;
    devicePixelActualToPixelMultiplier_ = 1;
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTViewManager *)other {
  [super copyAllFieldsTo:other];
  other->baseUnit_ = baseUnit_;
  other->colorsByName_ = colorsByName_;
  other->devicePixelActualToPixelMultiplier_ = devicePixelActualToPixelMultiplier_;
  other->devicePixelToPixelMultiplier_ = devicePixelToPixelMultiplier_;
  other->fontStyles_ = fontStyles_;
  other->fontsByName_ = fontsByName_;
  other->layouts_ = layouts_;
  other->screens_ = screens_;
  other->sizesByName_ = sizesByName_;
  other->tableLayouts_ = tableLayouts_;
  other->tabs_ = tabs_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getBaseUnit", NULL, "D", 0x1, NULL },
    { "setBaseUnitWithDouble:", "setBaseUnit", "V", 0x1, NULL },
    { "addScreenWithFFTLayout:", "addScreen", "V", 0x1, NULL },
    { "addLayoutWithFFTLayout:", "addLayout", "V", 0x1, NULL },
    { "addTableLayoutWithFFTTableLayout:", "addTableLayout", "V", 0x1, NULL },
    { "addTabWithFFTTab:", "addTab", "V", 0x1, NULL },
    { "getTabs", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "initialize__WithFFTFluidApp:", "initialize", "V", 0x1, NULL },
    { "getScreenWithNSString:", "getScreen", "Lcom.sponberg.fluid.layout.Screen;", 0x1, NULL },
    { "getLayoutWithNSString:", "getLayout", "Lcom.sponberg.fluid.layout.Layout;", 0x1, NULL },
    { "getTableLayoutWithNSString:", "getTableLayout", "Lcom.sponberg.fluid.layout.TableLayout;", 0x1, NULL },
    { "setColorsByNameWithFFTKeyValueList:", "setColorsByName", "V", 0x1, NULL },
    { "setSizesByNameWithFFTKeyValueList:", "setSizesByName", "V", 0x1, NULL },
    { "setFontsByNameWithFFTKeyValueList:", "setFontsByName", "V", 0x1, NULL },
    { "setFontStylesWithFFTKeyValueList:", "setFontStyles", "V", 0x1, NULL },
    { "getColorWithNSString:", "getColor", "Lcom.sponberg.fluid.layout.Color;", 0x1, NULL },
    { "getIntWithNSString:", "getInt", "I", 0x1, NULL },
    { "getFontFamilyNameWithNSString:", "getFontFamilyName", "Ljava.lang.String;", 0x1, NULL },
    { "getFontStyleWithNSString:", "getFontStyle", "Ljava.lang.String;", 0x1, NULL },
    { "getSpecifiedDefaultFontFamilyName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getSpecifiedDefaultFontStyle", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getSizeWithNSString:", "getSize", "Ljava.lang.String;", 0x1, NULL },
    { "sizeToPixelsWithNSString:", "sizeToPixels", "D", 0x1, NULL },
    { "unitsToPixelsWithDouble:", "unitsToPixels", "D", 0x1, NULL },
    { "pixelsToPixelsWithDouble:", "pixelsToPixels", "D", 0x1, NULL },
    { "pixelsActualToPixelsWithDouble:", "pixelsActualToPixels", "D", 0x1, NULL },
    { "pixelsToUnitsWithDouble:", "pixelsToUnits", "D", 0x1, NULL },
    { "fontPointsToPixelsWithDouble:", "fontPointsToPixels", "D", 0x1, NULL },
    { "unitsToFontPointsWithDouble:", "unitsToFontPoints", "D", 0x1, NULL },
    { "getSupportedPlatforms", NULL, "[Ljava.lang.String;", 0x1, NULL },
    { "getDevicePixelMultiplier", NULL, "D", 0x1, NULL },
    { "getDevicePixelActualMultiplier", NULL, "D", 0x1, NULL },
    { "setDevicePixelMultiplierWithDouble:", "setDevicePixelMultiplier", "V", 0x1, NULL },
    { "setDevicePixelActualMultiplierWithDouble:", "setDevicePixelActualMultiplier", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "screens_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "layouts_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "tableLayouts_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "colorsByName_", NULL, 0x0, "Lcom.sponberg.fluid.util.KeyValueList;", NULL,  },
    { "sizesByName_", NULL, 0x0, "Lcom.sponberg.fluid.util.KeyValueList;", NULL,  },
    { "fontsByName_", NULL, 0x0, "Lcom.sponberg.fluid.util.KeyValueList;", NULL,  },
    { "fontStyles_", NULL, 0x0, "Lcom.sponberg.fluid.util.KeyValueList;", NULL,  },
    { "tabs_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
    { "baseUnit_", NULL, 0x2, "D", NULL,  },
    { "devicePixelToPixelMultiplier_", NULL, 0x2, "D", NULL,  },
    { "devicePixelActualToPixelMultiplier_", NULL, 0x2, "D", NULL,  },
  };
  static J2ObjcClassInfo _FFTViewManager = { "ViewManager", "com.sponberg.fluid.layout", NULL, 0x1, 35, methods, 11, fields, 0, NULL};
  return &_FFTViewManager;
}

@end
