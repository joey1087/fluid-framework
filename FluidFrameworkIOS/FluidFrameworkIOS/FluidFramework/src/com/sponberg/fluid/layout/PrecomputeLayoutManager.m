//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/layout/PrecomputeLayoutManager.java
//

#include "IOSObjectArray.h"
#include "com/sponberg/fluid/FluidApp.h"
#include "com/sponberg/fluid/GlobalState.h"
#include "com/sponberg/fluid/layout/DataModelManager.h"
#include "com/sponberg/fluid/layout/Layout.h"
#include "com/sponberg/fluid/layout/PrecomputeLayoutManager.h"
#include "com/sponberg/fluid/layout/Screen.h"
#include "com/sponberg/fluid/layout/TableList.h"
#include "com/sponberg/fluid/layout/TableRowWithIdAndHeight.h"
#include "com/sponberg/fluid/layout/UIService.h"
#include "com/sponberg/fluid/layout/ViewBehavior.h"
#include "com/sponberg/fluid/layout/ViewBehaviorTable.h"
#include "com/sponberg/fluid/layout/ViewPosition.h"
#include "com/sponberg/fluid/util/LRUCache.h"
#include "com/sponberg/fluid/util/LRUCacheTree.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"

@implementation FFTPrecomputeLayoutManager

NSString * FFTPrecomputeLayoutManager_dataModelId_ = @"_fluid-precompute-manager";
NSString * FFTPrecomputeLayoutManager_dataModelIdForPrecomputeList_ = @"_fluid-precompute-manager.precomputeList";

- (void)setViewPositionWithNSString:(NSString *)viewPath
                withFFTViewPosition:(FFTViewPosition *)viewPosition {
  (void) [((FFTLRUCache *) nil_chk(self->viewPositions_)) putWithId:viewPath withId:viewPosition];
}

- (FFTViewPosition *)getViewPositionWithNSString:(NSString *)viewPath {
  if (viewPath == nil || ![((FFTLRUCache *) nil_chk(self->viewPositions_)) containsKeyWithId:viewPath]) {
    return nil;
  }
  return [((FFTLRUCache *) nil_chk(self->viewPositions_)) getWithId:viewPath];
}

- (FFTTableList *)getPrecomputeList {
  return precomputeList_;
}

- (void)setPrecomputeListWithFFTTableList:(FFTTableList *)precomputeList {
  self->precomputeList_ = precomputeList;
}

- (void)computeAsyncWithFFTTableList:(FFTTableList *)list
                        withNSString:(NSString *)screenId
                        withNSString:(NSString *)compId
                         withBoolean:(BOOL)landscape
withFFTPrecomputeLayoutManager_PrecomputeLayoutCallback:(id<FFTPrecomputeLayoutManager_PrecomputeLayoutCallback>)callback {
  id<JavaLangRunnable> r = [[FFTPrecomputeLayoutManager_$1 alloc] initWithFFTPrecomputeLayoutManager:self withFFTTableList:list withNSString:screenId withNSString:compId withBoolean:landscape withFFTPrecomputeLayoutManager_PrecomputeLayoutCallback:callback];
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(computeService_)) executeWithJavaLangRunnable:r];
}

- (void)setTableRowsToPrecomputedHeightsWithFFTTableList:(FFTTableList *)list
                                            withNSString:(NSString *)screenId
                                            withNSString:(NSString *)compId
                                             withBoolean:(BOOL)landscape
withFFTPrecomputeLayoutManager_SetPrecomputedHeightsCallback:(id<FFTPrecomputeLayoutManager_SetPrecomputedHeightsCallback>)callback {
  id<JavaLangRunnable> r = [[FFTPrecomputeLayoutManager_$2 alloc] initWithFFTPrecomputeLayoutManager:self withNSString:screenId withNSString:compId withBoolean:landscape withFFTTableList:list withFFTPrecomputeLayoutManager_SetPrecomputedHeightsCallback:callback];
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(computeService_)) executeWithJavaLangRunnable:r];
}

- (void)initialize__WithFFTFluidApp:(FFTFluidApp *)app {
  [((FFTDataModelManager *) nil_chk([((FFTFluidApp *) nil_chk(app)) getDataModelManager])) setDataModelWithNSString:FFTPrecomputeLayoutManager_dataModelId_ withId:self];
  [((FFTLRUCacheTree *) nil_chk(((FFTDataModelManager *) nil_chk([app getDataModelManager]))->cache_)) dontCacheChainStartingWithWithNSString:FFTPrecomputeLayoutManager_dataModelId_];
}

- (IOSObjectArray *)getSupportedPlatforms {
  return nil;
}

+ (double)precomputeViewPositionsForWithFFTLayout:(FFTLayout *)layout
                                      withBoolean:(BOOL)landscape
                                     withNSString:(NSString *)viewPathPrefix
                                     withNSString:(NSString *)precomputePrefix
                              withFFTViewPosition:(FFTViewPosition *)viewPosition
                   withFFTTableRowWithIdAndHeight:(id<FFTTableRowWithIdAndHeight>)rowWithId
                           withJavaUtilCollection:(id<JavaUtilCollection>)newViewPositions {
  if (![((FFTLayout *) nil_chk(layout)) isPrecomputedPositions]) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Expecting precompute positions to be true for layout %@", [layout getId]]];
  }
  double calcHeight = [layout calculateHeightWithBoolean:NO withFloat:(float) ((FFTViewPosition *) nil_chk(viewPosition))->width_ withNSString:precomputePrefix withBoolean:NO];
  if (rowWithId != nil) {
    [rowWithId setFluidComputedHeightWithDouble:calcHeight];
    FFTViewPosition *rowWithIdHeight = [[FFTViewPosition alloc] initWithNSString:viewPathPrefix withInt:(int) [JavaLangMath roundWithDouble:calcHeight]];
    [((FFTPrecomputeLayoutManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getPrecomputeLayoutManager])) setViewPositionWithNSString:viewPathPrefix withFFTViewPosition:rowWithIdHeight];
    [((id<JavaUtilCollection>) nil_chk(newViewPositions)) addWithId:rowWithIdHeight];
  }
  id<JavaUtilCollection> views = [layout layoutWithBoolean:landscape withDouble:viewPosition->width_ withDouble:calcHeight withNSString:precomputePrefix withBoolean:NO withBoolean:NO withBoolean:NO withNSString:viewPathPrefix];
  for (FFTViewPosition * __strong view in nil_chk(views)) {
    [((id<JavaUtilCollection>) nil_chk(newViewPositions)) addWithId:view];
    NSString *viewPathPrefixView = [FFTDataModelManager getFullKeyWithNSString:viewPathPrefix withNSString:[((FFTViewPosition *) nil_chk(view)) getId]];
    [((FFTPrecomputeLayoutManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getPrecomputeLayoutManager])) setViewPositionWithNSString:viewPathPrefixView withFFTViewPosition:view];
    [((FFTViewBehavior *) nil_chk([view getViewBehavior])) precomputeViewPositionsWithBoolean:landscape withNSString:precomputePrefix withFFTViewPosition:view withNSString:viewPathPrefixView withJavaUtilCollection:newViewPositions];
  }
  return calcHeight;
}

- (id)init {
  if (self = [super init]) {
    viewPositions_ = [[FFTLRUCache alloc] initWithInt:10000];
    computeService_ = [JavaUtilConcurrentExecutors newSingleThreadExecutor];
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTPrecomputeLayoutManager *)other {
  [super copyAllFieldsTo:other];
  other->computeService_ = computeService_;
  other->precomputeList_ = precomputeList_;
  other->viewPositions_ = viewPositions_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "setViewPositionWithNSString:withFFTViewPosition:", "setViewPosition", "V", 0x1, NULL },
    { "getViewPositionWithNSString:", "getViewPosition", "Lcom.sponberg.fluid.layout.ViewPosition;", 0x1, NULL },
    { "getPrecomputeList", NULL, "Lcom.sponberg.fluid.layout.TableList;", 0x1, NULL },
    { "setPrecomputeListWithFFTTableList:", "setPrecomputeList", "V", 0x1, NULL },
    { "computeAsyncWithFFTTableList:withNSString:withNSString:withBoolean:withFFTPrecomputeLayoutManager_PrecomputeLayoutCallback:", "computeAsync", "V", 0x1, NULL },
    { "setTableRowsToPrecomputedHeightsWithFFTTableList:withNSString:withNSString:withBoolean:withFFTPrecomputeLayoutManager_SetPrecomputedHeightsCallback:", "setTableRowsToPrecomputedHeights", "V", 0x1, NULL },
    { "initialize__WithFFTFluidApp:", "initialize", "V", 0x1, NULL },
    { "getSupportedPlatforms", NULL, "[Ljava.lang.String;", 0x1, NULL },
    { "precomputeViewPositionsForWithFFTLayout:withBoolean:withNSString:withNSString:withFFTViewPosition:withFFTTableRowWithIdAndHeight:withJavaUtilCollection:", "precomputeViewPositionsFor", "D", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "dataModelId_", NULL, 0x19, "Ljava.lang.String;", &FFTPrecomputeLayoutManager_dataModelId_,  },
    { "dataModelIdForPrecomputeList_", NULL, 0x19, "Ljava.lang.String;", &FFTPrecomputeLayoutManager_dataModelIdForPrecomputeList_,  },
    { "viewPositions_", NULL, 0x12, "Lcom.sponberg.fluid.util.LRUCache;", NULL,  },
    { "computeService_", NULL, 0x0, "Ljava.util.concurrent.ExecutorService;", NULL,  },
    { "precomputeList_", NULL, 0x0, "Lcom.sponberg.fluid.layout.TableList;", NULL,  },
  };
  static J2ObjcClassInfo _FFTPrecomputeLayoutManager = { "PrecomputeLayoutManager", "com.sponberg.fluid.layout", NULL, 0x1, 10, methods, 5, fields, 0, NULL};
  return &_FFTPrecomputeLayoutManager;
}

@end

@interface FFTPrecomputeLayoutManager_PrecomputeLayoutCallback : NSObject
@end

@implementation FFTPrecomputeLayoutManager_PrecomputeLayoutCallback

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "computeFinishedWithJavaUtilCollection:", "computeFinished", "V", 0x401, NULL },
  };
  static J2ObjcClassInfo _FFTPrecomputeLayoutManager_PrecomputeLayoutCallback = { "PrecomputeLayoutCallback", "com.sponberg.fluid.layout", "PrecomputeLayoutManager", 0x209, 1, methods, 0, NULL, 0, NULL};
  return &_FFTPrecomputeLayoutManager_PrecomputeLayoutCallback;
}

@end

@interface FFTPrecomputeLayoutManager_SetPrecomputedHeightsCallback : NSObject
@end

@implementation FFTPrecomputeLayoutManager_SetPrecomputedHeightsCallback

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "computeFinishedWithFFTTableList:", "computeFinished", "V", 0x401, NULL },
  };
  static J2ObjcClassInfo _FFTPrecomputeLayoutManager_SetPrecomputedHeightsCallback = { "SetPrecomputedHeightsCallback", "com.sponberg.fluid.layout", "PrecomputeLayoutManager", 0x209, 1, methods, 0, NULL, 0, NULL};
  return &_FFTPrecomputeLayoutManager_SetPrecomputedHeightsCallback;
}

@end

@implementation FFTPrecomputeLayoutManager_$1

- (void)run {
  JavaUtilArrayList *viewPositions = [[JavaUtilArrayList alloc] init];
  this$0_->precomputeList_ = val$list_;
  FFTScreen *screen = [((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getScreenWithNSString:val$screenId_];
  double width = [((id<FFTUIService>) nil_chk([FFTGlobalState_get_fluidApp__() getUiService])) getScreenWidthInPixels];
  double height = [((id<FFTUIService>) nil_chk([FFTGlobalState_get_fluidApp__() getUiService])) getScreenHeightInPixels];
  NSString *viewPathPrefix = [NSString stringWithFormat:@"%@.%@", val$screenId_, val$compId_];
  id<JavaUtilCollection> screenViews = [((FFTLayout *) nil_chk([((FFTScreen *) nil_chk(screen)) getLayout])) getViewsWithBoolean:val$landscape_ withDouble:width withDouble:height withNSString:viewPathPrefix];
  FFTViewPosition *viewPosition = nil;
  for (FFTViewPosition * __strong vp in nil_chk(screenViews)) {
    if ([((NSString *) nil_chk([((FFTViewPosition *) nil_chk(vp)) getId])) isEqual:val$compId_]) {
      viewPosition = vp;
      break;
    }
  }
  if (viewPosition == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Unable to find %@.%@", val$screenId_, val$compId_]];
  }
  FFTViewBehaviorTable *vb = (FFTViewBehaviorTable *) check_class_cast([((FFTViewPosition *) nil_chk(viewPosition)) getViewBehavior], [FFTViewBehaviorTable class]);
  FFTLayout *layout = [FFTGlobalState_get_fluidApp__() getLayoutWithNSString:[((id<FFTViewBehaviorTable_RowProvider>) nil_chk([((FFTViewBehaviorTable *) nil_chk(vb)) getRowProvider])) getRowLayout]];
  viewPathPrefix = [NSString stringWithFormat:@"%@%@", viewPathPrefix, [NSString stringWithFormat:@".%@", [((FFTLayout *) nil_chk(layout)) getId]]];
  for (id<FFTTableRowWithIdAndHeight> __strong rowWithId in nil_chk([((FFTTableList *) nil_chk(val$list_)) getRows])) {
    NSString *viewPathPrefixView = [NSString stringWithFormat:@"%@|%@", viewPathPrefix, [((id<FFTTableRowWithIdAndHeight>) nil_chk(rowWithId)) getFluidTableRowObjectId]];
    NSString *precomputePrefix = [NSString stringWithFormat:@"%@.%@", FFTPrecomputeLayoutManager_get_dataModelIdForPrecomputeList_(), [rowWithId getFluidTableRowObjectId]];
    [FFTPrecomputeLayoutManager precomputeViewPositionsForWithFFTLayout:layout withBoolean:val$landscape_ withNSString:viewPathPrefixView withNSString:precomputePrefix withFFTViewPosition:viewPosition withFFTTableRowWithIdAndHeight:rowWithId withJavaUtilCollection:viewPositions];
  }
  if (val$callback_ != nil) {
    [val$callback_ computeFinishedWithJavaUtilCollection:viewPositions];
  }
}

- (id)initWithFFTPrecomputeLayoutManager:(FFTPrecomputeLayoutManager *)outer$
                        withFFTTableList:(FFTTableList *)capture$0
                            withNSString:(NSString *)capture$1
                            withNSString:(NSString *)capture$2
                             withBoolean:(BOOL)capture$3
withFFTPrecomputeLayoutManager_PrecomputeLayoutCallback:(id<FFTPrecomputeLayoutManager_PrecomputeLayoutCallback>)capture$4 {
  this$0_ = outer$;
  val$list_ = capture$0;
  val$screenId_ = capture$1;
  val$compId_ = capture$2;
  val$landscape_ = capture$3;
  val$callback_ = capture$4;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTPrecomputeLayoutManager:withFFTTableList:withNSString:withNSString:withBoolean:withFFTPrecomputeLayoutManager_PrecomputeLayoutCallback:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.PrecomputeLayoutManager;", NULL,  },
    { "val$list_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.TableList;", NULL,  },
    { "val$screenId_", NULL, 0x1012, "Ljava.lang.String;", NULL,  },
    { "val$compId_", NULL, 0x1012, "Ljava.lang.String;", NULL,  },
    { "val$landscape_", NULL, 0x1012, "Z", NULL,  },
    { "val$callback_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.PrecomputeLayoutManager$PrecomputeLayoutCallback;", NULL,  },
  };
  static J2ObjcClassInfo _FFTPrecomputeLayoutManager_$1 = { "$1", "com.sponberg.fluid.layout", "PrecomputeLayoutManager", 0x8000, 2, methods, 6, fields, 0, NULL};
  return &_FFTPrecomputeLayoutManager_$1;
}

@end

@implementation FFTPrecomputeLayoutManager_$2

- (void)run {
  FFTTableList *rowsWithoutPrecomputedHeights = [[FFTTableList alloc] init];
  FFTScreen *screen = [((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getScreenWithNSString:val$screenId_];
  double width = [((id<FFTUIService>) nil_chk([FFTGlobalState_get_fluidApp__() getUiService])) getScreenWidthInPixels];
  double height = [((id<FFTUIService>) nil_chk([FFTGlobalState_get_fluidApp__() getUiService])) getScreenHeightInPixels];
  NSString *viewPathPrefix = [NSString stringWithFormat:@"%@.%@", val$screenId_, val$compId_];
  id<JavaUtilCollection> screenViews = [((FFTLayout *) nil_chk([((FFTScreen *) nil_chk(screen)) getLayout])) getViewsWithBoolean:val$landscape_ withDouble:width withDouble:height withNSString:viewPathPrefix];
  FFTViewPosition *viewPosition = nil;
  for (FFTViewPosition * __strong vp in nil_chk(screenViews)) {
    if ([((NSString *) nil_chk([((FFTViewPosition *) nil_chk(vp)) getId])) isEqual:val$compId_]) {
      viewPosition = vp;
      break;
    }
  }
  if (viewPosition == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Unable to find %@.%@", val$screenId_, val$compId_]];
  }
  FFTViewBehaviorTable *vb = (FFTViewBehaviorTable *) check_class_cast([((FFTViewPosition *) nil_chk(viewPosition)) getViewBehavior], [FFTViewBehaviorTable class]);
  FFTLayout *layout = [FFTGlobalState_get_fluidApp__() getLayoutWithNSString:[((id<FFTViewBehaviorTable_RowProvider>) nil_chk([((FFTViewBehaviorTable *) nil_chk(vb)) getRowProvider])) getRowLayout]];
  viewPathPrefix = [NSString stringWithFormat:@"%@%@", viewPathPrefix, [NSString stringWithFormat:@".%@", [((FFTLayout *) nil_chk(layout)) getId]]];
  for (id<FFTTableRowWithIdAndHeight> __strong rowWithId in nil_chk([((FFTTableList *) nil_chk(val$list_)) getRows])) {
    NSString *viewPathPrefixView = [NSString stringWithFormat:@"%@|%@", viewPathPrefix, [((id<FFTTableRowWithIdAndHeight>) nil_chk(rowWithId)) getFluidTableRowObjectId]];
    FFTViewPosition *vp = [this$0_ getViewPositionWithNSString:viewPathPrefixView];
    if (vp == nil) {
      [rowsWithoutPrecomputedHeights addWithId:rowWithId];
      continue;
    }
    [rowWithId setFluidComputedHeightWithDouble:[((FFTViewPosition *) nil_chk(vp)) getHeight]];
  }
  if (val$callback_ != nil) {
    [val$callback_ computeFinishedWithFFTTableList:rowsWithoutPrecomputedHeights];
  }
}

- (id)initWithFFTPrecomputeLayoutManager:(FFTPrecomputeLayoutManager *)outer$
                            withNSString:(NSString *)capture$0
                            withNSString:(NSString *)capture$1
                             withBoolean:(BOOL)capture$2
                        withFFTTableList:(FFTTableList *)capture$3
withFFTPrecomputeLayoutManager_SetPrecomputedHeightsCallback:(id<FFTPrecomputeLayoutManager_SetPrecomputedHeightsCallback>)capture$4 {
  this$0_ = outer$;
  val$screenId_ = capture$0;
  val$compId_ = capture$1;
  val$landscape_ = capture$2;
  val$list_ = capture$3;
  val$callback_ = capture$4;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTPrecomputeLayoutManager:withNSString:withNSString:withBoolean:withFFTTableList:withFFTPrecomputeLayoutManager_SetPrecomputedHeightsCallback:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.PrecomputeLayoutManager;", NULL,  },
    { "val$screenId_", NULL, 0x1012, "Ljava.lang.String;", NULL,  },
    { "val$compId_", NULL, 0x1012, "Ljava.lang.String;", NULL,  },
    { "val$landscape_", NULL, 0x1012, "Z", NULL,  },
    { "val$list_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.TableList;", NULL,  },
    { "val$callback_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.PrecomputeLayoutManager$SetPrecomputedHeightsCallback;", NULL,  },
  };
  static J2ObjcClassInfo _FFTPrecomputeLayoutManager_$2 = { "$2", "com.sponberg.fluid.layout", "PrecomputeLayoutManager", 0x8000, 2, methods, 6, fields, 0, NULL};
  return &_FFTPrecomputeLayoutManager_$2;
}

@end
