//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/layout/Color.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/sponberg/fluid/layout/Color.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"

@implementation FFTColor

- (id)initWithDouble:(double)red
          withDouble:(double)green
          withDouble:(double)blue
          withDouble:(double)alpha {
  if (self = [super init]) {
    self->red_ = red;
    self->green_ = green;
    self->blue_ = blue;
    self->alpha_ = alpha;
  }
  return self;
}

- (id)initFFTColorWithInt:(int)red
                  withInt:(int)green
                  withInt:(int)blue
                  withInt:(int)alpha {
  if (self = [super init]) {
    self->red_ = red * 1.0 / 255;
    self->green_ = green * 1.0 / 255;
    self->blue_ = blue * 1.0 / 255;
    self->alpha_ = alpha * 1.0 / 255;
  }
  return self;
}

- (id)initWithInt:(int)red
          withInt:(int)green
          withInt:(int)blue
          withInt:(int)alpha {
  return [self initFFTColorWithInt:red withInt:green withInt:blue withInt:alpha];
}

- (id)initWithNSStringArray:(IOSObjectArray *)rgb {
  return [self initFFTColorWithInt:[JavaLangInteger parseIntWithNSString:[((NSString *) IOSObjectArray_Get(nil_chk(rgb), 0)) trim]] withInt:[JavaLangInteger parseIntWithNSString:[((NSString *) IOSObjectArray_Get(rgb, 1)) trim]] withInt:[JavaLangInteger parseIntWithNSString:[((NSString *) IOSObjectArray_Get(rgb, 2)) trim]] withInt:[FFTColor getAlphaWithNSStringArray:rgb]];
}

+ (int)getAlphaWithNSStringArray:(IOSObjectArray *)rgb {
  if ((int) [((IOSObjectArray *) nil_chk(rgb)) count] == 4) {
    return [JavaLangInteger parseIntWithNSString:[((NSString *) IOSObjectArray_Get(rgb, 3)) trim]];
  }
  else {
    return 255;
  }
}

+ (FFTColor *)colorFromStringWithNSString:(NSString *)colorAsString {
  @try {
    BOOL useHtml = ![((NSString *) nil_chk(colorAsString)) contains:@","] || [colorAsString hasPrefix:@"#"];
    if ([colorAsString hasPrefix:@"#"]) {
      colorAsString = [colorAsString substring:1];
    }
    if (useHtml) {
      int red;
      int green;
      int blue;
      int alpha = 255;
      switch (((int) [((NSString *) nil_chk(colorAsString)) length])) {
        case 6:
        red = [JavaLangInteger parseIntWithNSString:[colorAsString substring:0 endIndex:2] withInt:16];
        green = [JavaLangInteger parseIntWithNSString:[colorAsString substring:2 endIndex:4] withInt:16];
        blue = [JavaLangInteger parseIntWithNSString:[colorAsString substring:4 endIndex:6] withInt:16];
        break;
        case 3:
        red = [JavaLangInteger parseIntWithNSString:[colorAsString substring:0 endIndex:1] withInt:16];
        green = [JavaLangInteger parseIntWithNSString:[colorAsString substring:1 endIndex:2] withInt:16];
        blue = [JavaLangInteger parseIntWithNSString:[colorAsString substring:2 endIndex:3] withInt:16];
        break;
        case 8:
        red = [JavaLangInteger parseIntWithNSString:[colorAsString substring:0 endIndex:2] withInt:16];
        green = [JavaLangInteger parseIntWithNSString:[colorAsString substring:2 endIndex:4] withInt:16];
        blue = [JavaLangInteger parseIntWithNSString:[colorAsString substring:4 endIndex:6] withInt:16];
        alpha = [JavaLangInteger parseIntWithNSString:[colorAsString substring:6 endIndex:8] withInt:16];
        break;
        case 4:
        red = [JavaLangInteger parseIntWithNSString:[colorAsString substring:0 endIndex:1] withInt:16];
        green = [JavaLangInteger parseIntWithNSString:[colorAsString substring:1 endIndex:2] withInt:16];
        blue = [JavaLangInteger parseIntWithNSString:[colorAsString substring:2 endIndex:3] withInt:16];
        alpha = [JavaLangInteger parseIntWithNSString:[colorAsString substring:3 endIndex:4] withInt:16];
        break;
        default:
        return [FFTColor getDefaultColor];
      }
      return [[FFTColor alloc] initWithInt:red withInt:green withInt:blue withInt:alpha];
    }
    else {
      IOSObjectArray *ca = [((NSString *) nil_chk(colorAsString)) split:@","];
      if ((int) [((IOSObjectArray *) nil_chk(ca)) count] != 3 && (int) [ca count] != 4) {
        return [FFTColor getDefaultColor];
      }
      else {
        return [[FFTColor alloc] initWithNSStringArray:[colorAsString split:@","]];
      }
    }
  }
  @catch (JavaLangNullPointerException *e) {
    [((JavaLangNullPointerException *) nil_chk(e)) printStackTrace];
    return [FFTColor getDefaultColor];
  }
}

+ (FFTColor *)getDefaultColor {
  FFTColor *defaultColor = [[FFTColor alloc] initWithInt:255 withInt:255 withInt:255 withInt:255];
  return defaultColor;
}

- (NSString *)getHtml {
  return [NSString formatWithNSString:@"#%02x%02x%02x" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [JavaLangInteger valueOfWithInt:J2ObjCFpToInt((red_ * 255))], [JavaLangInteger valueOfWithInt:J2ObjCFpToInt((green_ * 255))], [JavaLangInteger valueOfWithInt:J2ObjCFpToInt((blue_ * 255))] } count:3 type:[IOSClass classWithClass:[NSObject class]]]];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"Color(red=%f, green=%f, blue=%f, alpha=%f)", [self getRed], [self getGreen], [self getBlue], [self getAlpha]];
}

- (double)getRed {
  return self->red_;
}

- (double)getGreen {
  return self->green_;
}

- (double)getBlue {
  return self->blue_;
}

- (double)getAlpha {
  return self->alpha_;
}

- (BOOL)isEqual:(id)o {
  if (o == self) return YES;
  if (!([o isKindOfClass:[FFTColor class]])) return NO;
  FFTColor *other = (FFTColor *) check_class_cast(o, [FFTColor class]);
  if (![((FFTColor *) nil_chk(other)) canEqualWithId:(id) check_class_cast(self, [NSObject class])]) return NO;
  if ([JavaLangDouble compareWithDouble:[self getRed] withDouble:[other getRed]] != 0) return NO;
  if ([JavaLangDouble compareWithDouble:[self getGreen] withDouble:[other getGreen]] != 0) return NO;
  if ([JavaLangDouble compareWithDouble:[self getBlue] withDouble:[other getBlue]] != 0) return NO;
  if ([JavaLangDouble compareWithDouble:[self getAlpha] withDouble:[other getAlpha]] != 0) return NO;
  return YES;
}

- (BOOL)canEqualWithId:(id)other {
  return [other isKindOfClass:[FFTColor class]];
}

- (NSUInteger)hash {
  int PRIME = 59;
  int result = 1;
  long long int $red = [JavaLangDouble doubleToLongBitsWithDouble:[self getRed]];
  result = result * PRIME + (int) ((long long) (((unsigned long long) $red) >> 32) ^ $red);
  long long int $green = [JavaLangDouble doubleToLongBitsWithDouble:[self getGreen]];
  result = result * PRIME + (int) ((long long) (((unsigned long long) $green) >> 32) ^ $green);
  long long int $blue = [JavaLangDouble doubleToLongBitsWithDouble:[self getBlue]];
  result = result * PRIME + (int) ((long long) (((unsigned long long) $blue) >> 32) ^ $blue);
  long long int $alpha = [JavaLangDouble doubleToLongBitsWithDouble:[self getAlpha]];
  result = result * PRIME + (int) ((long long) (((unsigned long long) $alpha) >> 32) ^ $alpha);
  return result;
}

- (void)copyAllFieldsTo:(FFTColor *)other {
  [super copyAllFieldsTo:other];
  other->alpha_ = alpha_;
  other->blue_ = blue_;
  other->green_ = green_;
  other->red_ = red_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withDouble:withDouble:withDouble:", "Color", NULL, 0x1, NULL },
    { "initWithInt:withInt:withInt:withInt:", "Color", NULL, 0x1, NULL },
    { "initWithNSStringArray:", "Color", NULL, 0x4, NULL },
    { "getAlphaWithNSStringArray:", "getAlpha", "I", 0x9, NULL },
    { "colorFromStringWithNSString:", "colorFromString", "Lcom.sponberg.fluid.layout.Color;", 0x9, NULL },
    { "getDefaultColor", NULL, "Lcom.sponberg.fluid.layout.Color;", 0x9, NULL },
    { "getHtml", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getRed", NULL, "D", 0x1, NULL },
    { "getGreen", NULL, "D", 0x1, NULL },
    { "getBlue", NULL, "D", 0x1, NULL },
    { "getAlpha", NULL, "D", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "canEqualWithId:", "canEqual", "Z", 0x4, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "red_", NULL, 0x10, "D", NULL,  },
    { "green_", NULL, 0x10, "D", NULL,  },
    { "blue_", NULL, 0x10, "D", NULL,  },
    { "alpha_", NULL, 0x10, "D", NULL,  },
  };
  static J2ObjcClassInfo _FFTColor = { "Color", "com.sponberg.fluid.layout", NULL, 0x1, 15, methods, 4, fields, 0, NULL};
  return &_FFTColor;
}

@end
