//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/layout/TableList.java
//

#include "com/sponberg/fluid/layout/TableList.h"
#include "com/sponberg/fluid/layout/TableRowWithId.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/ConcurrentModificationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"

@implementation FFTTableList

- (void)addWithId:(id<FFTTableRowWithId>)row {
  if ([((id<FFTTableRowWithId>) nil_chk(row)) getFluidTableRowObjectId] == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"id may not be null"];
  }
  @synchronized (rows_) {
    changeId_++;
    [((JavaUtilArrayList *) nil_chk(rows_)) addWithId:row];
    (void) [((JavaUtilHashMap *) nil_chk(rowById_)) putWithId:[row getFluidTableRowObjectId] withId:[JavaLangInteger valueOfWithInt:[rows_ size] - 1]];
  }
}

- (void)addWithInt:(int)index
            withId:(id<FFTTableRowWithId>)row {
  if ([((id<FFTTableRowWithId>) nil_chk(row)) getFluidTableRowObjectId] == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"id may not be null"];
  }
  @synchronized (rows_) {
    changeId_++;
    [((JavaUtilArrayList *) nil_chk(rows_)) addWithInt:index withId:row];
    [self populateIndexMapFromWithInt:index];
  }
}

- (void)populateIndexMapFromWithInt:(int)startingIndex {
  id<FFTTableRowWithId> row;
  for (int i = startingIndex; i < [((JavaUtilArrayList *) nil_chk(rows_)) size]; i++) {
    row = [rows_ getWithInt:i];
    (void) [((JavaUtilHashMap *) nil_chk(rowById_)) putWithId:[((id<FFTTableRowWithId>) nil_chk(row)) getFluidTableRowObjectId] withId:[JavaLangInteger valueOfWithInt:i]];
  }
}

- (id)getByIdWithJavaLangLong:(JavaLangLong *)id_ {
  @synchronized (rows_) {
    JavaLangInteger *rowIndex = [self getIndexWithJavaLangLong:id_];
    if (rowIndex == nil) {
      return nil;
    }
    else {
      return [((JavaUtilArrayList *) nil_chk(rows_)) getWithInt:[rowIndex intValue]];
    }
  }
}

- (JavaLangInteger *)getIndexWithJavaLangLong:(JavaLangLong *)id_ {
  @synchronized (rows_) {
    return [((JavaUtilHashMap *) nil_chk(rowById_)) getWithId:id_];
  }
}

- (JavaLangInteger *)getIndexOfRecentlyDeletedWithJavaLangLong:(JavaLangLong *)id_ {
  @synchronized (rows_) {
    return [((JavaUtilHashMap *) nil_chk(recentlyDeletedRowById_)) getWithId:id_];
  }
}

- (int)size {
  @synchronized (rows_) {
    return [((JavaUtilArrayList *) nil_chk(rows_)) size];
  }
}

- (BOOL)containsWithId:(id<FFTTableRowWithId>)row {
  @synchronized (rows_) {
    return [((JavaUtilHashMap *) nil_chk(rowById_)) containsKeyWithId:[((id<FFTTableRowWithId>) nil_chk(row)) getFluidTableRowObjectId]];
  }
}

- (BOOL)removeWithId:(id<FFTTableRowWithId>)row {
  @synchronized (rows_) {
    changeId_++;
    JavaLangInteger *i = [((JavaUtilHashMap *) nil_chk(rowById_)) removeWithId:[((id<FFTTableRowWithId>) nil_chk(row)) getFluidTableRowObjectId]];
    if (i == nil) {
      return NO;
    }
    if (i != nil) {
      int rowIndex = [i intValue];
      (void) [((JavaUtilArrayList *) nil_chk(rows_)) removeWithInt:rowIndex];
      (void) [rowById_ removeWithId:[row getFluidTableRowObjectId]];
      [self populateIndexMapFromWithInt:rowIndex];
      (void) [((JavaUtilHashMap *) nil_chk(recentlyDeletedRowById_)) putWithId:[row getFluidTableRowObjectId] withId:i];
    }
    return i != nil;
  }
}

- (int)removeByIndexAndReturnChangeIdWithInt:(int)index {
  @synchronized (rows_) {
    changeId_++;
    id<FFTTableRowWithId> row = [((JavaUtilArrayList *) nil_chk(rows_)) removeWithInt:index];
    (void) [((JavaUtilHashMap *) nil_chk(rowById_)) removeWithId:[((id<FFTTableRowWithId>) nil_chk(row)) getFluidTableRowObjectId]];
    [self populateIndexMapFromWithInt:index];
    return changeId_;
  }
}

- (id<JavaUtilList>)getRows {
  @synchronized (rows_) {
    return [JavaUtilCollections unmodifiableListWithJavaUtilList:rows_];
  }
}

- (void)addAllWithFFTTableList:(FFTTableList *)list {
  for (id<FFTTableRowWithId> __strong e in nil_chk([((FFTTableList *) nil_chk(list)) getRows])) {
    [self addWithId:e];
  }
}

- (void)addElementsWithJavaUtilList:(id<JavaUtilList>)elements {
  for (id<FFTTableRowWithId> __strong e in nil_chk(elements)) {
    [self addWithId:e];
  }
}

- (void)sortWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  @synchronized (rows_) {
    [JavaUtilCollections sortWithJavaUtilList:rows_ withJavaUtilComparator:comparator];
    [self populateIndexMapFromWithInt:0];
  }
}

- (id)init {
  if (self = [super init]) {
    rows_ = [[JavaUtilArrayList alloc] init];
    rowById_ = [[JavaUtilHashMap alloc] init];
    recentlyDeletedRowById_ = [[JavaUtilHashMap alloc] init];
    changeId_ = 0;
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTTableList *)other {
  [super copyAllFieldsTo:other];
  other->changeId_ = changeId_;
  other->recentlyDeletedRowById_ = recentlyDeletedRowById_;
  other->rowById_ = rowById_;
  other->rows_ = rows_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "addWithId:", "add", "V", 0x1, NULL },
    { "addWithInt:withId:", "add", "V", 0x1, NULL },
    { "populateIndexMapFromWithInt:", "populateIndexMapFrom", "V", 0x2, NULL },
    { "getByIdWithJavaLangLong:", "getById", "TE;", 0x1, NULL },
    { "getIndexWithJavaLangLong:", "getIndex", "Ljava.lang.Integer;", 0x1, NULL },
    { "getIndexOfRecentlyDeletedWithJavaLangLong:", "getIndexOfRecentlyDeleted", "Ljava.lang.Integer;", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "containsWithId:", "contains", "Z", 0x1, NULL },
    { "removeWithId:", "remove", "Z", 0x1, NULL },
    { "removeByIndexAndReturnChangeIdWithInt:", "removeByIndexAndReturnChangeId", "I", 0x4, NULL },
    { "getRows", NULL, "Ljava.util.List;", 0x1, NULL },
    { "addAllWithFFTTableList:", "addAll", "V", 0x1, NULL },
    { "addElementsWithJavaUtilList:", "addElements", "V", 0x1, NULL },
    { "sortWithJavaUtilComparator:", "sort", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "rows_", NULL, 0x12, "Ljava.util.ArrayList;", NULL,  },
    { "rowById_", NULL, 0x12, "Ljava.util.HashMap;", NULL,  },
    { "recentlyDeletedRowById_", NULL, 0x12, "Ljava.util.HashMap;", NULL,  },
    { "changeId_", NULL, 0x2, "I", NULL,  },
  };
  static J2ObjcClassInfo _FFTTableList = { "TableList", "com.sponberg.fluid.layout", NULL, 0x1, 15, methods, 4, fields, 0, NULL};
  return &_FFTTableList;
}

@end

@implementation FFTTableList_TableListIterator

- (id)initWithFFTTableList:(FFTTableList *)outer$
          withFFTTableList:(FFTTableList *)list {
  this$0_ = outer$;
  if (self = [super init]) {
    index_ = 0;
    self->list_ = list;
    self->changeId_ = ((FFTTableList *) nil_chk(list))->changeId_;
  }
  return self;
}

- (BOOL)hasNext {
  @synchronized (this$0_->rows_) {
    if (changeId_ != ((FFTTableList *) nil_chk(list_))->changeId_) {
      @throw [[JavaUtilConcurrentModificationException alloc] init];
    }
    return index_ < [list_ size];
  }
}

- (id)next {
  @synchronized (this$0_->rows_) {
    if (changeId_ != ((FFTTableList *) nil_chk(list_))->changeId_) {
      @throw [[JavaUtilConcurrentModificationException alloc] init];
    }
    return [((id<JavaUtilList>) nil_chk([list_ getRows])) getWithInt:index_++];
  }
}

- (void)remove {
  @synchronized (this$0_->rows_) {
    if (changeId_ != ((FFTTableList *) nil_chk(list_))->changeId_) {
      @throw [[JavaUtilConcurrentModificationException alloc] init];
    }
    changeId_ = [list_ removeByIndexAndReturnChangeIdWithInt:index_ - 1];
  }
}

- (void)copyAllFieldsTo:(FFTTableList_TableListIterator *)other {
  [super copyAllFieldsTo:other];
  other->changeId_ = changeId_;
  other->index_ = index_;
  other->list_ = list_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithFFTTableList:withFFTTableList:", "TableListIterator", NULL, 0x1, NULL },
    { "hasNext", NULL, "Z", 0x1, NULL },
    { "next", NULL, "TE;", 0x1, NULL },
    { "remove", NULL, "V", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.layout.TableList;", NULL,  },
    { "list_", NULL, 0x10, "Lcom.sponberg.fluid.layout.TableList;", NULL,  },
    { "index_", NULL, 0x0, "I", NULL,  },
    { "changeId_", NULL, 0x0, "I", NULL,  },
  };
  static J2ObjcClassInfo _FFTTableList_TableListIterator = { "TableListIterator", "com.sponberg.fluid.layout", "TableList", 0x1, 4, methods, 4, fields, 0, NULL};
  return &_FFTTableList_TableListIterator;
}

@end
