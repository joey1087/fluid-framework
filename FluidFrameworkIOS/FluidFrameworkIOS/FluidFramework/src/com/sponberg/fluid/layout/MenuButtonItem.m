//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/layout/MenuButtonItem.java
//

#include "IOSClass.h"
#include "com/sponberg/fluid/layout/ActionListener.h"
#include "com/sponberg/fluid/layout/MenuButtonItem.h"
#include "java/lang/Boolean.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"

@implementation FFTMenuButtonItem

NSString * FFTMenuButtonItem_SystemItemCustom_ = @"SystemItemCustom";
NSString * FFTMenuButtonItem_SystemItemDone_ = @"SystemItemDone";
NSString * FFTMenuButtonItem_SystemItemCancel_ = @"SystemItemCancel";
NSString * FFTMenuButtonItem_SystemItemEdit_ = @"SystemItemEdit";
NSString * FFTMenuButtonItem_SystemItemSave_ = @"SystemItemSave";
NSString * FFTMenuButtonItem_SystemItemAdd_ = @"SystemItemAdd";
NSString * FFTMenuButtonItem_SystemItemFlexibleSpace_ = @"SystemItemFlexibleSpace";
NSString * FFTMenuButtonItem_SystemItemFixedSpace_ = @"SystemItemFixedSpace";
NSString * FFTMenuButtonItem_SystemItemCompose_ = @"SystemItemCompose";
NSString * FFTMenuButtonItem_SystemItemReply_ = @"SystemItemReply";
NSString * FFTMenuButtonItem_SystemItemAction_ = @"SystemItemAction";
NSString * FFTMenuButtonItem_SystemItemOrganize_ = @"SystemItemOrganize";
NSString * FFTMenuButtonItem_SystemItemBookmarks_ = @"SystemItemBookmarks";
NSString * FFTMenuButtonItem_SystemItemSearch_ = @"SystemItemSearch";
NSString * FFTMenuButtonItem_SystemItemRefresh_ = @"SystemItemRefresh";
NSString * FFTMenuButtonItem_SystemItemStop_ = @"SystemItemStop";
NSString * FFTMenuButtonItem_SystemItemCamera_ = @"SystemItemCamera";
NSString * FFTMenuButtonItem_SystemItemTrash_ = @"SystemItemTrash";
NSString * FFTMenuButtonItem_SystemItemPlay_ = @"SystemItemPlay";
NSString * FFTMenuButtonItem_SystemItemPause_ = @"SystemItemPause";
NSString * FFTMenuButtonItem_SystemItemRewind_ = @"SystemItemRewind";
NSString * FFTMenuButtonItem_SystemItemFastForward_ = @"SystemItemFastForward";
NSString * FFTMenuButtonItem_SystemItemUndo_ = @"SystemItemUndo";
NSString * FFTMenuButtonItem_SystemItemRedo_ = @"SystemItemRedo";
NSString * FFTMenuButtonItem_SystemItemPageCurl_ = @"SystemItemPageCurl";
NSString * FFTMenuButtonItem_kItemPropertyTextColor_ = @"textColor";

- (id)initFFTMenuButtonItemWithNSString:(NSString *)systemId
                           withNSString:(NSString *)title
                           withNSString:(NSString *)iconName
                                withInt:(int)actionFlavor {
  if (self = [super init]) {
    actionListeners_ = [[JavaUtilArrayList alloc] init];
    showOnMainBar_ = YES;
    enabled_ = YES;
    preferenceShowOnLeft_ = NO;
    properties_ = [[JavaUtilHashMap alloc] init];
    self->systemId_ = systemId;
    self->title_ = title;
    self->iconName_ = iconName;
    self->actionFlavor_ = actionFlavor;
    if (self->systemId_ == FFTMenuButtonItem_SystemItemCustom_ && title == nil && iconName == nil) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:@"When systemId is Custom, must specify title or icon"];
    }
  }
  return self;
}

- (id)initWithNSString:(NSString *)systemId
          withNSString:(NSString *)title
          withNSString:(NSString *)iconName
               withInt:(int)actionFlavor {
  return [self initFFTMenuButtonItemWithNSString:systemId withNSString:title withNSString:iconName withInt:actionFlavor];
}

- (id)initWithNSString:(NSString *)systemId {
  return [self initFFTMenuButtonItemWithNSString:systemId withNSString:nil withNSString:nil withInt:FFTMenuButtonItem_ActionFlavorNone];
}

- (void)addActionListenerWithFFTActionListener:(id<FFTActionListener>)al {
  [((JavaUtilArrayList *) nil_chk(self->actionListeners_)) addWithId:al];
}

- (void)userTapped {
  for (id<FFTActionListener> __strong l in nil_chk(actionListeners_)) {
    [((id<FFTActionListener>) nil_chk(l)) userTappedWithFFTActionListener_EventInfo:nil];
  }
}

- (void)userChangedValueToWithId:(id)value {
  for (id<FFTActionListener> __strong l in nil_chk(actionListeners_)) {
    [((id<FFTActionListener>) nil_chk(l)) userChangedValueToWithFFTActionListener_EventInfo:[[FFTActionListener_EventInfo alloc] init] withId:value];
  }
}

- (NSString *)getTitle {
  if (self->title_ != nil) {
    return self->title_;
  }
  else {
    return [FFTMenuButtonItem getTitleForWithNSString:self->systemId_];
  }
}

- (void)setPropertyWithNSString:(NSString *)name
                   withNSString:(NSString *)value {
  (void) [((JavaUtilHashMap *) nil_chk(properties_)) putWithId:name withId:value];
}

- (NSString *)getPropertyWithNSString:(NSString *)name {
  return [((JavaUtilHashMap *) nil_chk(properties_)) getWithId:name];
}

+ (NSString *)getTitleForWithNSString:(NSString *)systemId {
  if ([((NSString *) nil_chk(systemId)) isEqual:FFTMenuButtonItem_SystemItemDone_]) {
    return @"Done";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemCancel_]) {
    return @"Cancel";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemEdit_]) {
    return @"Edit";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemSave_]) {
    return @"Save";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemAdd_]) {
    return @"Add";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemFlexibleSpace_]) {
    return @"FlexibleSpace";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemFixedSpace_]) {
    return @"FixedSpace";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemCompose_]) {
    return @"Compose";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemReply_]) {
    return @"Reply";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemAction_]) {
    return @"Share";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemOrganize_]) {
    return @"Organize";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemBookmarks_]) {
    return @"Bookmarks";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemSearch_]) {
    return @"Search";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemRefresh_]) {
    return @"Refresh";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemStop_]) {
    return @"Stop";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemCamera_]) {
    return @"Camera";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemTrash_]) {
    return @"Trash";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemPlay_]) {
    return @"Play";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemPause_]) {
    return @"Pause";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemRewind_]) {
    return @"Rewind";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemFastForward_]) {
    return @"FastForward";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemUndo_]) {
    return @"Undo";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemRedo_]) {
    return @"Redo";
  }
  else if ([systemId isEqual:FFTMenuButtonItem_SystemItemPageCurl_]) {
    return @"Next";
  }
  else {
    return nil;
  }
}

- (NSString *)description {
  return [NSString stringWithFormat:@"MenuButtonItem(actionListeners=%@, systemId=%@, title=%@, iconName=%@, actionFlavor=%d, showOnMainBar=%@, enabled=%@, preferenceShowOnLeft=%@, properties=%@)", [self getActionListeners], [self getSystemId], [self getTitle], [self getIconName], [self getActionFlavor], [JavaLangBoolean toStringWithBoolean:[self isShowOnMainBar]], [JavaLangBoolean toStringWithBoolean:[self isEnabled]], [JavaLangBoolean toStringWithBoolean:[self isPreferenceShowOnLeft]], [self getProperties]];
}

- (JavaUtilArrayList *)getActionListeners {
  return self->actionListeners_;
}

- (NSString *)getSystemId {
  return self->systemId_;
}

- (NSString *)getIconName {
  return self->iconName_;
}

- (int)getActionFlavor {
  return self->actionFlavor_;
}

- (BOOL)isShowOnMainBar {
  return self->showOnMainBar_;
}

- (BOOL)isEnabled {
  return self->enabled_;
}

- (BOOL)isPreferenceShowOnLeft {
  return self->preferenceShowOnLeft_;
}

- (JavaUtilHashMap *)getProperties {
  return self->properties_;
}

- (void)setActionListenersWithJavaUtilArrayList:(JavaUtilArrayList *)actionListeners {
  self->actionListeners_ = actionListeners;
}

- (void)setShowOnMainBarWithBoolean:(BOOL)showOnMainBar {
  self->showOnMainBar_ = showOnMainBar;
}

- (void)setEnabledWithBoolean:(BOOL)enabled {
  self->enabled_ = enabled;
}

- (void)setPreferenceShowOnLeftWithBoolean:(BOOL)preferenceShowOnLeft {
  self->preferenceShowOnLeft_ = preferenceShowOnLeft;
}

- (void)setPropertiesWithJavaUtilHashMap:(JavaUtilHashMap *)properties {
  self->properties_ = properties;
}

- (BOOL)isEqual:(id)o {
  if (o == self) return YES;
  if (!([o isKindOfClass:[FFTMenuButtonItem class]])) return NO;
  FFTMenuButtonItem *other = (FFTMenuButtonItem *) check_class_cast(o, [FFTMenuButtonItem class]);
  if (![((FFTMenuButtonItem *) nil_chk(other)) canEqualWithId:(id) check_class_cast(self, [NSObject class])]) return NO;
  id this$actionListeners = [self getActionListeners];
  id other$actionListeners = [other getActionListeners];
  if (this$actionListeners == nil ? other$actionListeners != nil : ![this$actionListeners isEqual:other$actionListeners]) return NO;
  id this$systemId = [self getSystemId];
  id other$systemId = [other getSystemId];
  if (this$systemId == nil ? other$systemId != nil : ![this$systemId isEqual:other$systemId]) return NO;
  id this$title = [self getTitle];
  id other$title = [other getTitle];
  if (this$title == nil ? other$title != nil : ![this$title isEqual:other$title]) return NO;
  id this$iconName = [self getIconName];
  id other$iconName = [other getIconName];
  if (this$iconName == nil ? other$iconName != nil : ![this$iconName isEqual:other$iconName]) return NO;
  if ([self getActionFlavor] != [other getActionFlavor]) return NO;
  if ([self isShowOnMainBar] != [other isShowOnMainBar]) return NO;
  if ([self isEnabled] != [other isEnabled]) return NO;
  if ([self isPreferenceShowOnLeft] != [other isPreferenceShowOnLeft]) return NO;
  id this$properties = [self getProperties];
  id other$properties = [other getProperties];
  if (this$properties == nil ? other$properties != nil : ![this$properties isEqual:other$properties]) return NO;
  return YES;
}

- (BOOL)canEqualWithId:(id)other {
  return [other isKindOfClass:[FFTMenuButtonItem class]];
}

- (NSUInteger)hash {
  int PRIME = 59;
  int result = 1;
  id $actionListeners = [self getActionListeners];
  result = result * PRIME + ($actionListeners == nil ? 0 : ((int) [$actionListeners hash]));
  id $systemId = [self getSystemId];
  result = result * PRIME + ($systemId == nil ? 0 : ((int) [$systemId hash]));
  id $title = [self getTitle];
  result = result * PRIME + ($title == nil ? 0 : ((int) [$title hash]));
  id $iconName = [self getIconName];
  result = result * PRIME + ($iconName == nil ? 0 : ((int) [$iconName hash]));
  result = result * PRIME + [self getActionFlavor];
  result = result * PRIME + ([self isShowOnMainBar] ? 79 : 97);
  result = result * PRIME + ([self isEnabled] ? 79 : 97);
  result = result * PRIME + ([self isPreferenceShowOnLeft] ? 79 : 97);
  id $properties = [self getProperties];
  result = result * PRIME + ($properties == nil ? 0 : ((int) [$properties hash]));
  return result;
}

- (void)copyAllFieldsTo:(FFTMenuButtonItem *)other {
  [super copyAllFieldsTo:other];
  other->actionFlavor_ = actionFlavor_;
  other->actionListeners_ = actionListeners_;
  other->enabled_ = enabled_;
  other->iconName_ = iconName_;
  other->preferenceShowOnLeft_ = preferenceShowOnLeft_;
  other->properties_ = properties_;
  other->showOnMainBar_ = showOnMainBar_;
  other->systemId_ = systemId_;
  other->title_ = title_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withNSString:withInt:", "MenuButtonItem", NULL, 0x1, NULL },
    { "initWithNSString:", "MenuButtonItem", NULL, 0x1, NULL },
    { "addActionListenerWithFFTActionListener:", "addActionListener", "V", 0x1, NULL },
    { "userTapped", NULL, "V", 0x1, NULL },
    { "userChangedValueToWithId:", "userChangedValueTo", "V", 0x1, NULL },
    { "getTitle", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setPropertyWithNSString:withNSString:", "setProperty", "V", 0x1, NULL },
    { "getPropertyWithNSString:", "getProperty", "Ljava.lang.String;", 0x1, NULL },
    { "getTitleForWithNSString:", "getTitleFor", "Ljava.lang.String;", 0x9, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getActionListeners", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "getSystemId", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getIconName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getActionFlavor", NULL, "I", 0x1, NULL },
    { "isShowOnMainBar", NULL, "Z", 0x1, NULL },
    { "isEnabled", NULL, "Z", 0x1, NULL },
    { "isPreferenceShowOnLeft", NULL, "Z", 0x1, NULL },
    { "getProperties", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "setActionListenersWithJavaUtilArrayList:", "setActionListeners", "V", 0x1, NULL },
    { "setShowOnMainBarWithBoolean:", "setShowOnMainBar", "V", 0x1, NULL },
    { "setEnabledWithBoolean:", "setEnabled", "V", 0x1, NULL },
    { "setPreferenceShowOnLeftWithBoolean:", "setPreferenceShowOnLeft", "V", 0x1, NULL },
    { "setPropertiesWithJavaUtilHashMap:", "setProperties", "V", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "canEqualWithId:", "canEqual", "Z", 0x4, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "SystemItemCustom_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemCustom_,  },
    { "SystemItemDone_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemDone_,  },
    { "SystemItemCancel_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemCancel_,  },
    { "SystemItemEdit_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemEdit_,  },
    { "SystemItemSave_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemSave_,  },
    { "SystemItemAdd_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemAdd_,  },
    { "SystemItemFlexibleSpace_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemFlexibleSpace_,  },
    { "SystemItemFixedSpace_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemFixedSpace_,  },
    { "SystemItemCompose_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemCompose_,  },
    { "SystemItemReply_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemReply_,  },
    { "SystemItemAction_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemAction_,  },
    { "SystemItemOrganize_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemOrganize_,  },
    { "SystemItemBookmarks_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemBookmarks_,  },
    { "SystemItemSearch_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemSearch_,  },
    { "SystemItemRefresh_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemRefresh_,  },
    { "SystemItemStop_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemStop_,  },
    { "SystemItemCamera_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemCamera_,  },
    { "SystemItemTrash_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemTrash_,  },
    { "SystemItemPlay_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemPlay_,  },
    { "SystemItemPause_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemPause_,  },
    { "SystemItemRewind_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemRewind_,  },
    { "SystemItemFastForward_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemFastForward_,  },
    { "SystemItemUndo_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemUndo_,  },
    { "SystemItemRedo_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemRedo_,  },
    { "SystemItemPageCurl_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_SystemItemPageCurl_,  },
    { "ActionFlavorNone_", NULL, 0x19, "I", NULL, .constantValue.asInt = FFTMenuButtonItem_ActionFlavorNone },
    { "ActionFlavorSearch_", NULL, 0x19, "I", NULL, .constantValue.asInt = FFTMenuButtonItem_ActionFlavorSearch },
    { "kItemPropertyTextColor_", NULL, 0x19, "Ljava.lang.String;", &FFTMenuButtonItem_kItemPropertyTextColor_,  },
    { "actionListeners_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
    { "systemId_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
    { "title_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
    { "iconName_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
    { "actionFlavor_", NULL, 0x10, "I", NULL,  },
    { "showOnMainBar_", NULL, 0x0, "Z", NULL,  },
    { "enabled_", NULL, 0x0, "Z", NULL,  },
    { "preferenceShowOnLeft_", NULL, 0x0, "Z", NULL,  },
    { "properties_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
  };
  static J2ObjcClassInfo _FFTMenuButtonItem = { "MenuButtonItem", "com.sponberg.fluid.layout", NULL, 0x1, 26, methods, 37, fields, 0, NULL};
  return &_FFTMenuButtonItem;
}

@end
