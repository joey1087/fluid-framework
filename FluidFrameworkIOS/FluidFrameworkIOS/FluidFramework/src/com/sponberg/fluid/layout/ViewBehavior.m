//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/layout/ViewBehavior.java
//

#include "IOSClass.h"
#include "com/sponberg/fluid/FluidApp.h"
#include "com/sponberg/fluid/GlobalState.h"
#include "com/sponberg/fluid/layout/Color.h"
#include "com/sponberg/fluid/layout/Constraints.h"
#include "com/sponberg/fluid/layout/DataModelManager.h"
#include "com/sponberg/fluid/layout/Layout.h"
#include "com/sponberg/fluid/layout/Length.h"
#include "com/sponberg/fluid/layout/View.h"
#include "com/sponberg/fluid/layout/ViewBehavior.h"
#include "com/sponberg/fluid/layout/ViewManager.h"
#include "com/sponberg/fluid/layout/ViewPosition.h"
#include "com/sponberg/fluid/util/KeyValueList.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"

@implementation FFTViewBehavior

NSString * FFTViewBehavior_label_ = @"com.sponberg.fluid.label";
NSString * FFTViewBehavior_button_ = @"com.sponberg.fluid.button";
NSString * FFTViewBehavior_image_ = @"com.sponberg.fluid.image";
NSString * FFTViewBehavior_table_ = @"com.sponberg.fluid.table";
NSString * FFTViewBehavior_space_ = @"com.sponberg.fluid.space";
NSString * FFTViewBehavior_subview_ = @"com.sponberg.fluid.subview";
NSString * FFTViewBehavior_subviewRepeat_ = @"com.sponberg.fluid.subviewRepeat";
NSString * FFTViewBehavior_webview_ = @"com.sponberg.fluid.webview";
NSString * FFTViewBehavior_urlWebview_ = @"com.sponberg.fluid.urlWebview";
NSString * FFTViewBehavior_textfield_ = @"com.sponberg.fluid.textfield";
NSString * FFTViewBehavior_searchbar_ = @"com.sponberg.fluid.searchbar";
NSString * FFTViewBehavior_segmentedControl_ = @"com.sponberg.fluid.segmentedControl";

- (id)initWithNSString:(NSString *)type
   withFFTKeyValueList:(id<FFTKeyValueList>)properties {
  if (self = [super init]) {
    backgroundColors_ = [[JavaUtilArrayList alloc] init];
    unknownText_ = nil;
    self->type_ = type;
    [self parseKVLWithFFTKeyValueList:properties];
  }
  return self;
}

- (void)parseKVLWithFFTKeyValueList:(id<FFTKeyValueList>)list {
  if (list == nil) {
    return;
  }
  [self parseBackgroundColorsWithFFTKeyValueList:list];
  if ([((id<FFTKeyValueList>) nil_chk(list)) containsWithNSString:@"unknown-text"]) {
    unknownText_ = [list getValueWithNSString:@"unknown-text"];
  }
  self->cornerRadius_ = [FFTViewBehavior getIntegerPropertyWithNSString:@"corner-radius" withJavaLangInteger:nil withFFTKeyValueList:list];
  self->borderSize_ = [FFTViewBehavior getSizePropertyWithNSString:@"border-size" withNSString:@"0p" withFFTKeyValueList:list];
  self->borderColor_ = [self getColorPropertyWithNSString:@"border-color" withFFTColor:nil withFFTKeyValueList:list];
}

- (void)parseBackgroundColorsWithFFTKeyValueList:(id<FFTKeyValueList>)properties {
  if (![((id<FFTKeyValueList>) nil_chk(properties)) containsWithNSString:@"background-color"]) {
    return;
  }
  for (id<FFTKeyValueList> __strong kvl in nil_chk([properties getWithNSString:@"background-color"])) {
    FFTViewBehavior_ColorWithCondition *color = [[FFTViewBehavior_ColorWithCondition alloc] init];
    [((JavaUtilArrayList *) nil_chk(backgroundColors_)) addWithId:color];
    color->color_ = [((FFTViewManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getViewManager])) getColorWithNSString:[((id<FFTKeyValueList>) nil_chk(kvl)) getValue]];
    if ([kvl containsWithNSString:@"condition"]) {
      color->condition_ = [kvl getValueWithNSString:@"condition"];
    }
  }
}

- (FFTColor *)getBackgroundColorWithNSString:(NSString *)dataModelPrefix {
  for (FFTViewBehavior_ColorWithCondition * __strong i in nil_chk(backgroundColors_)) {
    if (((FFTViewBehavior_ColorWithCondition *) nil_chk(i))->condition_ == nil) {
      return i->color_;
    }
    else if ([((FFTDataModelManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getDataModelManager])) checkConditionWithNSString:i->condition_ withNSString:dataModelPrefix]) {
      return i->color_;
    }
  }
  return nil;
}

- (FFTLayout *)getLayoutWithNSString:(NSString *)layoutId {
  return nil;
}

+ (NSString *)getStringPropertyWithNSString:(NSString *)key
                               withNSString:(NSString *)defaultValue
                        withFFTKeyValueList:(id<FFTKeyValueList>)properties {
  if (![((id<FFTKeyValueList>) nil_chk(properties)) containsWithNSString:key]) {
    return defaultValue;
  }
  else {
    return [properties getValueWithNSString:key];
  }
}

+ (JavaLangBoolean *)getBooleanPropertyWithNSString:(NSString *)key
                                        withBoolean:(BOOL)defaultValue
                                withFFTKeyValueList:(id<FFTKeyValueList>)properties {
  if (![((id<FFTKeyValueList>) nil_chk(properties)) containsWithNSString:key]) {
    return [JavaLangBoolean valueOfWithBoolean:defaultValue];
  }
  else {
    return [JavaLangBoolean valueOfWithBoolean:[((NSString *) nil_chk([properties getValueWithNSString:key])) equalsIgnoreCase:@"true"]];
  }
}

+ (JavaLangInteger *)getIntegerPropertyWithNSString:(NSString *)key
                                withJavaLangInteger:(JavaLangInteger *)defaultValue
                                withFFTKeyValueList:(id<FFTKeyValueList>)properties {
  if (![((id<FFTKeyValueList>) nil_chk(properties)) containsWithNSString:key]) {
    return defaultValue;
  }
  else {
    return [JavaLangInteger valueOfWithInt:[JavaLangInteger parseIntWithNSString:[properties getValueWithNSString:key]]];
  }
}

+ (JavaLangDouble *)getDoublePropertyWithNSString:(NSString *)key
                               withJavaLangDouble:(JavaLangDouble *)defaultValue
                              withFFTKeyValueList:(id<FFTKeyValueList>)properties {
  if (![((id<FFTKeyValueList>) nil_chk(properties)) containsWithNSString:key]) {
    return defaultValue;
  }
  else {
    return [JavaLangDouble valueOfWithDouble:[JavaLangDouble parseDoubleWithNSString:[properties getValueWithNSString:key]]];
  }
}

+ (NSString *)getFontFamilyNameWithNSString:(NSString *)key
                               withNSString:(NSString *)defaultValue
                        withFFTKeyValueList:(id<FFTKeyValueList>)properties {
  if (properties == nil || key == nil) {
    return nil;
  }
  if (![((id<FFTKeyValueList>) nil_chk(properties)) containsWithNSString:key]) {
    return defaultValue;
  }
  else {
    NSString *fontNameOrfontRefId = [properties getValueWithNSString:key];
    NSString *fontName = [((FFTViewManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getViewManager])) getFontFamilyNameWithNSString:fontNameOrfontRefId];
    if (fontName == nil) {
      fontName = fontNameOrfontRefId;
    }
    return fontName;
  }
}

+ (NSString *)getFontStyleWithNSString:(NSString *)key
                          withNSString:(NSString *)defaultValue
                   withFFTKeyValueList:(id<FFTKeyValueList>)properties {
  if (properties == nil || key == nil) {
    return nil;
  }
  if (![((id<FFTKeyValueList>) nil_chk(properties)) containsWithNSString:key]) {
    return defaultValue;
  }
  else {
    NSString *styleValueOrRefId = [properties getValueWithNSString:key];
    NSString *fontStyle = [((FFTViewManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getViewManager])) getFontStyleWithNSString:styleValueOrRefId];
    if (fontStyle == nil) {
      fontStyle = styleValueOrRefId;
    }
    return fontStyle;
  }
}

+ (JavaLangDouble *)getFontSizePropertyWithNSString:(NSString *)key
                                 withJavaLangDouble:(JavaLangDouble *)defaultValue
                                withFFTKeyValueList:(id<FFTKeyValueList>)properties {
  if (![((id<FFTKeyValueList>) nil_chk(properties)) containsWithNSString:key]) {
    return defaultValue;
  }
  else {
    NSString *size = [FFTViewBehavior getSizeFromLayoutVariablesOrSizesWithNSString:key withFFTKeyValueList:properties];
    return [JavaLangDouble valueOfWithDouble:[JavaLangDouble parseDoubleWithNSString:size]];
  }
}

+ (JavaLangDouble *)getSizePropertyWithNSString:(NSString *)key
                                   withNSString:(NSString *)defaultValue
                            withFFTKeyValueList:(id<FFTKeyValueList>)properties {
  if (![((id<FFTKeyValueList>) nil_chk(properties)) containsWithNSString:key]) {
    if (defaultValue == nil) {
      return nil;
    }
    else {
      return [JavaLangDouble valueOfWithDouble:[((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) sizeToPixelsWithNSString:defaultValue]];
    }
  }
  else {
    NSString *size = [FFTViewBehavior getSizeFromLayoutVariablesOrSizesWithNSString:key withFFTKeyValueList:properties];
    return [JavaLangDouble valueOfWithDouble:[((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) sizeToPixelsWithNSString:size]];
  }
}

+ (NSString *)getSizeFromLayoutVariablesOrSizesWithNSString:(NSString *)key
                                        withFFTKeyValueList:(id<FFTKeyValueList>)properties {
  NSString *size;
  id<FFTKeyValueList> kvl = [((id<FFTKeyValueList>) nil_chk(properties)) getWithValueWithNSString:@"layout-variables" withNSString:@"sizes"];
  if (kvl != nil && [kvl containsWithNSString:key]) {
    size = [kvl getValueWithNSString:key];
  }
  else {
    size = [((FFTViewManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getViewManager])) getSizeWithNSString:[properties getValueWithNSString:key]];
  }
  return size;
}

+ (JavaLangDouble *)getUnitsToPixelsPropertyWithNSString:(NSString *)key
                                      withJavaLangDouble:(JavaLangDouble *)defaultValue
                                     withFFTKeyValueList:(id<FFTKeyValueList>)properties {
  if (![((id<FFTKeyValueList>) nil_chk(properties)) containsWithNSString:key]) {
    return defaultValue;
  }
  else {
    return [JavaLangDouble valueOfWithDouble:[((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) unitsToPixelsWithDouble:[JavaLangDouble parseDoubleWithNSString:[properties getValueWithNSString:key]]]];
  }
}

- (FFTColor *)getColorPropertyWithNSString:(NSString *)key
                              withFFTColor:(FFTColor *)defaultValue
                       withFFTKeyValueList:(id<FFTKeyValueList>)properties {
  if (![((id<FFTKeyValueList>) nil_chk(properties)) containsWithNSString:key]) {
    return defaultValue;
  }
  else {
    return [((FFTViewManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getViewManager])) getColorWithNSString:[properties getValueWithNSString:key]];
  }
}

- (void)validateConstraintsWithFFTConstraints:(FFTConstraints *)c {
  if ([((FFTLength *) nil_chk([((FFTConstraints *) nil_chk(c)) getWidth])) compute] && ![self supportsWidthCompute]) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"compute width not supported for type"];
  }
  if ([((FFTLength *) nil_chk([c getHeight])) compute] && ![self supportsHeightCompute]) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"compute width not supported for type"];
  }
}

- (BOOL)supportsWidthCompute {
  return NO;
}

- (BOOL)supportsHeightCompute {
  return NO;
}

- (float)computeHeightWithBoolean:(BOOL)landscape
                     withNSString:(NSString *)dataModelPrefix
                      withFFTView:(FFTView *)view
                      withBoolean:(BOOL)useCache {
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Not implemented in %@", [self getClass]]];
}

- (void)precomputeViewPositionsWithBoolean:(BOOL)landscape
                              withNSString:(NSString *)precomputePrefix
                       withFFTViewPosition:(FFTViewPosition *)view
                              withNSString:(NSString *)viewPathPrefixView
                    withJavaUtilCollection:(id<JavaUtilCollection>)newViewPositions {
}

- (BOOL)isViewFactorySetsBackground {
  return NO;
}

- (BOOL)isShouldBePresentedToUI {
  return YES;
}

- (NSString *)getType {
  return self->type_;
}

- (JavaUtilArrayList *)getBackgroundColors {
  return self->backgroundColors_;
}

- (NSString *)getUnknownText {
  return self->unknownText_;
}

- (JavaLangInteger *)getCornerRadius {
  return self->cornerRadius_;
}

- (JavaLangDouble *)getBorderSize {
  return self->borderSize_;
}

- (FFTColor *)getBorderColor {
  return self->borderColor_;
}

- (void)copyAllFieldsTo:(FFTViewBehavior *)other {
  [super copyAllFieldsTo:other];
  other->backgroundColors_ = backgroundColors_;
  other->borderColor_ = borderColor_;
  other->borderSize_ = borderSize_;
  other->cornerRadius_ = cornerRadius_;
  other->type_ = type_;
  other->unknownText_ = unknownText_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withFFTKeyValueList:", "ViewBehavior", NULL, 0x4, NULL },
    { "parseKVLWithFFTKeyValueList:", "parseKVL", "V", 0x4, NULL },
    { "parseBackgroundColorsWithFFTKeyValueList:", "parseBackgroundColors", "V", 0x2, NULL },
    { "getBackgroundColorWithNSString:", "getBackgroundColor", "Lcom.sponberg.fluid.layout.Color;", 0x1, NULL },
    { "getLayoutWithNSString:", "getLayout", "Lcom.sponberg.fluid.layout.Layout;", 0x1, NULL },
    { "getStringPropertyWithNSString:withNSString:withFFTKeyValueList:", "getStringProperty", "Ljava.lang.String;", 0x9, NULL },
    { "getBooleanPropertyWithNSString:withBoolean:withFFTKeyValueList:", "getBooleanProperty", "Ljava.lang.Boolean;", 0x9, NULL },
    { "getIntegerPropertyWithNSString:withJavaLangInteger:withFFTKeyValueList:", "getIntegerProperty", "Ljava.lang.Integer;", 0x9, NULL },
    { "getDoublePropertyWithNSString:withJavaLangDouble:withFFTKeyValueList:", "getDoubleProperty", "Ljava.lang.Double;", 0x9, NULL },
    { "getFontFamilyNameWithNSString:withNSString:withFFTKeyValueList:", "getFontFamilyName", "Ljava.lang.String;", 0x9, NULL },
    { "getFontStyleWithNSString:withNSString:withFFTKeyValueList:", "getFontStyle", "Ljava.lang.String;", 0x9, NULL },
    { "getFontSizePropertyWithNSString:withJavaLangDouble:withFFTKeyValueList:", "getFontSizeProperty", "Ljava.lang.Double;", 0x9, NULL },
    { "getSizePropertyWithNSString:withNSString:withFFTKeyValueList:", "getSizeProperty", "Ljava.lang.Double;", 0x9, NULL },
    { "getSizeFromLayoutVariablesOrSizesWithNSString:withFFTKeyValueList:", "getSizeFromLayoutVariablesOrSizes", "Ljava.lang.String;", 0xa, NULL },
    { "getUnitsToPixelsPropertyWithNSString:withJavaLangDouble:withFFTKeyValueList:", "getUnitsToPixelsProperty", "Ljava.lang.Double;", 0x9, NULL },
    { "getColorPropertyWithNSString:withFFTColor:withFFTKeyValueList:", "getColorProperty", "Lcom.sponberg.fluid.layout.Color;", 0x1, NULL },
    { "validateConstraintsWithFFTConstraints:", "validateConstraints", "V", 0x1, NULL },
    { "supportsWidthCompute", NULL, "Z", 0x4, NULL },
    { "supportsHeightCompute", NULL, "Z", 0x4, NULL },
    { "computeHeightWithBoolean:withNSString:withFFTView:withBoolean:", "computeHeight", "F", 0x1, NULL },
    { "precomputeViewPositionsWithBoolean:withNSString:withFFTViewPosition:withNSString:withJavaUtilCollection:", "precomputeViewPositions", "V", 0x1, NULL },
    { "isViewFactorySetsBackground", NULL, "Z", 0x1, NULL },
    { "isShouldBePresentedToUI", NULL, "Z", 0x1, NULL },
    { "getType", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getBackgroundColors", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "getUnknownText", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getCornerRadius", NULL, "Ljava.lang.Integer;", 0x1, NULL },
    { "getBorderSize", NULL, "Ljava.lang.Double;", 0x1, NULL },
    { "getBorderColor", NULL, "Lcom.sponberg.fluid.layout.Color;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "label_", NULL, 0x19, "Ljava.lang.String;", &FFTViewBehavior_label_,  },
    { "button_", NULL, 0x19, "Ljava.lang.String;", &FFTViewBehavior_button_,  },
    { "image_", NULL, 0x19, "Ljava.lang.String;", &FFTViewBehavior_image_,  },
    { "table_", NULL, 0x19, "Ljava.lang.String;", &FFTViewBehavior_table_,  },
    { "space_", NULL, 0x19, "Ljava.lang.String;", &FFTViewBehavior_space_,  },
    { "subview_", NULL, 0x19, "Ljava.lang.String;", &FFTViewBehavior_subview_,  },
    { "subviewRepeat_", NULL, 0x19, "Ljava.lang.String;", &FFTViewBehavior_subviewRepeat_,  },
    { "webview_", NULL, 0x19, "Ljava.lang.String;", &FFTViewBehavior_webview_,  },
    { "urlWebview_", NULL, 0x19, "Ljava.lang.String;", &FFTViewBehavior_urlWebview_,  },
    { "textfield_", NULL, 0x19, "Ljava.lang.String;", &FFTViewBehavior_textfield_,  },
    { "searchbar_", NULL, 0x19, "Ljava.lang.String;", &FFTViewBehavior_searchbar_,  },
    { "segmentedControl_", NULL, 0x19, "Ljava.lang.String;", &FFTViewBehavior_segmentedControl_,  },
    { "type_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
    { "backgroundColors_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "unknownText_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "cornerRadius_", NULL, 0x4, "Ljava.lang.Integer;", NULL,  },
    { "borderSize_", NULL, 0x2, "Ljava.lang.Double;", NULL,  },
    { "borderColor_", NULL, 0x2, "Lcom.sponberg.fluid.layout.Color;", NULL,  },
  };
  static J2ObjcClassInfo _FFTViewBehavior = { "ViewBehavior", "com.sponberg.fluid.layout", NULL, 0x401, 29, methods, 18, fields, 0, NULL};
  return &_FFTViewBehavior;
}

@end

@implementation FFTViewBehavior_ColorWithCondition

- (id)init {
  return [super init];
}

- (void)copyAllFieldsTo:(FFTViewBehavior_ColorWithCondition *)other {
  [super copyAllFieldsTo:other];
  other->color_ = color_;
  other->condition_ = condition_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "color_", NULL, 0x0, "Lcom.sponberg.fluid.layout.Color;", NULL,  },
    { "condition_", NULL, 0x0, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _FFTViewBehavior_ColorWithCondition = { "ColorWithCondition", "com.sponberg.fluid.layout", "ViewBehavior", 0x9, 1, methods, 2, fields, 0, NULL};
  return &_FFTViewBehavior_ColorWithCondition;
}

@end
