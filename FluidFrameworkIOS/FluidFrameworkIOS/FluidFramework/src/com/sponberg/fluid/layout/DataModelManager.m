//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/layout/DataModelManager.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/sponberg/fluid/FluidApp.h"
#include "com/sponberg/fluid/GlobalState.h"
#include "com/sponberg/fluid/SystemService.h"
#include "com/sponberg/fluid/layout/DataChangeListener.h"
#include "com/sponberg/fluid/layout/DataModelManager.h"
#include "com/sponberg/fluid/layout/TableList.h"
#include "com/sponberg/fluid/layout/TableRowWithId.h"
#include "com/sponberg/fluid/util/LRUCacheTree.h"
#include "com/sponberg/fluid/util/MethodUtil.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Method.h"
#include "java/text/MessageFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Properties.h"

@implementation FFTDataModelManager

NSString * FFTDataModelManager_kEqual_ = @"==";
NSString * FFTDataModelManager_kNotEqual_ = @"!=";

- (void)checkOnMainThread {
  if (![((id<FFTSystemService>) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getSystemService])) isOnUiThread]) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Not called on main thread"];
  }
}

- (void)setDataModelWithNSString:(NSString *)key
                          withId:(id)dataModel {
  [self checkOnMainThread];
  (void) [((JavaUtilHashMap *) nil_chk(dataModels_)) putWithId:key withId:dataModel];
}

- (id)getDataModelWithNSString:(NSString *)key {
  return [((JavaUtilHashMap *) nil_chk(dataModels_)) getWithId:key];
}

- (NSString *)getValueWithNSString:(NSString *)prefix
                      withNSString:(NSString *)keys
                      withNSString:(NSString *)messageFormat
                      withNSString:(NSString *)defaultText {
  if (keys == nil) {
    return defaultText;
  }
  if (prefix == nil) {
    prefix = @"";
  }
  else {
    prefix = [NSString stringWithFormat:@"%@.", prefix];
  }
  IOSObjectArray *keyA = [((NSString *) nil_chk(keys)) split:@","];
  if (messageFormat == nil && (int) [((IOSObjectArray *) nil_chk(keyA)) count] > 1) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"If passing in multiple keys, messageFormat must be specified"];
  }
  IOSObjectArray *values = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(keyA)) count] type:[IOSClass classWithClass:[NSObject class]]];
  for (int index = 0; index < (int) [keyA count]; index++) {
    NSString *key = [FFTDataModelManager makeKeyWithNSString:prefix withNSString:IOSObjectArray_Get(keyA, index)];
    (void) IOSObjectArray_Set(values, index, [self getValueHelperWithNSString:key]);
  }
  BOOL oneIsNull = NO;
  for (int index = 0; index < (int) [keyA count]; index++) {
    if (IOSObjectArray_Get(values, index) == nil) {
      oneIsNull = YES;
      break;
    }
  }
  if (oneIsNull) {
    return defaultText;
  }
  if (messageFormat == nil) {
    return [IOSObjectArray_Get(values, 0) description];
  }
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] init];
  JavaTextMessageFormat *mf = [[JavaTextMessageFormat alloc] initWithNSString:messageFormat];
  (void) [mf formatWithNSObjectArray:values withJavaLangStringBuffer:buf withJavaTextFieldPosition:nil];
  return [buf description];
}

+ (NSString *)makeKeyWithNSString:(NSString *)prefix
                     withNSString:(NSString *)oneKey {
  if ([((NSString *) nil_chk(oneKey)) hasPrefix:@"/"]) {
    return [oneKey substring:1];
  }
  NSString *key = [NSString stringWithFormat:@"%@%@", prefix, [oneKey trim]];
  while ([key hasSuffix:@"."]) {
    key = [key substring:0 endIndex:((int) [key length]) - 1];
  }
  return key;
}

- (id)getValueHelperWithNSString:(NSString *)key {
  IOSObjectArray *tokens = [self tokenizeWithNSString:key];
  BOOL hasParameter = FFTFluidApp_useCaching && [self hasParameterWithNSString:key];
  id v;
  if (FFTFluidApp_useCaching && !hasParameter) {
    v = [((FFTLRUCacheTree *) nil_chk(cache_)) getWithNSStringArray:[self tokensWithoutParameterWithNSStringArray:tokens]];
    if (v != nil) {
      return v;
    }
  }
  v = [self getValueWithId:[self getDataModelWithNSString:IOSObjectArray_Get(nil_chk(tokens), 0)] withNSStringArray:tokens withInt:1];
  if (FFTFluidApp_useCaching && !hasParameter) {
    [((FFTLRUCacheTree *) nil_chk(cache_)) putWithNSStringArray:[self tokensWithoutParameterWithNSStringArray:tokens] withId:v];
  }
  return v;
}

- (BOOL)hasParameterWithNSString:(NSString *)key {
  return [((NSString *) nil_chk(key)) contains:@"("];
}

- (IOSObjectArray *)tokenizeWithNSString:(NSString *)key {
  int i = [((NSString *) nil_chk(key)) indexOfString:@"("];
  int i2 = -1;
  if (i != -1) {
    i2 = [key indexOfString:@")" fromIndex:i];
  }
  else {
    return [key split:@"\\."];
  }
  JavaUtilArrayList *tokens = [[JavaUtilArrayList alloc] init];
  NSString *prefix = [key substring:0 endIndex:i + 1];
  NSString *parameter = [key substring:i + 1 endIndex:i2];
  NSString *suffix = [key substring:i2 + 1];
  {
    IOSObjectArray *a__ = [((NSString *) nil_chk(prefix)) split:@"\\."];
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *s = (*b__++);
      [tokens addWithId:s];
    }
  }
  NSString *temp = [NSString stringWithFormat:@"%@%@)", [tokens getWithInt:[tokens size] - 1], parameter];
  (void) [tokens setWithInt:[tokens size] - 1 withId:temp];
  if (((int) [((NSString *) nil_chk(suffix)) length]) > 0) {
    {
      IOSObjectArray *a__ = [((NSString *) nil_chk([suffix substring:1])) split:@"\\."];
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *s = (*b__++);
        [tokens addWithId:s];
      }
    }
  }
  return [tokens toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[tokens size] type:[IOSClass classWithClass:[NSString class]]]];
}

- (id)getObjectWithNSString:(NSString *)key {
  IOSObjectArray *tokens = [self tokenizeWithNSString:key];
  return [self getValueWithId:[self getDataModelWithNSString:IOSObjectArray_Get(nil_chk(tokens), 0)] withNSStringArray:tokens withInt:1];
}

- (id<JavaUtilList>)getValueListWithNSString:(NSString *)key {
  return [self getValueListWithNSString:nil withNSString:key];
}

- (id<JavaUtilList>)getValueListWithNSString:(NSString *)prefix
                                withNSString:(NSString *)key {
  if (prefix == nil) {
    prefix = @"";
  }
  else {
    prefix = [NSString stringWithFormat:@"%@.", prefix];
  }
  if (key == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"key may not be null"];
  }
  key = [NSString stringWithFormat:@"%@%@", prefix, key];
  IOSObjectArray *tokens = [self tokenizeWithNSString:key];
  id value = [self getValueWithId:[self getDataModelWithNSString:IOSObjectArray_Get(nil_chk(tokens), 0)] withNSStringArray:tokens withInt:1];
  if ([value isKindOfClass:[FFTTableList class]]) {
    return [((FFTTableList *) nil_chk(((FFTTableList *) check_class_cast(value, [FFTTableList class])))) getRows];
  }
  else if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]] isInstance:value]) {
    return [JavaUtilArrays asListWithNSObjectArray:(IOSObjectArray *) check_class_cast(value, [IOSObjectArray class])];
  }
  else {
    return (id<JavaUtilList>) check_protocol_cast(value, @protocol(JavaUtilList));
  }
}

- (id)getValueWithId:(id)value
   withNSStringArray:(IOSObjectArray *)tokens
             withInt:(int)token {
  if (value == nil) {
    return nil;
  }
  BOOL finalToken = NO;
  BOOL onlyRootToken = NO;
  if (token == (int) [((IOSObjectArray *) nil_chk(tokens)) count]) {
    finalToken = YES;
    onlyRootToken = YES;
  }
  else if (token == (int) [tokens count] - 1) {
    finalToken = YES;
  }
  if (!onlyRootToken) {
    value = [self getValueReflectiveWithId:value withNSString:IOSObjectArray_Get(tokens, token)];
  }
  if (finalToken) {
    return value;
  }
  else {
    return [self getValueWithId:value withNSStringArray:tokens withInt:token + 1];
  }
}

- (id)getValueReflectiveWithId:(id)object
                  withNSString:(NSString *)key {
  @try {
    NSString *parameter = nil;
    int i = [((NSString *) nil_chk(key)) indexOfString:@"("];
    if (i != -1) {
      parameter = [key substring:i + 1 endIndex:((int) [key length]) - 1];
      key = [key substring:0 endIndex:i];
    }
    if (parameter != nil) {
      if (([parameter hasPrefix:@"\""] && [parameter hasSuffix:@"\""]) || ([parameter hasPrefix:@"'"] && [parameter hasSuffix:@"'"])) {
        parameter = [parameter substring:1 endIndex:((int) [parameter length]) - 1];
      }
      else {
        parameter = [nil_chk([self getValueHelperWithNSString:parameter]) description];
      }
    }
    return [FFTDataModelManager getValueReflectiveHelperWithId:object withNSString:key withNSString:parameter];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return nil;
  }
}

+ (id)getValueReflectiveHelperWithId:(id)object
                        withNSString:(NSString *)key
                        withNSString:(NSString *)parameter {
  if ([object isKindOfClass:[FFTTableList class]]) {
    return [((FFTTableList *) nil_chk(((FFTTableList *) check_class_cast(object, [FFTTableList class])))) getByIdWithJavaLangLong:[JavaLangLong valueOfWithLong:[JavaLangLong parseLongWithNSString:key]]];
  }
  else if ([object conformsToProtocol: @protocol(JavaUtilList)]) {
    return [((id<JavaUtilList>) nil_chk(((id<JavaUtilList>) check_protocol_cast(object, @protocol(JavaUtilList))))) getWithInt:[JavaLangInteger parseIntWithNSString:key]];
  }
  else if ([[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]] isInstance:object]) {
    return IOSObjectArray_Get(nil_chk(((IOSObjectArray *) check_class_cast(object, [IOSObjectArray class]))), [JavaLangInteger parseIntWithNSString:key]);
  }
  else {
    JavaLangReflectMethod *m = nil;
    @try {
      if (parameter != nil) {
        m = [FFTMethodUtil getGetterMethodWithStringParameterWithIOSClass:[nil_chk(object) getClass] withNSString:key];
      }
      else {
        m = [FFTMethodUtil getGetterMethodWithIOSClass:[nil_chk(object) getClass] withNSString:key];
      }
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
    }
    if (m == nil) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Data model does not contain getter for %@", key]];
    }
    NSString *javaRuntime = [((JavaUtilProperties *) nil_chk([JavaLangSystem getProperties])) getPropertyWithNSString:@"java.runtime.name"];
    if (javaRuntime != nil || !FFTDataModelManager_kUseObjNativeCall) {
      if (parameter != nil) {
        return [((JavaLangReflectMethod *) nil_chk(m)) invokeWithId:object withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ parameter } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
      }
      else {
        return [((JavaLangReflectMethod *) nil_chk(m)) invokeWithId:object withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
      }
    }
    else {
      return [FFTDataModelManager invokeIOSNativeSendMessageWithJavaLangReflectMethod:m withId:object withNSString:parameter];
    }
  }
}

+ (id)invokeIOSNativeSendMessageWithJavaLangReflectMethod:(JavaLangReflectMethod *)m
                                                   withId:(id)object
                                             withNSString:(NSString *)parameter {
  NSString *methodName = [m internalName];
  SEL selector = NSSelectorFromString(methodName);
  
  id ret;
  if ([methodName rangeOfString:@":"].location == NSNotFound) {
    id (*response)(id, SEL) = (id (*)(id, SEL)) objc_msgSend;
    ret = response(object, selector);
  } else {
    id (*response)(id, SEL, id) = (id (*)(id, SEL, id)) objc_msgSend;
    ret = response(object, selector, parameter);
  }
  return ret;
}

- (void)setValueWithNSString:(NSString *)prefix
                withNSString:(NSString *)key
                      withId:(id)toValue {
  if (prefix == nil) {
    prefix = @"";
  }
  else {
    prefix = [NSString stringWithFormat:@"%@.", prefix];
  }
  key = [NSString stringWithFormat:@"%@%@", prefix, key];
  IOSObjectArray *tokens = [self tokenizeWithNSString:key];
  IOSObjectArray *getterTokens = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(tokens)) count] - 1 type:[IOSClass classWithClass:[NSString class]]];
  for (int index = 0; index < (int) [getterTokens count]; index++) {
    (void) IOSObjectArray_Set(getterTokens, index, IOSObjectArray_Get(tokens, index));
  }
  id object = [self getValueWithId:[self getDataModelWithNSString:IOSObjectArray_Get(getterTokens, 0)] withNSStringArray:getterTokens withInt:1];
  [FFTDataModelManager setValueReflectiveWithId:object withNSString:IOSObjectArray_Get(tokens, (int) [tokens count] - 1) withId:toValue];
}

+ (void)setValueReflectiveWithId:(id)object
                    withNSString:(NSString *)key
                          withId:(id)value {
  @try {
    [FFTDataModelManager setValueReflectiveHelperWithId:object withNSString:key withId:value];
  }
  @catch (JavaLangException *e) {
    @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:e];
  }
}

+ (void)setValueReflectiveHelperWithId:(id)object
                          withNSString:(NSString *)key
                                withId:(id)value {
  if ([object conformsToProtocol: @protocol(JavaUtilList)]) {
    id<JavaUtilList> l = (id<JavaUtilList>) check_protocol_cast(object, @protocol(JavaUtilList));
    (void) [((id<JavaUtilList>) nil_chk(l)) setWithInt:[JavaLangInteger parseIntWithNSString:key] withId:value];
  }
  else {
    JavaLangReflectMethod *m = nil;
    @try {
      m = [FFTMethodUtil getSetterMethodWithIOSClass:[nil_chk(object) getClass] withNSString:key withIOSClass:[nil_chk(value) getClass]];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
    }
    if (m == nil) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Data model does not contain setter for %@", key]];
    }
    NSString *javaRuntime = [((JavaUtilProperties *) nil_chk([JavaLangSystem getProperties])) getPropertyWithNSString:@"java.runtime.name"];
    if (javaRuntime != nil || !FFTDataModelManager_kUseObjNativeCall) {
      (void) [((JavaLangReflectMethod *) nil_chk(m)) invokeWithId:object withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ value } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    }
    else {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Not supported"];
    }
  }
}

- (void)addDataChangeListenerWithNSString:(NSString *)prefix
                             withNSString:(NSString *)keys
                             withNSString:(NSString *)listenerId
                withFFTDataChangeListener:(id<FFTDataChangeListener>)dataChangeListener {
  [self addDataChangeListenerWithNSString:prefix withNSString:keys withNSString:listenerId withBoolean:NO withFFTDataChangeListener:dataChangeListener];
}

- (void)addDataChangeListenerWithNSString:(NSString *)prefix
                             withNSString:(NSString *)keys
                             withNSString:(NSString *)listenerId
                              withBoolean:(BOOL)listenForChildren
                withFFTDataChangeListener:(id<FFTDataChangeListener>)dataChangeListener {
  if (prefix == nil || [prefix isEmpty]) {
    prefix = @"";
  }
  else {
    prefix = [NSString stringWithFormat:@"%@.", prefix];
  }
  IOSObjectArray *keyA = [((NSString *) nil_chk(keys)) split:@","];
  {
    IOSObjectArray *a__ = keyA;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *k = (*b__++);
      k = [self withoutParameterWithNSString:k];
      NSString *key = [FFTDataModelManager makeKeyWithNSString:prefix withNSString:k];
      [self addDataChangeListenerWithNSString:key withNSString:listenerId withBoolean:listenForChildren withFFTDataChangeListener:dataChangeListener];
    }
  }
}

- (NSString *)withoutParameterWithNSString:(NSString *)k {
  int i = [((NSString *) nil_chk(k)) indexOfString:@"("];
  if (i != -1) {
    k = [k substring:0 endIndex:i];
  }
  return k;
}

- (IOSObjectArray *)tokensWithoutParameterWithNSStringArray:(IOSObjectArray *)tokens {
  IOSObjectArray *t = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(tokens)) count] type:[IOSClass classWithClass:[NSString class]]];
  for (int index = 0; index < (int) [tokens count]; index++) {
    (void) IOSObjectArray_Set(t, index, [self withoutParameterWithNSString:IOSObjectArray_Get(tokens, index)]);
  }
  return t;
}

+ (NSString *)getFullKeyWithNSString:(NSString *)prefix
                        withNSString:(NSString *)key {
  if (prefix == nil || [prefix isEmpty]) {
    prefix = @"";
  }
  else {
    prefix = [NSString stringWithFormat:@"%@.", prefix];
  }
  return [FFTDataModelManager makeKeyWithNSString:prefix withNSString:key];
}

- (void)addDataChangeListenerWithNSString:(NSString *)key
                             withNSString:(NSString *)listenerId
                withFFTDataChangeListener:(id<FFTDataChangeListener>)dataChangeListener {
  [self addDataChangeListenerWithNSString:key withNSString:listenerId withBoolean:NO withFFTDataChangeListener:dataChangeListener];
}

- (void)addDataChangeListenerWithNSString:(NSString *)key
                             withNSString:(NSString *)listenerId
                              withBoolean:(BOOL)listenForChildren
                withFFTDataChangeListener:(id<FFTDataChangeListener>)dataChangeListener {
  FFTDataModelManager_DataChangeListenerWrapper *dclWrapper = [[FFTDataModelManager_DataChangeListenerWrapper alloc] init];
  dclWrapper->listener_ = dataChangeListener;
  dclWrapper->dataChangeListenerId_ = listenerId;
  dclWrapper->listenForChildren_ = listenForChildren;
  key = [FFTDataModelManager makeKeyWithNSString:@"" withNSString:key];
  IOSObjectArray *tokens = [((NSString *) nil_chk(key)) split:@"\\."];
  [self addDataChangeListenerHelperWithJavaUtilHashMap:dataChangeListeners_ withNSStringArray:tokens withInt:0 withFFTDataModelManager_DataChangeListenerWrapper:dclWrapper];
  (void) [((JavaUtilHashMap *) nil_chk(listenersEnabled_)) putWithId:listenerId withId:[JavaLangBoolean valueOfWithBoolean:YES]];
}

- (void)addDataChangeListenerHelperWithJavaUtilHashMap:(JavaUtilHashMap *)dataChangeListeners
                                     withNSStringArray:(IOSObjectArray *)tokens
                                               withInt:(int)index
     withFFTDataModelManager_DataChangeListenerWrapper:(FFTDataModelManager_DataChangeListenerWrapper *)dataChangeListener {
  FFTDataModelManager_DataChangeListenerGroup *group = [((JavaUtilHashMap *) nil_chk(dataChangeListeners)) getWithId:IOSObjectArray_Get(nil_chk(tokens), index)];
  if (group == nil) {
    group = [[FFTDataModelManager_DataChangeListenerGroup alloc] init];
    (void) [dataChangeListeners putWithId:IOSObjectArray_Get(tokens, index) withId:group];
  }
  if (index == (int) [tokens count] - 1) {
    [((JavaUtilArrayList *) nil_chk(((FFTDataModelManager_DataChangeListenerGroup *) nil_chk(group))->listeners_)) addWithId:dataChangeListener];
  }
  else {
    [self addDataChangeListenerHelperWithJavaUtilHashMap:((FFTDataModelManager_DataChangeListenerGroup *) nil_chk(group))->listenerGroups_ withNSStringArray:tokens withInt:index + 1 withFFTDataModelManager_DataChangeListenerWrapper:dataChangeListener];
  }
}

- (void)removeDataChangeListenersForChildrenOfWithNSString:(NSString *)key {
  [self removeDataChangeListenersForWithNSString:key withBoolean:NO withBoolean:YES];
}

- (void)removeDataChangeListenersForWithNSString:(NSString *)key
                                     withBoolean:(BOOL)includeChildren {
  [self removeDataChangeListenersForWithNSString:key withBoolean:YES withBoolean:includeChildren];
}

- (void)removeDataChangeListenersForWithNSString:(NSString *)key
                                     withBoolean:(BOOL)includeExact
                                     withBoolean:(BOOL)includeChildren {
  [self checkOnMainThread];
  IOSObjectArray *tokens = [((NSString *) nil_chk(key)) split:@"\\."];
  [self removeDataChangeListenersForHelperWithJavaUtilHashMap:dataChangeListeners_ withNSStringArray:tokens withInt:0 withBoolean:includeExact withBoolean:includeChildren];
}

- (void)removeDataChangeListenersForHelperWithJavaUtilHashMap:(JavaUtilHashMap *)dataChangeListeners
                                            withNSStringArray:(IOSObjectArray *)tokens
                                                      withInt:(int)index
                                                  withBoolean:(BOOL)includeExact
                                                  withBoolean:(BOOL)includeChildren {
  FFTDataModelManager_DataChangeListenerGroup *group = [((JavaUtilHashMap *) nil_chk(dataChangeListeners)) getWithId:IOSObjectArray_Get(nil_chk(tokens), index)];
  if (group == nil) {
    return;
  }
  if (index == (int) [tokens count] - 1) {
    [((FFTDataModelManager_DataChangeListenerGroup *) nil_chk(group)) removeListenersRecursiveWithBoolean:includeExact withBoolean:includeChildren];
  }
  else {
    [self removeDataChangeListenersForHelperWithJavaUtilHashMap:((FFTDataModelManager_DataChangeListenerGroup *) nil_chk(group))->listenerGroups_ withNSStringArray:tokens withInt:index + 1 withBoolean:includeExact withBoolean:includeChildren];
  }
}

- (void)removeDataChangeListenerWithNSString:(NSString *)listenerId {
  [self checkOnMainThread];
  for (FFTDataModelManager_DataChangeListenerGroup * __strong group in nil_chk([((JavaUtilHashMap *) nil_chk(dataChangeListeners_)) values])) {
    [self removeDataChangeListenerHelperWithFFTDataModelManager_DataChangeListenerGroup:group withNSString:listenerId];
  }
  (void) [((JavaUtilHashMap *) nil_chk(listenersEnabled_)) removeWithId:listenerId];
}

- (void)removeDataChangeListenerHelperWithFFTDataModelManager_DataChangeListenerGroup:(FFTDataModelManager_DataChangeListenerGroup *)group
                                                                         withNSString:(NSString *)listenerId {
  for (id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(((FFTDataModelManager_DataChangeListenerGroup *) nil_chk(group))->listeners_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    if ([((NSString *) nil_chk(((FFTDataModelManager_DataChangeListenerWrapper *) nil_chk([i next]))->dataChangeListenerId_)) isEqual:listenerId]) {
      [i remove];
    }
  }
  for (FFTDataModelManager_DataChangeListenerGroup * __strong g in nil_chk([((JavaUtilHashMap *) nil_chk(group->listenerGroups_)) values])) {
    [self removeDataChangeListenerHelperWithFFTDataModelManager_DataChangeListenerGroup:g withNSString:listenerId];
  }
}

- (void)dataDidChangeWithNSString:(NSString *)key
                withNSStringArray:(IOSObjectArray *)subKeys {
  [self dataDidChangeWithBoolean:NO withBoolean:YES withNSString:key withNSStringArray:subKeys];
}

- (void)dataDidChangeWithBoolean:(BOOL)notifyListeners
                    withNSString:(NSString *)key
               withNSStringArray:(IOSObjectArray *)subKeys {
  [self dataDidChangeWithBoolean:NO withBoolean:notifyListeners withNSString:key withNSStringArray:subKeys];
}

- (void)dataWasRemovedWithNSString:(NSString *)key {
  [self dataDidChangeWithBoolean:YES withBoolean:YES withNSString:key withNSStringArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]]];
  [self removeDataChangeListenersForWithNSString:key withBoolean:YES];
}

- (void)dataDidChangeWithBoolean:(BOOL)removed
                     withBoolean:(BOOL)notifyListeners
                    withNSString:(NSString *)key
               withNSStringArray:(IOSObjectArray *)subKeys {
  [self checkOnMainThread];
  JavaUtilHashSet *dclWrappers = [[JavaUtilHashSet alloc] init];
  IOSObjectArray *tokens = [((NSString *) nil_chk(key)) split:@"\\."];
  IOSObjectArray *tokensWithoutParameter = [self tokensWithoutParameterWithNSStringArray:tokens];
  if ((int) [((IOSObjectArray *) nil_chk(subKeys)) count] == 0) {
    [((FFTLRUCacheTree *) nil_chk(cache_)) removeWithNSStringArray:tokensWithoutParameter];
  }
  else {
    IOSObjectArray *keyChain = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(tokens)) count] + 1 type:[IOSClass classWithClass:[NSString class]]];
    [JavaLangSystem arraycopyWithId:tokens withInt:0 withId:keyChain withInt:0 withInt:(int) [tokens count]];
    {
      IOSObjectArray *a__ = subKeys;
      NSString * const *b__ = a__->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *subkey = (*b__++);
        (void) IOSObjectArray_Set(keyChain, (int) [keyChain count] - 1, subkey);
        [((FFTLRUCacheTree *) nil_chk(cache_)) removeWithNSStringArray:tokensWithoutParameter];
      }
    }
  }
  if (!notifyListeners) {
    return;
  }
  [self dataDidChangeHelperWithJavaUtilHashMap:dataChangeListeners_ withNSStringArray:tokens withInt:0 withNSStringArray:subKeys withJavaUtilHashSet:dclWrappers];
  for (FFTDataModelManager_DataChangeListenerWrapper * __strong dclWrapper in dclWrappers) {
    JavaLangBoolean *enabled = [((JavaUtilHashMap *) nil_chk(listenersEnabled_)) getWithId:((FFTDataModelManager_DataChangeListenerWrapper *) nil_chk(dclWrapper))->dataChangeListenerId_];
    if (enabled != nil && [enabled booleanValue]) {
      if (removed) {
        [((id<FFTDataChangeListener>) nil_chk(dclWrapper->listener_)) dataRemovedWithNSString:key];
      }
      else {
        [((id<FFTDataChangeListener>) nil_chk(dclWrapper->listener_)) dataChangedWithNSString:key withNSStringArray:subKeys];
      }
    }
  }
}

- (void)dataDidChangeHelperWithJavaUtilHashMap:(JavaUtilHashMap *)dataChangeListeners
                             withNSStringArray:(IOSObjectArray *)tokens
                                       withInt:(int)index
                             withNSStringArray:(IOSObjectArray *)subKeys
                           withJavaUtilHashSet:(JavaUtilHashSet *)listeners {
  FFTDataModelManager_DataChangeListenerGroup *group = [((JavaUtilHashMap *) nil_chk(dataChangeListeners)) getWithId:IOSObjectArray_Get(nil_chk(tokens), index)];
  if (group == nil) {
    return;
  }
  if (index == (int) [tokens count] - 1) {
    if ((int) [((IOSObjectArray *) nil_chk(subKeys)) count] > 0) {
      {
        IOSObjectArray *a__ = subKeys;
        NSString * const *b__ = a__->buffer_;
        NSString * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          NSString *subkey = (*b__++);
          if ([((JavaUtilHashMap *) nil_chk(((FFTDataModelManager_DataChangeListenerGroup *) nil_chk(group))->listenerGroups_)) getWithId:subkey] == nil) {
            [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:[NSString stringWithFormat:@"Warning: subkey: %@ not a property of %@", subkey, IOSObjectArray_Get(tokens, index)]];
            continue;
          }
          FFTDataModelManager_DataChangeListenerGroup *listenerGroup = [group->listenerGroups_ getWithId:subkey];
          if (listenerGroup != nil) {
            [listenerGroup addListenersRecursiveWithJavaUtilHashSet:listeners];
          }
        }
      }
    }
    else {
      [((FFTDataModelManager_DataChangeListenerGroup *) nil_chk(group)) addListenersRecursiveWithJavaUtilHashSet:listeners];
    }
  }
  else {
    for (FFTDataModelManager_DataChangeListenerWrapper * __strong wrapper in nil_chk(((FFTDataModelManager_DataChangeListenerGroup *) nil_chk(group))->listeners_)) {
      if (((FFTDataModelManager_DataChangeListenerWrapper *) nil_chk(wrapper))->listenForChildren_) {
        [((JavaUtilHashSet *) nil_chk(listeners)) addWithId:wrapper];
      }
    }
    [self dataDidChangeHelperWithJavaUtilHashMap:group->listenerGroups_ withNSStringArray:tokens withInt:index + 1 withNSStringArray:subKeys withJavaUtilHashSet:listeners];
  }
}

- (void)enableDataChangeListenerWithNSString:(NSString *)listenerId {
  [self checkOnMainThread];
  (void) [((JavaUtilHashMap *) nil_chk(listenersEnabled_)) putWithId:listenerId withId:[JavaLangBoolean valueOfWithBoolean:YES]];
}

- (void)disableDataChangeListenerWithNSString:(NSString *)listenerId {
  [self checkOnMainThread];
  (void) [((JavaUtilHashMap *) nil_chk(listenersEnabled_)) putWithId:listenerId withId:[JavaLangBoolean valueOfWithBoolean:NO]];
}

- (id<JavaUtilList>)getConditionalKeysWithNSString:(NSString *)fluidConditionSyntax
                                      withNSString:(NSString *)dataModelPrefix {
  JavaUtilArrayList *conditionalKeys = [[JavaUtilArrayList alloc] init];
  [self checkConditionWithNSString:fluidConditionSyntax withNSString:dataModelPrefix withJavaUtilCollection:conditionalKeys];
  return conditionalKeys;
}

- (BOOL)checkConditionWithNSString:(NSString *)fluidConditionSyntax
                      withNSString:(NSString *)dataModelPrefix {
  return [self checkConditionWithNSString:fluidConditionSyntax withNSString:dataModelPrefix withJavaUtilCollection:nil];
}

- (BOOL)checkConditionWithNSString:(NSString *)fluidConditionSyntax
                      withNSString:(NSString *)dataModelPrefix
            withJavaUtilCollection:(id<JavaUtilCollection>)conditionalKeys {
  IOSObjectArray *conditions = [((NSString *) nil_chk(fluidConditionSyntax)) split:@"&&"];
  BOOL result = YES;
  {
    IOSObjectArray *a__ = conditions;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *condition = (*b__++);
      result &= [self checkIndividualConditionWithNSString:[((NSString *) nil_chk(condition)) trim] withNSString:dataModelPrefix withJavaUtilCollection:conditionalKeys];
    }
  }
  return result;
}

- (BOOL)checkIndividualConditionWithNSString:(NSString *)fluidConditionSyntax
                                withNSString:(NSString *)dataModelPrefix
                      withJavaUtilCollection:(id<JavaUtilCollection>)conditionalKeys {
  IOSObjectArray *tokens = [((NSString *) nil_chk(fluidConditionSyntax)) split:@" "];
  if (dataModelPrefix == nil) {
    dataModelPrefix = @"";
  }
  else if (![dataModelPrefix hasSuffix:@"."]) {
    dataModelPrefix = [NSString stringWithFormat:@"%@.", dataModelPrefix];
  }
  NSString *sideA;
  NSString *operator_;
  NSString *sideB;
  if ((int) [((IOSObjectArray *) nil_chk(tokens)) count] == 1) {
    operator_ = FFTDataModelManager_kEqual_;
    if ([fluidConditionSyntax hasPrefix:@"!"]) {
      operator_ = FFTDataModelManager_kNotEqual_;
      fluidConditionSyntax = [fluidConditionSyntax substring:1];
    }
    sideA = [NSString stringWithFormat:@"%@%@", dataModelPrefix, fluidConditionSyntax];
    sideB = @"true";
  }
  else {
    sideA = [NSString stringWithFormat:@"%@%@", dataModelPrefix, IOSObjectArray_Get(tokens, 0)];
    operator_ = IOSObjectArray_Get(tokens, 1);
    sideB = IOSObjectArray_Get(tokens, 2);
  }
  return [self evaluateConditionWithNSString:sideA withNSString:operator_ withNSString:sideB withJavaUtilCollection:conditionalKeys];
}

- (BOOL)evaluateConditionWithNSString:(NSString *)sideA
                         withNSString:(NSString *)operator_
                         withNSString:(NSString *)sideB
               withJavaUtilCollection:(id<JavaUtilCollection>)conditionalKeys {
  if (conditionalKeys != nil) {
    [conditionalKeys addWithId:sideA];
  }
  NSString *resultA = [((FFTDataModelManager *) nil_chk([((FFTFluidApp *) nil_chk(FFTGlobalState_get_fluidApp__())) getDataModelManager])) getValueWithNSString:nil withNSString:sideA withNSString:nil withNSString:nil];
  NSString *resultB;
  if ([((NSString *) nil_chk(sideB)) isEqual:@"true"] || [sideB isEqual:@"false"]) {
    resultB = sideB;
  }
  else if ([sideB isEqual:@"''"] || [sideB isEqual:@"\"\""]) {
    resultB = @"''";
  }
  else if (([sideB hasPrefix:@"'"] && [sideB hasSuffix:@"'"]) || ([sideB hasPrefix:@"\""] && [sideB hasSuffix:@"\""])) {
    resultB = [sideB substring:1 endIndex:((int) [sideB length]) - 1];
  }
  else if ([sideB matches:@"\\d+"]) {
    resultB = sideB;
  }
  else {
    if (conditionalKeys != nil) {
      [conditionalKeys addWithId:sideB];
    }
    resultB = [((FFTDataModelManager *) nil_chk([FFTGlobalState_get_fluidApp__() getDataModelManager])) getValueWithNSString:nil withNSString:sideB withNSString:nil withNSString:nil];
  }
  BOOL equals;
  if (resultA == nil && (resultB == nil || [resultB isEqual:@"''"] || [sideB isEqual:@"\"\""])) {
    equals = YES;
  }
  else if (resultA == nil || resultB == nil) {
    equals = NO;
  }
  else if ([resultB isEqual:@"''"] || [sideB isEqual:@"\"\""]) {
    equals = [resultA isEmpty];
  }
  else {
    equals = [resultA isEqual:resultB];
  }
  if ([((NSString *) nil_chk(operator_)) isEqual:FFTDataModelManager_kEqual_]) {
    return equals;
  }
  else {
    return !equals;
  }
}

- (id)init {
  if (self = [super init]) {
    dataModels_ = [[JavaUtilHashMap alloc] init];
    dataChangeListeners_ = [[JavaUtilHashMap alloc] init];
    listenersEnabled_ = [[JavaUtilHashMap alloc] init];
    cache_ = [[FFTLRUCacheTree alloc] initWithInt:100];
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTDataModelManager *)other {
  [super copyAllFieldsTo:other];
  other->cache_ = cache_;
  other->dataChangeListeners_ = dataChangeListeners_;
  other->dataModels_ = dataModels_;
  other->listenersEnabled_ = listenersEnabled_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "checkOnMainThread", NULL, "V", 0x4, NULL },
    { "setDataModelWithNSString:withId:", "setDataModel", "V", 0x1, NULL },
    { "getDataModelWithNSString:", "getDataModel", "Ljava.lang.Object;", 0x1, NULL },
    { "getValueWithNSString:withNSString:withNSString:withNSString:", "getValue", "Ljava.lang.String;", 0x1, NULL },
    { "makeKeyWithNSString:withNSString:", "makeKey", "Ljava.lang.String;", 0xa, NULL },
    { "getValueHelperWithNSString:", "getValueHelper", "Ljava.lang.Object;", 0x4, NULL },
    { "hasParameterWithNSString:", "hasParameter", "Z", 0x4, NULL },
    { "tokenizeWithNSString:", "tokenize", "[Ljava.lang.String;", 0x4, NULL },
    { "getObjectWithNSString:", "getObject", "Ljava.lang.Object;", 0x1, NULL },
    { "getValueListWithNSString:", "getValueList", "Ljava.util.List;", 0x1, NULL },
    { "getValueListWithNSString:withNSString:", "getValueList", "Ljava.util.List;", 0x1, NULL },
    { "getValueWithId:withNSStringArray:withInt:", "getValue", "Ljava.lang.Object;", 0x4, NULL },
    { "getValueReflectiveWithId:withNSString:", "getValueReflective", "Ljava.lang.Object;", 0x2, NULL },
    { "getValueReflectiveHelperWithId:withNSString:withNSString:", "getValueReflectiveHelper", "Ljava.lang.Object;", 0xa, "Ljava.lang.Exception;" },
    { "invokeIOSNativeSendMessageWithJavaLangReflectMethod:withId:withNSString:", "invokeIOSNativeSendMessage", "Ljava.lang.Object;", 0x108, NULL },
    { "setValueWithNSString:withNSString:withId:", "setValue", "V", 0x1, NULL },
    { "setValueReflectiveWithId:withNSString:withId:", "setValueReflective", "V", 0xa, NULL },
    { "setValueReflectiveHelperWithId:withNSString:withId:", "setValueReflectiveHelper", "V", 0xa, "Ljava.lang.Exception;" },
    { "addDataChangeListenerWithNSString:withNSString:withNSString:withFFTDataChangeListener:", "addDataChangeListener", "V", 0x1, NULL },
    { "addDataChangeListenerWithNSString:withNSString:withNSString:withBoolean:withFFTDataChangeListener:", "addDataChangeListener", "V", 0x1, NULL },
    { "withoutParameterWithNSString:", "withoutParameter", "Ljava.lang.String;", 0x2, NULL },
    { "tokensWithoutParameterWithNSStringArray:", "tokensWithoutParameter", "[Ljava.lang.String;", 0x2, NULL },
    { "getFullKeyWithNSString:withNSString:", "getFullKey", "Ljava.lang.String;", 0x9, NULL },
    { "addDataChangeListenerWithNSString:withNSString:withFFTDataChangeListener:", "addDataChangeListener", "V", 0x1, NULL },
    { "addDataChangeListenerWithNSString:withNSString:withBoolean:withFFTDataChangeListener:", "addDataChangeListener", "V", 0x1, NULL },
    { "addDataChangeListenerHelperWithJavaUtilHashMap:withNSStringArray:withInt:withFFTDataModelManager_DataChangeListenerWrapper:", "addDataChangeListenerHelper", "V", 0x2, NULL },
    { "removeDataChangeListenersForChildrenOfWithNSString:", "removeDataChangeListenersForChildrenOf", "V", 0x1, NULL },
    { "removeDataChangeListenersForWithNSString:withBoolean:", "removeDataChangeListenersFor", "V", 0x1, NULL },
    { "removeDataChangeListenersForWithNSString:withBoolean:withBoolean:", "removeDataChangeListenersFor", "V", 0x2, NULL },
    { "removeDataChangeListenersForHelperWithJavaUtilHashMap:withNSStringArray:withInt:withBoolean:withBoolean:", "removeDataChangeListenersForHelper", "V", 0x2, NULL },
    { "removeDataChangeListenerWithNSString:", "removeDataChangeListener", "V", 0x1, NULL },
    { "removeDataChangeListenerHelperWithFFTDataModelManager_DataChangeListenerGroup:withNSString:", "removeDataChangeListenerHelper", "V", 0x1, NULL },
    { "dataDidChangeWithNSString:withNSStringArray:", "dataDidChange", "V", 0x81, NULL },
    { "dataDidChangeWithBoolean:withNSString:withNSStringArray:", "dataDidChange", "V", 0x81, NULL },
    { "dataWasRemovedWithNSString:", "dataWasRemoved", "V", 0x1, NULL },
    { "dataDidChangeWithBoolean:withBoolean:withNSString:withNSStringArray:", "dataDidChange", "V", 0x82, NULL },
    { "dataDidChangeHelperWithJavaUtilHashMap:withNSStringArray:withInt:withNSStringArray:withJavaUtilHashSet:", "dataDidChangeHelper", "V", 0x2, NULL },
    { "enableDataChangeListenerWithNSString:", "enableDataChangeListener", "V", 0x1, NULL },
    { "disableDataChangeListenerWithNSString:", "disableDataChangeListener", "V", 0x1, NULL },
    { "getConditionalKeysWithNSString:withNSString:", "getConditionalKeys", "Ljava.util.List;", 0x1, NULL },
    { "checkConditionWithNSString:withNSString:", "checkCondition", "Z", 0x1, NULL },
    { "checkConditionWithNSString:withNSString:withJavaUtilCollection:", "checkCondition", "Z", 0x4, NULL },
    { "checkIndividualConditionWithNSString:withNSString:withJavaUtilCollection:", "checkIndividualCondition", "Z", 0x4, NULL },
    { "evaluateConditionWithNSString:withNSString:withNSString:withJavaUtilCollection:", "evaluateCondition", "Z", 0x4, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "kUseObjNativeCall_", NULL, 0x18, "Z", NULL, .constantValue.asBOOL = FFTDataModelManager_kUseObjNativeCall },
    { "dataModels_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "dataChangeListeners_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "listenersEnabled_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "cache_", NULL, 0x0, "Lcom.sponberg.fluid.util.LRUCacheTree;", NULL,  },
    { "kEqual_", NULL, 0x18, "Ljava.lang.String;", &FFTDataModelManager_kEqual_,  },
    { "kNotEqual_", NULL, 0x18, "Ljava.lang.String;", &FFTDataModelManager_kNotEqual_,  },
  };
  static J2ObjcClassInfo _FFTDataModelManager = { "DataModelManager", "com.sponberg.fluid.layout", NULL, 0x1, 45, methods, 7, fields, 0, NULL};
  return &_FFTDataModelManager;
}

@end

@implementation FFTDataModelManager_DataChangeListenerGroup

- (void)addListenersRecursiveWithJavaUtilHashSet:(JavaUtilHashSet *)listeners {
  [((JavaUtilHashSet *) nil_chk(listeners)) addAllWithJavaUtilCollection:self->listeners_];
  for (FFTDataModelManager_DataChangeListenerGroup * __strong g in nil_chk([((JavaUtilHashMap *) nil_chk(listenerGroups_)) values])) {
    [((FFTDataModelManager_DataChangeListenerGroup *) nil_chk(g)) addListenersRecursiveWithJavaUtilHashSet:listeners];
  }
}

- (void)removeListenersRecursiveWithBoolean:(BOOL)includeExact
                                withBoolean:(BOOL)includeChildren {
  if (includeExact) {
    [((JavaUtilArrayList *) nil_chk(listeners_)) clear];
  }
  if (includeChildren) {
    for (FFTDataModelManager_DataChangeListenerGroup * __strong g in nil_chk([((JavaUtilHashMap *) nil_chk(listenerGroups_)) values])) {
      [((FFTDataModelManager_DataChangeListenerGroup *) nil_chk(g)) removeListenersRecursiveWithBoolean:YES withBoolean:YES];
    }
    [listenerGroups_ clear];
  }
}

- (id)init {
  if (self = [super init]) {
    listenerGroups_ = [[JavaUtilHashMap alloc] init];
    listeners_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTDataModelManager_DataChangeListenerGroup *)other {
  [super copyAllFieldsTo:other];
  other->listenerGroups_ = listenerGroups_;
  other->listeners_ = listeners_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "addListenersRecursiveWithJavaUtilHashSet:", "addListenersRecursive", "V", 0x1, NULL },
    { "removeListenersRecursiveWithBoolean:withBoolean:", "removeListenersRecursive", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "listenerGroups_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "listeners_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
  };
  static J2ObjcClassInfo _FFTDataModelManager_DataChangeListenerGroup = { "DataChangeListenerGroup", "com.sponberg.fluid.layout", "DataModelManager", 0x8, 3, methods, 2, fields, 0, NULL};
  return &_FFTDataModelManager_DataChangeListenerGroup;
}

@end

@implementation FFTDataModelManager_DataChangeListenerWrapper

- (NSUInteger)hash {
  return ((int) [((id<FFTDataChangeListener>) nil_chk(listener_)) hash]);
}

- (BOOL)isEqual:(id)obj {
  if (!([obj isKindOfClass:[FFTDataModelManager_DataChangeListenerWrapper class]])) {
    return NO;
  }
  FFTDataModelManager_DataChangeListenerWrapper *o2 = (FFTDataModelManager_DataChangeListenerWrapper *) check_class_cast(obj, [FFTDataModelManager_DataChangeListenerWrapper class]);
  return [((id<FFTDataChangeListener>) nil_chk(listener_)) isEqual:((FFTDataModelManager_DataChangeListenerWrapper *) nil_chk(o2))->listener_];
}

- (id)init {
  if (self = [super init]) {
    listenForChildren_ = NO;
  }
  return self;
}

- (void)copyAllFieldsTo:(FFTDataModelManager_DataChangeListenerWrapper *)other {
  [super copyAllFieldsTo:other];
  other->dataChangeListenerId_ = dataChangeListenerId_;
  other->listenForChildren_ = listenForChildren_;
  other->listener_ = listener_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "hash", "hashCode", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "listener_", NULL, 0x0, "Lcom.sponberg.fluid.layout.DataChangeListener;", NULL,  },
    { "dataChangeListenerId_", NULL, 0x0, "Ljava.lang.String;", NULL,  },
    { "listenForChildren_", NULL, 0x0, "Z", NULL,  },
  };
  static J2ObjcClassInfo _FFTDataModelManager_DataChangeListenerWrapper = { "DataChangeListenerWrapper", "com.sponberg.fluid.layout", "DataModelManager", 0x8, 3, methods, 3, fields, 0, NULL};
  return &_FFTDataModelManager_DataChangeListenerWrapper;
}

@end
