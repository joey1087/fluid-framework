//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/FluidApp.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/sponberg/fluid/ApplicationInitializer.h"
#include "com/sponberg/fluid/ApplicationLoader.h"
#include "com/sponberg/fluid/ApplicationReloader.h"
#include "com/sponberg/fluid/Callback.h"
#include "com/sponberg/fluid/EventsManager.h"
#include "com/sponberg/fluid/FluidApp.h"
#include "com/sponberg/fluid/GlobalState.h"
#include "com/sponberg/fluid/HttpService.h"
#include "com/sponberg/fluid/HttpServiceWrapper.h"
#include "com/sponberg/fluid/LoggingService.h"
#include "com/sponberg/fluid/PlatformSpecifier.h"
#include "com/sponberg/fluid/ResourceService.h"
#include "com/sponberg/fluid/SecurityService.h"
#include "com/sponberg/fluid/SystemService.h"
#include "com/sponberg/fluid/WebviewEventsManager.h"
#include "com/sponberg/fluid/datastore/DatastoreManager.h"
#include "com/sponberg/fluid/datastore/DatastoreService.h"
#include "com/sponberg/fluid/initializer/LoggingInitializer.h"
#include "com/sponberg/fluid/layout/ActionListener.h"
#include "com/sponberg/fluid/layout/DataModelManager.h"
#include "com/sponberg/fluid/layout/FluidViewFactory.h"
#include "com/sponberg/fluid/layout/ImageManager.h"
#include "com/sponberg/fluid/layout/Layout.h"
#include "com/sponberg/fluid/layout/PrecomputeLayoutManager.h"
#include "com/sponberg/fluid/layout/Screen.h"
#include "com/sponberg/fluid/layout/ScreenListener.h"
#include "com/sponberg/fluid/layout/UIService.h"
#include "com/sponberg/fluid/layout/ViewManager.h"
#include "com/sponberg/fluid/layout/WebviewActionListener.h"
#include "com/sponberg/fluid/manager/LaunchOptionsManager.h"
#include "com/sponberg/fluid/manager/PushNotificationManager.h"
#include "com/sponberg/fluid/parser/SettingsParser.h"
#include "com/sponberg/fluid/parser/TabParser.h"
#include "com/sponberg/fluid/parser/ViewBehaviorFactory.h"
#include "com/sponberg/fluid/parser/ViewsParser.h"
#include "com/sponberg/fluid/sdk/ExternalSDK.h"
#include "com/sponberg/fluid/util/KVLReader.h"
#include "com/sponberg/fluid/util/KeyValueList.h"
#include "com/sponberg/fluid/util/Logger.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"

@implementation FFTFluidApp

- (id)init {
  if (self = [super init]) {
    viewManager_ = [[FFTViewManager alloc] init];
    imageManager_ = [[FFTImageManager alloc] init];
    dataModelManager_ = [[FFTDataModelManager alloc] init];
    datastoreManager_ = [[FFTDatastoreManager alloc] init];
    eventsManager_ = [[FFTEventsManager alloc] init];
    webviewEventsManager_ = [[FFTWebviewEventsManager alloc] init];
    precomputeLayoutManager_ = [[FFTPrecomputeLayoutManager alloc] init];
    pushNotificationManager_ = [[FFTPushNotificationManager alloc] init];
    launchOptionsManager_ = [[FFTLaunchOptionsManager alloc] init];
    initializers_ = [[JavaUtilArrayList alloc] init];
    loaders_ = [[JavaUtilArrayList alloc] init];
    reloaders_ = [[JavaUtilArrayList alloc] init];
    defaultsByCategory_ = [[JavaUtilHashMap alloc] init];
    externalSdks_ = [[JavaUtilHashMap alloc] init];
    fluidViewFactory_ = [[FFTFluidViewFactory alloc] init];
    viewBehaviorFactory_ = [[FFTViewBehaviorFactory alloc] init];
    platform_ = nil;
    initialized_ = NO;
    loaded_ = NO;
    started_ = NO;
    settingsOverride_ = nil;
    (void) FFTGlobalState_set_fluidApp__(self);
    [self setLoggingServiceWithFFTLoggingService:[[FFTLogger_SimpleLoggingService alloc] init]];
    [self addInitializerWithFFTApplicationInitializer:[[FFTSettingsParser alloc] init]];
    [self addInitializerWithFFTApplicationInitializer:[[FFTLoggingInitializer alloc] init]];
    [self addInitializerWithFFTApplicationInitializer:[[FFTViewsParser alloc] init]];
    [self addInitializerWithFFTApplicationInitializer:[[FFTTabParser alloc] init]];
    [self addInitializerWithFFTApplicationInitializer:viewManager_];
    [self addInitializerWithFFTApplicationInitializer:imageManager_];
    [self addInitializerWithFFTApplicationInitializer:precomputeLayoutManager_];
    [self addLoaderWithFFTApplicationLoader:datastoreManager_];
  }
  return self;
}

- (void)setHttpServiceWithFFTHttpService:(id<FFTHttpService>)service {
  self->httpService_ = [[FFTHttpServiceWrapper alloc] initWithFFTHttpService:service];
}

- (void)setHttpServiceRequestParametersMapModeWithFFTHttpServiceWrapper_MapModeEnum:(FFTHttpServiceWrapper_MapModeEnum *)mapMode {
  [((FFTHttpServiceWrapper *) nil_chk(((FFTHttpServiceWrapper *) check_class_cast(httpService_, [FFTHttpServiceWrapper class])))) setMapModeWithFFTHttpServiceWrapper_MapModeEnum:mapMode];
}

- (void)addInitializerWithFFTApplicationInitializer:(id<FFTApplicationInitializer>)i {
  [((JavaUtilArrayList *) nil_chk(initializers_)) addWithId:i];
}

- (void)removeInitializerWithFFTApplicationInitializer:(id<FFTApplicationInitializer>)i {
  [((JavaUtilArrayList *) nil_chk(initializers_)) removeWithId:i];
}

- (void)addInitializerWithFFTApplicationInitializerArray:(IOSObjectArray *)list {
  {
    IOSObjectArray *a__ = list;
    id<FFTApplicationInitializer> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<FFTApplicationInitializer> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<FFTApplicationInitializer> i = (*b__++);
      [((JavaUtilArrayList *) nil_chk(initializers_)) addWithId:i];
    }
  }
}

- (void)setExternalSDKWithNSString:(NSString *)id_
                withFFTExternalSDK:(id<FFTExternalSDK>)sdk {
  (void) [((JavaUtilHashMap *) nil_chk(self->externalSdks_)) putWithId:id_ withId:sdk];
}

- (id<FFTExternalSDK>)getExternalSDKWithNSString:(NSString *)id_ {
  return [((JavaUtilHashMap *) nil_chk(self->externalSdks_)) getWithId:id_];
}

- (void)initialize__ {
  @synchronized(self) {
    {
      if (initialized_) {
        return;
      }
      [self initializeHelper];
      [((JavaUtilArrayList *) nil_chk(initializers_)) clear];
      viewBehaviorFactory_ = nil;
      initialized_ = YES;
      NSString *mode = [self getSettingWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"mode" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
      if (mode != nil && ![mode equalsIgnoreCase:@"release"]) {
        [FFTLogger infoWithId:self withNSString:@"Using mode: {}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ mode } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
      }
      else {
        [FFTLogger infoWithId:self withNSString:@"Using mode: release" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
      }
    }
  }
}

- (void)loadAsync {
  @synchronized(self) {
    {
      [self loadAsyncWithFFTCallback:nil];
    }
  }
}

- (void)loadAsyncWithFFTCallback:(id<FFTCallback>)callback {
  @synchronized(self) {
    {
      if (loaded_) {
        if (callback != nil) {
          [callback runWithNSString:nil];
        }
        return;
      }
      [((FFTFluidApp_$1 *) [[FFTFluidApp_$1 alloc] initWithFFTFluidApp:self withFFTCallback:callback]) start];
    }
  }
}

- (void)reloadAsync {
  @synchronized(self) {
    {
      [((FFTFluidApp_$2 *) [[FFTFluidApp_$2 alloc] initWithFFTFluidApp:self]) start];
    }
  }
}

- (void)addLoaderWithFFTApplicationLoader:(id<FFTApplicationLoader>)l {
  [((JavaUtilArrayList *) nil_chk(loaders_)) addWithId:l];
}

- (void)addLoaderWithFFTApplicationLoaderArray:(IOSObjectArray *)list {
  {
    IOSObjectArray *a__ = list;
    id<FFTApplicationLoader> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<FFTApplicationLoader> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<FFTApplicationLoader> l = (*b__++);
      [((JavaUtilArrayList *) nil_chk(loaders_)) addWithId:l];
    }
  }
}

- (void)addReloaderWithFFTApplicationReloader:(id<FFTApplicationReloader>)l {
  [((JavaUtilArrayList *) nil_chk(reloaders_)) addWithId:l];
}

- (void)addReloaderWithFFTApplicationReloaderArray:(IOSObjectArray *)list {
  {
    IOSObjectArray *a__ = list;
    id<FFTApplicationReloader> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<FFTApplicationReloader> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<FFTApplicationReloader> l = (*b__++);
      [((JavaUtilArrayList *) nil_chk(reloaders_)) addWithId:l];
    }
  }
}

- (void)load__WithFFTCallback:(id<FFTCallback>)callback {
  [self loadHelper];
  [((JavaUtilArrayList *) nil_chk(loaders_)) clear];
  loaded_ = YES;
  if (callback != nil) {
    [callback runWithNSString:nil];
  }
}

- (void)reloadWithFFTCallback:(id<FFTCallback>)callback {
  [self reloadHelper];
  if (callback != nil) {
    [callback runWithNSString:nil];
  }
}

- (void)start {
  if (!initialized_) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Not initialized"];
  }
  if (!loaded_) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Not loaded"];
  }
  [FFTLogger infoWithId:self withNSString:@"Starting Fluid App" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
  [self startApp];
}

- (void)restart {
  [FFTLogger infoWithId:self withNSString:@"Re-starting Fluid App" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
  [self reStartApp];
}

- (void)initializeHelper {
  if (platform_ == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"platform not set"];
  }
  if ([self getUiService] == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"UI Service not initialized"];
  }
  if ([self getResourceService] == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Resource Service not initialized"];
  }
  if ([self getSystemService] == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"System Service not initialized"];
  }
  for (id<FFTApplicationInitializer> __strong i in nil_chk(initializers_)) {
    if ([((id<FFTApplicationInitializer>) nil_chk(i)) getSupportedPlatforms] != nil && ![self isSupportedOnPlatformWithFFTPlatformSpecifier:i]) {
      continue;
    }
    [FFTLogger debugWithId:self withNSString:@"Running ApplicationInitializer {}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [[i getClass] getName] } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    [i initialize__WithFFTFluidApp:self];
  }
}

- (void)loadHelper {
  for (id<FFTApplicationLoader> __strong i in nil_chk(loaders_)) {
    if ([((id<FFTApplicationLoader>) nil_chk(i)) getSupportedPlatforms] != nil && ![self isSupportedOnPlatformWithFFTPlatformSpecifier:i]) {
      continue;
    }
    [FFTLogger debugWithId:self withNSString:@"Running ApplicationLoader {}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [[i getClass] getName] } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    [i load__WithFFTFluidApp:self];
  }
}

- (void)reloadHelper {
  for (id<FFTApplicationReloader> __strong i in nil_chk(reloaders_)) {
    if ([((id<FFTApplicationReloader>) nil_chk(i)) getSupportedPlatforms] != nil && ![self isSupportedOnPlatformWithFFTPlatformSpecifier:i]) {
      continue;
    }
    [FFTLogger debugWithId:self withNSString:@"Running Re-ApplicationLoader {}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [[i getClass] getName] } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    [i reloadWithFFTFluidApp:self];
  }
}

- (BOOL)isSupportedOnPlatformWithFFTPlatformSpecifier:(id<FFTPlatformSpecifier>)i {
  {
    IOSObjectArray *a__ = [((id<FFTPlatformSpecifier>) nil_chk(i)) getSupportedPlatforms];
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *p = (*b__++);
      if ([((NSString *) nil_chk(p)) isEqual:platform_]) {
        return YES;
      }
    }
  }
  return NO;
}

- (void)setDefaultsWithJavaUtilList:(id<JavaUtilList>)properties {
  self->defaultsByCategory_ = [[JavaUtilHashMap alloc] init];
  if (properties != nil) {
    for (id<FFTKeyValueList> __strong kvl in properties) {
      (void) [defaultsByCategory_ putWithId:[((id<FFTKeyValueList>) nil_chk(kvl)) getValue] withId:kvl];
    }
  }
}

- (NSString *)getDefaultWithNSString:(NSString *)category
                        withNSString:(NSString *)key {
  id<FFTKeyValueList> kvl = [((JavaUtilHashMap *) nil_chk(self->defaultsByCategory_)) getWithId:category];
  if (kvl != nil && [kvl containsWithNSString:key]) {
    return [kvl getValueWithNSString:key];
  }
  else {
    return nil;
  }
}

- (NSString *)getSettingWithNSStringArray:(IOSObjectArray *)keys {
  return [self getSettingsHelperWithFFTKeyValueList:self->settings_ withNSStringArray:keys withInt:0];
}

- (NSString *)getSettingsHelperWithFFTKeyValueList:(id<FFTKeyValueList>)list
                                 withNSStringArray:(IOSObjectArray *)keys
                                           withInt:(int)index {
  if (index == (int) [((IOSObjectArray *) nil_chk(keys)) count] - 1) {
    if (list == nil || ![list containsWithNSString:IOSObjectArray_Get(keys, index)]) {
      return nil;
    }
    else {
      return [list getValueWithNSString:IOSObjectArray_Get(keys, index)];
    }
  }
  else {
    id<FFTKeyValueList> kvl = [((id<FFTKeyValueList>) nil_chk(list)) getWithValueWithNSString:IOSObjectArray_Get(keys, index) withNSString:IOSObjectArray_Get(keys, index + 1)];
    return [self getSettingsHelperWithFFTKeyValueList:kvl withNSStringArray:keys withInt:index + 2];
  }
}

- (void)startApp {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)reStartApp {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (FFTScreen *)getScreenWithNSString:(NSString *)screenId {
  return [((FFTViewManager *) nil_chk(viewManager_)) getScreenWithNSString:screenId];
}

- (id<JavaUtilList>)getTabs {
  return [((FFTViewManager *) nil_chk(viewManager_)) getTabs];
}

- (FFTLayout *)getLayoutWithNSString:(NSString *)layoutId {
  return [((FFTViewManager *) nil_chk(viewManager_)) getLayoutWithNSString:layoutId];
}

- (void)setBaseUnitWithDouble:(double)unit {
  [((FFTViewManager *) nil_chk(viewManager_)) setBaseUnitWithDouble:unit];
}

- (void)setDevicePixelMultiplierWithDouble:(double)devicePixelMultiplier {
  [((FFTViewManager *) nil_chk(viewManager_)) setDevicePixelMultiplierWithDouble:devicePixelMultiplier];
}

- (void)setDevicePixelActualMultiplierWithDouble:(double)devicePixelActualMultiplier {
  [((FFTViewManager *) nil_chk(viewManager_)) setDevicePixelActualMultiplierWithDouble:devicePixelActualMultiplier];
}

- (double)sizeToPixelsWithNSString:(NSString *)size {
  return [((FFTViewManager *) nil_chk(viewManager_)) sizeToPixelsWithNSString:size];
}

- (double)unitsToPixelsWithDouble:(double)units {
  return [((FFTViewManager *) nil_chk(viewManager_)) unitsToPixelsWithDouble:units];
}

- (double)pixelsToPixelsWithInt:(int)pixels {
  return [((FFTViewManager *) nil_chk(viewManager_)) pixelsToPixelsWithDouble:pixels];
}

- (double)fontPointsToPixelsWithDouble:(double)points {
  return [((FFTViewManager *) nil_chk(viewManager_)) fontPointsToPixelsWithDouble:points];
}

- (double)unitsToFontPointsWithDouble:(double)units {
  return [((FFTViewManager *) nil_chk(viewManager_)) unitsToFontPointsWithDouble:units];
}

- (double)pixelsToUnitsWithDouble:(double)pixels {
  return [((FFTViewManager *) nil_chk(viewManager_)) pixelsToUnitsWithDouble:pixels];
}

- (void)setDataModelWithNSString:(NSString *)key
                          withId:(id)dataModel {
  [((FFTDataModelManager *) nil_chk(dataModelManager_)) setDataModelWithNSString:key withId:dataModel];
}

- (FFTFluidApp_AddActionListenerBuilder *)addActionListenerWithNSStringArray:(IOSObjectArray *)keyPath {
  FFTFluidApp_AddActionListenerBuilder *builder = [[FFTFluidApp_AddActionListenerBuilder alloc] initWithFFTFluidApp:self];
  builder->keyPath_ = keyPath;
  return builder;
}

- (FFTFluidApp_AddWebviewActionListenerBuilder *)addWebviewActionListenerWithNSStringArray:(IOSObjectArray *)keyPath {
  FFTFluidApp_AddWebviewActionListenerBuilder *builder = [[FFTFluidApp_AddWebviewActionListenerBuilder alloc] initWithFFTFluidApp:self];
  builder->keyPath_ = keyPath;
  return builder;
}

- (void)addScreenListenerWithNSString:(NSString *)screenId
                withFFTScreenListener:(id<FFTScreenListener>)listener {
  [((FFTScreen *) nil_chk([self getScreenWithNSString:screenId])) addScreenListenerWithFFTScreenListener:listener];
}

- (BOOL)isRecoverFromExceptions {
  NSString *setting = [self getSettingWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"recover-from-exceptions" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
  if (setting == nil) {
    return NO;
  }
  else {
    return [setting equalsIgnoreCase:@"true"];
  }
}

- (id<FFTHttpService>)getHttpService {
  return self->httpService_;
}

- (id<FFTUIService>)getUiService {
  return self->uiService_;
}

- (id<FFTResourceService>)getResourceService {
  return self->resourceService_;
}

- (id<FFTLoggingService>)getLoggingService {
  return self->loggingService_;
}

- (id<FFTDatastoreService>)getDatastoreService {
  return self->datastoreService_;
}

- (id<FFTSystemService>)getSystemService {
  return self->systemService_;
}

- (id<FFTSecurityService>)getSecurityService {
  return self->securityService_;
}

- (FFTViewManager *)getViewManager {
  return self->viewManager_;
}

- (FFTImageManager *)getImageManager {
  return self->imageManager_;
}

- (FFTDataModelManager *)getDataModelManager {
  return self->dataModelManager_;
}

- (FFTDatastoreManager *)getDatastoreManager {
  return self->datastoreManager_;
}

- (FFTEventsManager *)getEventsManager {
  return self->eventsManager_;
}

- (FFTWebviewEventsManager *)getWebviewEventsManager {
  return self->webviewEventsManager_;
}

- (FFTPrecomputeLayoutManager *)getPrecomputeLayoutManager {
  return self->precomputeLayoutManager_;
}

- (FFTPushNotificationManager *)getPushNotificationManager {
  return self->pushNotificationManager_;
}

- (FFTLaunchOptionsManager *)getLaunchOptionsManager {
  return self->launchOptionsManager_;
}

- (JavaUtilArrayList *)getInitializers {
  return self->initializers_;
}

- (JavaUtilArrayList *)getLoaders {
  return self->loaders_;
}

- (JavaUtilArrayList *)getReloaders {
  return self->reloaders_;
}

- (JavaUtilHashMap *)getDefaultsByCategory {
  return self->defaultsByCategory_;
}

- (JavaUtilHashMap *)getExternalSdks {
  return self->externalSdks_;
}

- (FFTFluidViewFactory *)getFluidViewFactory {
  return self->fluidViewFactory_;
}

- (FFTViewBehaviorFactory *)getViewBehaviorFactory {
  return self->viewBehaviorFactory_;
}

- (FFTKVLReader *)getSettings {
  return self->settings_;
}

- (NSString *)getPlatform {
  return self->platform_;
}

- (id<FFTSecurityService_PasswordProvider>)getPasswordProvider {
  return self->passwordProvider_;
}

- (BOOL)isInitialized {
  return self->initialized_;
}

- (BOOL)isLoaded {
  return self->loaded_;
}

- (BOOL)isStarted {
  return self->started_;
}

- (NSString *)getSettingsOverride {
  return self->settingsOverride_;
}

- (void)setUiServiceWithFFTUIService:(id<FFTUIService>)uiService {
  self->uiService_ = uiService;
}

- (void)setResourceServiceWithFFTResourceService:(id<FFTResourceService>)resourceService {
  self->resourceService_ = resourceService;
}

- (void)setLoggingServiceWithFFTLoggingService:(id<FFTLoggingService>)loggingService {
  self->loggingService_ = loggingService;
}

- (void)setDatastoreServiceWithFFTDatastoreService:(id<FFTDatastoreService>)datastoreService {
  self->datastoreService_ = datastoreService;
}

- (void)setSystemServiceWithFFTSystemService:(id<FFTSystemService>)systemService {
  self->systemService_ = systemService;
}

- (void)setSecurityServiceWithFFTSecurityService:(id<FFTSecurityService>)securityService {
  self->securityService_ = securityService;
}

- (void)setViewManagerWithFFTViewManager:(FFTViewManager *)viewManager {
  self->viewManager_ = viewManager;
}

- (void)setImageManagerWithFFTImageManager:(FFTImageManager *)imageManager {
  self->imageManager_ = imageManager;
}

- (void)setDataModelManagerWithFFTDataModelManager:(FFTDataModelManager *)dataModelManager {
  self->dataModelManager_ = dataModelManager;
}

- (void)setDatastoreManagerWithFFTDatastoreManager:(FFTDatastoreManager *)datastoreManager {
  self->datastoreManager_ = datastoreManager;
}

- (void)setEventsManagerWithFFTEventsManager:(FFTEventsManager *)eventsManager {
  self->eventsManager_ = eventsManager;
}

- (void)setWebviewEventsManagerWithFFTWebviewEventsManager:(FFTWebviewEventsManager *)webviewEventsManager {
  self->webviewEventsManager_ = webviewEventsManager;
}

- (void)setPrecomputeLayoutManagerWithFFTPrecomputeLayoutManager:(FFTPrecomputeLayoutManager *)precomputeLayoutManager {
  self->precomputeLayoutManager_ = precomputeLayoutManager;
}

- (void)setPushNotificationManagerWithFFTPushNotificationManager:(FFTPushNotificationManager *)pushNotificationManager {
  self->pushNotificationManager_ = pushNotificationManager;
}

- (void)setLaunchOptionsManagerWithFFTLaunchOptionsManager:(FFTLaunchOptionsManager *)launchOptionsManager {
  self->launchOptionsManager_ = launchOptionsManager;
}

- (void)setInitializersWithJavaUtilArrayList:(JavaUtilArrayList *)initializers {
  self->initializers_ = initializers;
}

- (void)setLoadersWithJavaUtilArrayList:(JavaUtilArrayList *)loaders {
  self->loaders_ = loaders;
}

- (void)setReloadersWithJavaUtilArrayList:(JavaUtilArrayList *)reloaders {
  self->reloaders_ = reloaders;
}

- (void)setDefaultsByCategoryWithJavaUtilHashMap:(JavaUtilHashMap *)defaultsByCategory {
  self->defaultsByCategory_ = defaultsByCategory;
}

- (void)setExternalSdksWithJavaUtilHashMap:(JavaUtilHashMap *)externalSdks {
  self->externalSdks_ = externalSdks;
}

- (void)setFluidViewFactoryWithFFTFluidViewFactory:(FFTFluidViewFactory *)fluidViewFactory {
  self->fluidViewFactory_ = fluidViewFactory;
}

- (void)setViewBehaviorFactoryWithFFTViewBehaviorFactory:(FFTViewBehaviorFactory *)viewBehaviorFactory {
  self->viewBehaviorFactory_ = viewBehaviorFactory;
}

- (void)setSettingsWithFFTKVLReader:(FFTKVLReader *)settings {
  self->settings_ = settings;
}

- (void)setPlatformWithNSString:(NSString *)platform {
  self->platform_ = platform;
}

- (void)setPasswordProviderWithFFTSecurityService_PasswordProvider:(id<FFTSecurityService_PasswordProvider>)passwordProvider {
  self->passwordProvider_ = passwordProvider;
}

- (void)setInitializedWithBoolean:(BOOL)initialized {
  self->initialized_ = initialized;
}

- (void)setLoadedWithBoolean:(BOOL)loaded {
  self->loaded_ = loaded;
}

- (void)setStartedWithBoolean:(BOOL)started {
  self->started_ = started;
}

- (void)setSettingsOverrideWithNSString:(NSString *)settingsOverride {
  self->settingsOverride_ = settingsOverride;
}

- (void)copyAllFieldsTo:(FFTFluidApp *)other {
  [super copyAllFieldsTo:other];
  other->dataModelManager_ = dataModelManager_;
  other->datastoreManager_ = datastoreManager_;
  other->datastoreService_ = datastoreService_;
  other->defaultsByCategory_ = defaultsByCategory_;
  other->eventsManager_ = eventsManager_;
  other->externalSdks_ = externalSdks_;
  other->fluidViewFactory_ = fluidViewFactory_;
  other->httpService_ = httpService_;
  other->imageManager_ = imageManager_;
  other->initialized_ = initialized_;
  other->initializers_ = initializers_;
  other->launchOptionsManager_ = launchOptionsManager_;
  other->loaded_ = loaded_;
  other->loaders_ = loaders_;
  other->loggingService_ = loggingService_;
  other->passwordProvider_ = passwordProvider_;
  other->platform_ = platform_;
  other->precomputeLayoutManager_ = precomputeLayoutManager_;
  other->pushNotificationManager_ = pushNotificationManager_;
  other->reloaders_ = reloaders_;
  other->resourceService_ = resourceService_;
  other->securityService_ = securityService_;
  other->settings_ = settings_;
  other->settingsOverride_ = settingsOverride_;
  other->started_ = started_;
  other->systemService_ = systemService_;
  other->uiService_ = uiService_;
  other->viewBehaviorFactory_ = viewBehaviorFactory_;
  other->viewManager_ = viewManager_;
  other->webviewEventsManager_ = webviewEventsManager_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", "FluidApp", NULL, 0x1, NULL },
    { "setHttpServiceWithFFTHttpService:", "setHttpService", "V", 0x1, NULL },
    { "setHttpServiceRequestParametersMapModeWithFFTHttpServiceWrapper_MapModeEnum:", "setHttpServiceRequestParametersMapMode", "V", 0x1, NULL },
    { "addInitializerWithFFTApplicationInitializer:", "addInitializer", "V", 0x1, NULL },
    { "removeInitializerWithFFTApplicationInitializer:", "removeInitializer", "V", 0x1, NULL },
    { "addInitializerWithFFTApplicationInitializerArray:", "addInitializer", "V", 0x81, NULL },
    { "setExternalSDKWithNSString:withFFTExternalSDK:", "setExternalSDK", "V", 0x1, NULL },
    { "getExternalSDKWithNSString:", "getExternalSDK", "Lcom.sponberg.fluid.sdk.ExternalSDK;", 0x1, NULL },
    { "initialize__", "initialize", "V", 0x31, NULL },
    { "loadAsync", NULL, "V", 0x31, NULL },
    { "loadAsyncWithFFTCallback:", "loadAsync", "V", 0x31, NULL },
    { "reloadAsync", NULL, "V", 0x31, NULL },
    { "addLoaderWithFFTApplicationLoader:", "addLoader", "V", 0x1, NULL },
    { "addLoaderWithFFTApplicationLoaderArray:", "addLoader", "V", 0x84, NULL },
    { "addReloaderWithFFTApplicationReloader:", "addReloader", "V", 0x1, NULL },
    { "addReloaderWithFFTApplicationReloaderArray:", "addReloader", "V", 0x84, NULL },
    { "load__WithFFTCallback:", "load", "V", 0x12, NULL },
    { "reloadWithFFTCallback:", "reload", "V", 0x12, NULL },
    { "start", NULL, "V", 0x11, NULL },
    { "restart", NULL, "V", 0x11, NULL },
    { "initializeHelper", NULL, "V", 0x4, NULL },
    { "loadHelper", NULL, "V", 0x4, NULL },
    { "reloadHelper", NULL, "V", 0x4, NULL },
    { "isSupportedOnPlatformWithFFTPlatformSpecifier:", "isSupportedOnPlatform", "Z", 0x4, NULL },
    { "setDefaultsWithJavaUtilList:", "setDefaults", "V", 0x1, NULL },
    { "getDefaultWithNSString:withNSString:", "getDefault", "Ljava.lang.String;", 0x1, NULL },
    { "getSettingWithNSStringArray:", "getSetting", "Ljava.lang.String;", 0x81, NULL },
    { "getSettingsHelperWithFFTKeyValueList:withNSStringArray:withInt:", "getSettingsHelper", "Ljava.lang.String;", 0x4, NULL },
    { "startApp", NULL, "V", 0x404, NULL },
    { "reStartApp", NULL, "V", 0x404, NULL },
    { "getScreenWithNSString:", "getScreen", "Lcom.sponberg.fluid.layout.Screen;", 0x1, NULL },
    { "getTabs", NULL, "Ljava.util.List;", 0x1, NULL },
    { "getLayoutWithNSString:", "getLayout", "Lcom.sponberg.fluid.layout.Layout;", 0x1, NULL },
    { "setBaseUnitWithDouble:", "setBaseUnit", "V", 0x1, NULL },
    { "setDevicePixelMultiplierWithDouble:", "setDevicePixelMultiplier", "V", 0x1, NULL },
    { "setDevicePixelActualMultiplierWithDouble:", "setDevicePixelActualMultiplier", "V", 0x1, NULL },
    { "sizeToPixelsWithNSString:", "sizeToPixels", "D", 0x1, NULL },
    { "unitsToPixelsWithDouble:", "unitsToPixels", "D", 0x1, NULL },
    { "pixelsToPixelsWithInt:", "pixelsToPixels", "D", 0x1, NULL },
    { "fontPointsToPixelsWithDouble:", "fontPointsToPixels", "D", 0x1, NULL },
    { "unitsToFontPointsWithDouble:", "unitsToFontPoints", "D", 0x1, NULL },
    { "pixelsToUnitsWithDouble:", "pixelsToUnits", "D", 0x1, NULL },
    { "setDataModelWithNSString:withId:", "setDataModel", "V", 0x1, NULL },
    { "addActionListenerWithNSStringArray:", "addActionListener", "Lcom.sponberg.fluid.FluidApp$AddActionListenerBuilder;", 0x81, NULL },
    { "addWebviewActionListenerWithNSStringArray:", "addWebviewActionListener", "Lcom.sponberg.fluid.FluidApp$AddWebviewActionListenerBuilder;", 0x81, NULL },
    { "addScreenListenerWithNSString:withFFTScreenListener:", "addScreenListener", "V", 0x1, NULL },
    { "isRecoverFromExceptions", NULL, "Z", 0x1, NULL },
    { "getHttpService", NULL, "Lcom.sponberg.fluid.HttpService;", 0x1, NULL },
    { "getUiService", NULL, "Lcom.sponberg.fluid.layout.UIService;", 0x1, NULL },
    { "getResourceService", NULL, "Lcom.sponberg.fluid.ResourceService;", 0x1, NULL },
    { "getLoggingService", NULL, "Lcom.sponberg.fluid.LoggingService;", 0x1, NULL },
    { "getDatastoreService", NULL, "Lcom.sponberg.fluid.datastore.DatastoreService;", 0x1, NULL },
    { "getSystemService", NULL, "Lcom.sponberg.fluid.SystemService;", 0x1, NULL },
    { "getSecurityService", NULL, "Lcom.sponberg.fluid.SecurityService;", 0x1, NULL },
    { "getViewManager", NULL, "Lcom.sponberg.fluid.layout.ViewManager;", 0x1, NULL },
    { "getImageManager", NULL, "Lcom.sponberg.fluid.layout.ImageManager;", 0x1, NULL },
    { "getDataModelManager", NULL, "Lcom.sponberg.fluid.layout.DataModelManager;", 0x1, NULL },
    { "getDatastoreManager", NULL, "Lcom.sponberg.fluid.datastore.DatastoreManager;", 0x1, NULL },
    { "getEventsManager", NULL, "Lcom.sponberg.fluid.EventsManager;", 0x1, NULL },
    { "getWebviewEventsManager", NULL, "Lcom.sponberg.fluid.WebviewEventsManager;", 0x1, NULL },
    { "getPrecomputeLayoutManager", NULL, "Lcom.sponberg.fluid.layout.PrecomputeLayoutManager;", 0x1, NULL },
    { "getPushNotificationManager", NULL, "Lcom.sponberg.fluid.manager.PushNotificationManager;", 0x1, NULL },
    { "getLaunchOptionsManager", NULL, "Lcom.sponberg.fluid.manager.LaunchOptionsManager;", 0x1, NULL },
    { "getInitializers", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "getLoaders", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "getReloaders", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "getDefaultsByCategory", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "getExternalSdks", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "getFluidViewFactory", NULL, "Lcom.sponberg.fluid.layout.FluidViewFactory;", 0x1, NULL },
    { "getViewBehaviorFactory", NULL, "Lcom.sponberg.fluid.parser.ViewBehaviorFactory;", 0x1, NULL },
    { "getSettings", NULL, "Lcom.sponberg.fluid.util.KVLReader;", 0x1, NULL },
    { "getPlatform", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getPasswordProvider", NULL, "Lcom.sponberg.fluid.SecurityService$PasswordProvider;", 0x1, NULL },
    { "isInitialized", NULL, "Z", 0x1, NULL },
    { "isLoaded", NULL, "Z", 0x1, NULL },
    { "isStarted", NULL, "Z", 0x1, NULL },
    { "getSettingsOverride", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setUiServiceWithFFTUIService:", "setUiService", "V", 0x1, NULL },
    { "setResourceServiceWithFFTResourceService:", "setResourceService", "V", 0x1, NULL },
    { "setLoggingServiceWithFFTLoggingService:", "setLoggingService", "V", 0x1, NULL },
    { "setDatastoreServiceWithFFTDatastoreService:", "setDatastoreService", "V", 0x1, NULL },
    { "setSystemServiceWithFFTSystemService:", "setSystemService", "V", 0x1, NULL },
    { "setSecurityServiceWithFFTSecurityService:", "setSecurityService", "V", 0x1, NULL },
    { "setViewManagerWithFFTViewManager:", "setViewManager", "V", 0x1, NULL },
    { "setImageManagerWithFFTImageManager:", "setImageManager", "V", 0x1, NULL },
    { "setDataModelManagerWithFFTDataModelManager:", "setDataModelManager", "V", 0x1, NULL },
    { "setDatastoreManagerWithFFTDatastoreManager:", "setDatastoreManager", "V", 0x1, NULL },
    { "setEventsManagerWithFFTEventsManager:", "setEventsManager", "V", 0x1, NULL },
    { "setWebviewEventsManagerWithFFTWebviewEventsManager:", "setWebviewEventsManager", "V", 0x1, NULL },
    { "setPrecomputeLayoutManagerWithFFTPrecomputeLayoutManager:", "setPrecomputeLayoutManager", "V", 0x1, NULL },
    { "setPushNotificationManagerWithFFTPushNotificationManager:", "setPushNotificationManager", "V", 0x1, NULL },
    { "setLaunchOptionsManagerWithFFTLaunchOptionsManager:", "setLaunchOptionsManager", "V", 0x1, NULL },
    { "setInitializersWithJavaUtilArrayList:", "setInitializers", "V", 0x1, NULL },
    { "setLoadersWithJavaUtilArrayList:", "setLoaders", "V", 0x1, NULL },
    { "setReloadersWithJavaUtilArrayList:", "setReloaders", "V", 0x1, NULL },
    { "setDefaultsByCategoryWithJavaUtilHashMap:", "setDefaultsByCategory", "V", 0x1, NULL },
    { "setExternalSdksWithJavaUtilHashMap:", "setExternalSdks", "V", 0x1, NULL },
    { "setFluidViewFactoryWithFFTFluidViewFactory:", "setFluidViewFactory", "V", 0x1, NULL },
    { "setViewBehaviorFactoryWithFFTViewBehaviorFactory:", "setViewBehaviorFactory", "V", 0x1, NULL },
    { "setSettingsWithFFTKVLReader:", "setSettings", "V", 0x1, NULL },
    { "setPlatformWithNSString:", "setPlatform", "V", 0x1, NULL },
    { "setPasswordProviderWithFFTSecurityService_PasswordProvider:", "setPasswordProvider", "V", 0x1, NULL },
    { "setInitializedWithBoolean:", "setInitialized", "V", 0x1, NULL },
    { "setLoadedWithBoolean:", "setLoaded", "V", 0x1, NULL },
    { "setStartedWithBoolean:", "setStarted", "V", 0x1, NULL },
    { "setSettingsOverrideWithNSString:", "setSettingsOverride", "V", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "httpService_", NULL, 0x2, "Lcom.sponberg.fluid.HttpService;", NULL,  },
    { "uiService_", NULL, 0x2, "Lcom.sponberg.fluid.layout.UIService;", NULL,  },
    { "resourceService_", NULL, 0x2, "Lcom.sponberg.fluid.ResourceService;", NULL,  },
    { "loggingService_", NULL, 0x2, "Lcom.sponberg.fluid.LoggingService;", NULL,  },
    { "datastoreService_", NULL, 0x2, "Lcom.sponberg.fluid.datastore.DatastoreService;", NULL,  },
    { "systemService_", NULL, 0x2, "Lcom.sponberg.fluid.SystemService;", NULL,  },
    { "securityService_", NULL, 0x2, "Lcom.sponberg.fluid.SecurityService;", NULL,  },
    { "viewManager_", NULL, 0x2, "Lcom.sponberg.fluid.layout.ViewManager;", NULL,  },
    { "imageManager_", NULL, 0x2, "Lcom.sponberg.fluid.layout.ImageManager;", NULL,  },
    { "dataModelManager_", NULL, 0x2, "Lcom.sponberg.fluid.layout.DataModelManager;", NULL,  },
    { "datastoreManager_", NULL, 0x2, "Lcom.sponberg.fluid.datastore.DatastoreManager;", NULL,  },
    { "eventsManager_", NULL, 0x2, "Lcom.sponberg.fluid.EventsManager;", NULL,  },
    { "webviewEventsManager_", NULL, 0x2, "Lcom.sponberg.fluid.WebviewEventsManager;", NULL,  },
    { "precomputeLayoutManager_", NULL, 0x2, "Lcom.sponberg.fluid.layout.PrecomputeLayoutManager;", NULL,  },
    { "pushNotificationManager_", NULL, 0x2, "Lcom.sponberg.fluid.manager.PushNotificationManager;", NULL,  },
    { "launchOptionsManager_", NULL, 0x2, "Lcom.sponberg.fluid.manager.LaunchOptionsManager;", NULL,  },
    { "initializers_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "loaders_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "reloaders_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "defaultsByCategory_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
    { "externalSdks_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
    { "fluidViewFactory_", NULL, 0x2, "Lcom.sponberg.fluid.layout.FluidViewFactory;", NULL,  },
    { "viewBehaviorFactory_", NULL, 0x2, "Lcom.sponberg.fluid.parser.ViewBehaviorFactory;", NULL,  },
    { "settings_", NULL, 0x2, "Lcom.sponberg.fluid.util.KVLReader;", NULL,  },
    { "platform_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "passwordProvider_", NULL, 0x2, "Lcom.sponberg.fluid.SecurityService$PasswordProvider;", NULL,  },
    { "initialized_", NULL, 0x2, "Z", NULL,  },
    { "loaded_", NULL, 0x2, "Z", NULL,  },
    { "started_", NULL, 0x2, "Z", NULL,  },
    { "useCaching_", NULL, 0x19, "Z", NULL, .constantValue.asBOOL = FFTFluidApp_useCaching },
    { "settingsOverride_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _FFTFluidApp = { "FluidApp", "com.sponberg.fluid", NULL, 0x401, 106, methods, 31, fields, 0, NULL};
  return &_FFTFluidApp;
}

@end

@implementation FFTFluidApp_AddActionListenerBuilder

- (FFTFluidApp_AddActionListenerBuilder *)listenerWithFFTActionListener:(id<FFTActionListener>)listener {
  [((FFTEventsManager *) nil_chk(this$0_->eventsManager_)) addEventListenerWithFFTActionListener:listener withNSStringArray:keyPath_];
  return self;
}

- (id)initWithFFTFluidApp:(FFTFluidApp *)outer$ {
  this$0_ = outer$;
  return [super init];
}

- (void)copyAllFieldsTo:(FFTFluidApp_AddActionListenerBuilder *)other {
  [super copyAllFieldsTo:other];
  other->keyPath_ = keyPath_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "listenerWithFFTActionListener:", "listener", "Lcom.sponberg.fluid.FluidApp$AddActionListenerBuilder;", 0x1, NULL },
    { "initWithFFTFluidApp:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.FluidApp;", NULL,  },
    { "keyPath_", NULL, 0x0, "[Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _FFTFluidApp_AddActionListenerBuilder = { "AddActionListenerBuilder", "com.sponberg.fluid", "FluidApp", 0x1, 2, methods, 2, fields, 0, NULL};
  return &_FFTFluidApp_AddActionListenerBuilder;
}

@end

@implementation FFTFluidApp_AddWebviewActionListenerBuilder

- (FFTFluidApp_AddWebviewActionListenerBuilder *)listenerWithFFTWebviewActionListener:(id<FFTWebviewActionListener>)listener {
  [((FFTWebviewEventsManager *) nil_chk(this$0_->webviewEventsManager_)) addEventListenerWithFFTWebviewActionListener:listener withNSStringArray:keyPath_];
  return self;
}

- (id)initWithFFTFluidApp:(FFTFluidApp *)outer$ {
  this$0_ = outer$;
  return [super init];
}

- (void)copyAllFieldsTo:(FFTFluidApp_AddWebviewActionListenerBuilder *)other {
  [super copyAllFieldsTo:other];
  other->keyPath_ = keyPath_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "listenerWithFFTWebviewActionListener:", "listener", "Lcom.sponberg.fluid.FluidApp$AddWebviewActionListenerBuilder;", 0x1, NULL },
    { "initWithFFTFluidApp:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.FluidApp;", NULL,  },
    { "keyPath_", NULL, 0x0, "[Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _FFTFluidApp_AddWebviewActionListenerBuilder = { "AddWebviewActionListenerBuilder", "com.sponberg.fluid", "FluidApp", 0x1, 2, methods, 2, fields, 0, NULL};
  return &_FFTFluidApp_AddWebviewActionListenerBuilder;
}

@end

@implementation FFTFluidApp_$1

- (void)run {
  id<JavaLangRunnable> r = [[FFTFluidApp_$1_$1 alloc] initWithFFTFluidApp_$1:self];
  [((id<FFTSystemService>) nil_chk([this$0_ getSystemService])) runOnUiThreadWithJavaLangRunnable:r];
}

- (id)initWithFFTFluidApp:(FFTFluidApp *)outer$
          withFFTCallback:(id<FFTCallback>)capture$0 {
  this$0_ = outer$;
  val$callback_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTFluidApp:withFFTCallback:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.FluidApp;", NULL,  },
    { "val$callback_", NULL, 0x1012, "Lcom.sponberg.fluid.Callback;", NULL,  },
  };
  static J2ObjcClassInfo _FFTFluidApp_$1 = { "$1", "com.sponberg.fluid", "FluidApp", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_FFTFluidApp_$1;
}

@end

@implementation FFTFluidApp_$1_$1

- (void)run {
  [this$0_->this$0_ load__WithFFTCallback:this$0_->val$callback_];
}

- (id)initWithFFTFluidApp_$1:(FFTFluidApp_$1 *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTFluidApp_$1:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.FluidApp$1;", NULL,  },
  };
  static J2ObjcClassInfo _FFTFluidApp_$1_$1 = { "$1", "com.sponberg.fluid", "FluidApp$$1", 0x8000, 2, methods, 1, fields, 0, NULL};
  return &_FFTFluidApp_$1_$1;
}

@end

@implementation FFTFluidApp_$2

- (void)run {
  id<JavaLangRunnable> r = [[FFTFluidApp_$2_$1 alloc] initWithFFTFluidApp_$2:self];
  [((id<FFTSystemService>) nil_chk([this$0_ getSystemService])) runOnUiThreadWithJavaLangRunnable:r];
}

- (id)initWithFFTFluidApp:(FFTFluidApp *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTFluidApp:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.FluidApp;", NULL,  },
  };
  static J2ObjcClassInfo _FFTFluidApp_$2 = { "$2", "com.sponberg.fluid", "FluidApp", 0x8000, 2, methods, 1, fields, 0, NULL};
  return &_FFTFluidApp_$2;
}

@end

@implementation FFTFluidApp_$2_$1

- (void)run {
  [this$0_->this$0_ reloadWithFFTCallback:nil];
}

- (id)initWithFFTFluidApp_$2:(FFTFluidApp_$2 *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithFFTFluidApp_$2:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.sponberg.fluid.FluidApp$2;", NULL,  },
  };
  static J2ObjcClassInfo _FFTFluidApp_$2_$1 = { "$1", "com.sponberg.fluid", "FluidApp$$2", 0x8000, 2, methods, 1, fields, 0, NULL};
  return &_FFTFluidApp_$2_$1;
}

@end
