//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src-delomboked/com/sponberg/fluid/SecurityServiceWrapper.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/eclipsesource/json/JsonObject.h"
#include "com/sponberg/fluid/HttpService.h"
#include "com/sponberg/fluid/HttpServiceCallback.h"
#include "com/sponberg/fluid/HttpServiceWrapper.h"
#include "com/sponberg/fluid/SecurityServiceWrapper.h"
#include "com/sponberg/fluid/util/Logger.h"
#include "com/sponberg/fluid/util/PrettyPrint.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation FFTSecurityServiceWrapper

- (id)initWithFFTHttpService:(id<FFTHttpService>)httpService {
  if (self = [super init]) {
    mapMode_ = FFTSecurityServiceWrapper_MapModeEnum_get_Jsonify();
    self->httpService_ = httpService;
  }
  return self;
}

- (void)getWithNSString:(NSString *)URL
    withJavaUtilHashMap:(JavaUtilHashMap *)parameters
withFFTHttpService_HttpAuthorization:(FFTHttpService_HttpAuthorization *)auth
withFFTHttpServiceCallback:(id<FFTHttpServiceCallback>)callback {
  [FFTLogger debugWithId:self withNSString:@"Http Get {} {}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ URL, [FFTPrettyPrint toStringWithJavaUtilMap:parameters] } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
  if (mapMode_ == FFTSecurityServiceWrapper_MapModeEnum_get_Jsonify()) {
    parameters = [FFTSecurityServiceWrapper jsonifyMapsWithJavaUtilMap:parameters];
  }
  else if (mapMode_ == FFTSecurityServiceWrapper_MapModeEnum_get_Bracketify()) {
    parameters = [FFTSecurityServiceWrapper bracketifyMapsWithJavaUtilMap:parameters];
  }
  [((id<FFTHttpService>) nil_chk(httpService_)) getWithNSString:URL withJavaUtilHashMap:parameters withFFTHttpService_HttpAuthorization:auth withFFTHttpServiceCallback:callback];
}

- (void)getBinaryWithNSString:(NSString *)URL
          withJavaUtilHashMap:(JavaUtilHashMap *)parameters
withFFTHttpService_HttpAuthorization:(FFTHttpService_HttpAuthorization *)auth
   withFFTHttpServiceCallback:(id<FFTHttpServiceCallback>)callback {
  [FFTLogger debugWithId:self withNSString:@"Http Get Binary {} {}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ URL, [FFTPrettyPrint toStringWithJavaUtilMap:parameters] } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
  if (parameters != nil) {
    if (mapMode_ == FFTSecurityServiceWrapper_MapModeEnum_get_Jsonify()) {
      parameters = [FFTSecurityServiceWrapper jsonifyMapsWithJavaUtilMap:parameters];
    }
    else if (mapMode_ == FFTSecurityServiceWrapper_MapModeEnum_get_Bracketify()) {
      parameters = [FFTSecurityServiceWrapper bracketifyMapsWithJavaUtilMap:parameters];
    }
  }
  [((id<FFTHttpService>) nil_chk(httpService_)) getBinaryWithNSString:URL withJavaUtilHashMap:parameters withFFTHttpService_HttpAuthorization:auth withFFTHttpServiceCallback:callback];
}

- (void)postWithNSString:(NSString *)URL
     withJavaUtilHashMap:(JavaUtilHashMap *)parameters
withFFTHttpService_HttpAuthorization:(FFTHttpService_HttpAuthorization *)auth
withFFTHttpServiceCallback:(id<FFTHttpServiceCallback>)callback {
  [FFTLogger debugWithId:self withNSString:@"Http Post {} {}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ URL, [FFTPrettyPrint toStringWithJavaUtilMap:parameters] } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
  if (mapMode_ == FFTSecurityServiceWrapper_MapModeEnum_get_Jsonify()) {
    parameters = [FFTSecurityServiceWrapper jsonifyMapsWithJavaUtilMap:parameters];
  }
  else if (mapMode_ == FFTSecurityServiceWrapper_MapModeEnum_get_Bracketify()) {
    parameters = [FFTSecurityServiceWrapper bracketifyMapsWithJavaUtilMap:parameters];
  }
  [((id<FFTHttpService>) nil_chk(httpService_)) postWithNSString:URL withJavaUtilHashMap:parameters withFFTHttpService_HttpAuthorization:auth withFFTHttpServiceCallback:callback];
}

- (void)postWithNSString:(NSString *)URL
     withJavaUtilHashMap:(JavaUtilHashMap *)parameters
withFFTHttpService_PostBodyTypeEnum:(FFTHttpService_PostBodyTypeEnum *)postBodyType
withFFTHttpServiceWrapper_MapModeEnum:(FFTHttpServiceWrapper_MapModeEnum *)mapMode
withFFTHttpService_HttpAuthorization:(FFTHttpService_HttpAuthorization *)auth
withFFTHttpServiceCallback:(id<FFTHttpServiceCallback>)callback {
  [FFTLogger debugWithId:self withNSString:@"Http Post {} {}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ URL, [FFTPrettyPrint toStringWithJavaUtilMap:parameters] } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
  if (mapMode == FFTHttpServiceWrapper_MapModeEnum_get_Jsonify()) {
    parameters = [FFTSecurityServiceWrapper jsonifyMapsWithJavaUtilMap:parameters];
  }
  [((id<FFTHttpService>) nil_chk(httpService_)) postWithNSString:URL withJavaUtilHashMap:parameters withFFTHttpService_PostBodyTypeEnum:postBodyType withFFTHttpService_HttpAuthorization:auth withFFTHttpServiceCallback:callback];
}

- (void)postRawWithNSString:(NSString *)URL
               withNSString:(NSString *)rawPost
withFFTHttpService_HttpAuthorization:(FFTHttpService_HttpAuthorization *)auth
 withFFTHttpServiceCallback:(id<FFTHttpServiceCallback>)callback {
  [FFTLogger debugWithId:self withNSString:@"Http Post {} {}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ URL, rawPost } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
  [((id<FFTHttpService>) nil_chk(httpService_)) postRawWithNSString:URL withNSString:rawPost withFFTHttpService_HttpAuthorization:auth withFFTHttpServiceCallback:callback];
}

- (void)putWithNSString:(NSString *)URL
    withJavaUtilHashMap:(JavaUtilHashMap *)parameters
withFFTHttpService_HttpAuthorization:(FFTHttpService_HttpAuthorization *)auth
withFFTHttpServiceCallback:(id<FFTHttpServiceCallback>)callback {
  [FFTLogger debugWithId:self withNSString:@"Http Put {} {}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ URL, [FFTPrettyPrint toStringWithJavaUtilMap:parameters] } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
  if (mapMode_ == FFTSecurityServiceWrapper_MapModeEnum_get_Jsonify()) {
    parameters = [FFTSecurityServiceWrapper jsonifyMapsWithJavaUtilMap:parameters];
  }
  else if (mapMode_ == FFTSecurityServiceWrapper_MapModeEnum_get_Bracketify()) {
    parameters = [FFTSecurityServiceWrapper bracketifyMapsWithJavaUtilMap:parameters];
  }
  [((id<FFTHttpService>) nil_chk(httpService_)) putWithNSString:URL withJavaUtilHashMap:parameters withFFTHttpService_HttpAuthorization:auth withFFTHttpServiceCallback:callback];
}

+ (JavaUtilHashMap *)jsonifyMapsWithJavaUtilMap:(id<JavaUtilMap>)parameters {
  JavaUtilHashMap *map = [[JavaUtilHashMap alloc] init];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(parameters)) entrySet])) {
    id value = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    if ([value conformsToProtocol: @protocol(JavaUtilMap)]) {
      (void) [map putWithId:[entry_ getKey] withId:[FFTSecurityServiceWrapper jsonifyMapsHelperWithJavaUtilMap:(id<JavaUtilMap>) check_protocol_cast(value, @protocol(JavaUtilMap))]];
    }
    else {
      (void) [map putWithId:[entry_ getKey] withId:value];
    }
  }
  return map;
}

+ (NSString *)jsonifyMapsHelperWithJavaUtilMap:(id<JavaUtilMap>)parameters {
  FFTJsonObject *json = [[FFTJsonObject alloc] init];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(parameters)) entrySet])) {
    if ([[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue] conformsToProtocol: @protocol(JavaUtilMap)]) {
      (void) [json addWithNSString:[entry_ getKey] withNSString:[FFTSecurityServiceWrapper jsonifyMapsHelperWithJavaUtilMap:(id<JavaUtilMap>) check_protocol_cast([entry_ getValue], @protocol(JavaUtilMap))]];
    }
    else {
      (void) [json addWithNSString:[entry_ getKey] withNSString:[nil_chk([entry_ getValue]) description]];
    }
  }
  return [json description];
}

+ (JavaUtilHashMap *)bracketifyMapsWithJavaUtilMap:(id<JavaUtilMap>)parameters {
  JavaUtilHashMap *map = [[JavaUtilHashMap alloc] init];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(parameters)) entrySet])) {
    id value = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    if ([value conformsToProtocol: @protocol(JavaUtilMap)]) {
      [FFTSecurityServiceWrapper bracketifyMapsHelperWithJavaUtilHashMap:map withNSString:[entry_ getKey] withJavaUtilMap:(id<JavaUtilMap>) check_protocol_cast(value, @protocol(JavaUtilMap))];
    }
    else {
      (void) [map putWithId:[entry_ getKey] withId:value];
    }
  }
  return map;
}

+ (void)bracketifyMapsHelperWithJavaUtilHashMap:(JavaUtilHashMap *)map
                                   withNSString:(NSString *)prefix
                                withJavaUtilMap:(id<JavaUtilMap>)parameters {
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(parameters)) entrySet])) {
    id value = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    if ([value conformsToProtocol: @protocol(JavaUtilMap)]) {
      [FFTSecurityServiceWrapper bracketifyMapsHelperWithJavaUtilHashMap:map withNSString:[NSString stringWithFormat:@"%@[%@]", prefix, [entry_ getKey]] withJavaUtilMap:(id<JavaUtilMap>) check_protocol_cast(value, @protocol(JavaUtilMap))];
    }
    else {
      (void) [((JavaUtilHashMap *) nil_chk(map)) putWithId:[NSString stringWithFormat:@"%@[%@]", prefix, [entry_ getKey]] withId:value];
    }
  }
}

- (void)postWithNSString:(NSString *)URL
     withJavaUtilHashMap:(JavaUtilHashMap *)parameters
withFFTHttpService_PostBodyTypeEnum:(FFTHttpService_PostBodyTypeEnum *)postBodyType
withFFTHttpService_HttpAuthorization:(FFTHttpService_HttpAuthorization *)auth
withFFTHttpServiceCallback:(id<FFTHttpServiceCallback>)callback {
}

- (id<FFTHttpService>)getHttpService {
  return self->httpService_;
}

- (FFTSecurityServiceWrapper_MapModeEnum *)getMapMode {
  return self->mapMode_;
}

- (void)setMapModeWithFFTSecurityServiceWrapper_MapModeEnum:(FFTSecurityServiceWrapper_MapModeEnum *)mapMode {
  self->mapMode_ = mapMode;
}

- (BOOL)isEqual:(id)o {
  if (o == self) return YES;
  if (!([o isKindOfClass:[FFTSecurityServiceWrapper class]])) return NO;
  FFTSecurityServiceWrapper *other = (FFTSecurityServiceWrapper *) check_class_cast(o, [FFTSecurityServiceWrapper class]);
  if (![((FFTSecurityServiceWrapper *) nil_chk(other)) canEqualWithId:(id) check_class_cast(self, [NSObject class])]) return NO;
  id this$httpService = [self getHttpService];
  id other$httpService = [other getHttpService];
  if (this$httpService == nil ? other$httpService != nil : ![this$httpService isEqual:other$httpService]) return NO;
  id this$mapMode = [self getMapMode];
  id other$mapMode = [other getMapMode];
  if (this$mapMode == nil ? other$mapMode != nil : ![this$mapMode isEqual:other$mapMode]) return NO;
  return YES;
}

- (BOOL)canEqualWithId:(id)other {
  return [other isKindOfClass:[FFTSecurityServiceWrapper class]];
}

- (NSUInteger)hash {
  int PRIME = 59;
  int result = 1;
  id $httpService = [self getHttpService];
  result = result * PRIME + ($httpService == nil ? 0 : ((int) [$httpService hash]));
  id $mapMode = [self getMapMode];
  result = result * PRIME + ($mapMode == nil ? 0 : ((int) [$mapMode hash]));
  return result;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"SecurityServiceWrapper(httpService=%@, mapMode=%@)", [self getHttpService], [self getMapMode]];
}

- (void)copyAllFieldsTo:(FFTSecurityServiceWrapper *)other {
  [super copyAllFieldsTo:other];
  other->httpService_ = httpService_;
  other->mapMode_ = mapMode_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithFFTHttpService:", "SecurityServiceWrapper", NULL, 0x1, NULL },
    { "getWithNSString:withJavaUtilHashMap:withFFTHttpService_HttpAuthorization:withFFTHttpServiceCallback:", "get", "V", 0x1, NULL },
    { "getBinaryWithNSString:withJavaUtilHashMap:withFFTHttpService_HttpAuthorization:withFFTHttpServiceCallback:", "getBinary", "V", 0x1, NULL },
    { "postWithNSString:withJavaUtilHashMap:withFFTHttpService_HttpAuthorization:withFFTHttpServiceCallback:", "post", "V", 0x1, NULL },
    { "postWithNSString:withJavaUtilHashMap:withFFTHttpService_PostBodyTypeEnum:withFFTHttpServiceWrapper_MapModeEnum:withFFTHttpService_HttpAuthorization:withFFTHttpServiceCallback:", "post", "V", 0x1, NULL },
    { "postRawWithNSString:withNSString:withFFTHttpService_HttpAuthorization:withFFTHttpServiceCallback:", "postRaw", "V", 0x1, NULL },
    { "putWithNSString:withJavaUtilHashMap:withFFTHttpService_HttpAuthorization:withFFTHttpServiceCallback:", "put", "V", 0x1, NULL },
    { "jsonifyMapsWithJavaUtilMap:", "jsonifyMaps", "Ljava.util.HashMap;", 0xc, NULL },
    { "jsonifyMapsHelperWithJavaUtilMap:", "jsonifyMapsHelper", "Ljava.lang.String;", 0xc, NULL },
    { "bracketifyMapsWithJavaUtilMap:", "bracketifyMaps", "Ljava.util.HashMap;", 0xc, NULL },
    { "bracketifyMapsHelperWithJavaUtilHashMap:withNSString:withJavaUtilMap:", "bracketifyMapsHelper", "V", 0xc, NULL },
    { "postWithNSString:withJavaUtilHashMap:withFFTHttpService_PostBodyTypeEnum:withFFTHttpService_HttpAuthorization:withFFTHttpServiceCallback:", "post", "V", 0x1, NULL },
    { "getHttpService", NULL, "Lcom.sponberg.fluid.HttpService;", 0x1, NULL },
    { "getMapMode", NULL, "Lcom.sponberg.fluid.SecurityServiceWrapper$MapMode;", 0x1, NULL },
    { "setMapModeWithFFTSecurityServiceWrapper_MapModeEnum:", "setMapMode", "V", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "canEqualWithId:", "canEqual", "Z", 0x4, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "httpService_", NULL, 0x10, "Lcom.sponberg.fluid.HttpService;", NULL,  },
    { "mapMode_", NULL, 0x2, "Lcom.sponberg.fluid.SecurityServiceWrapper$MapMode;", NULL,  },
  };
  static J2ObjcClassInfo _FFTSecurityServiceWrapper = { "SecurityServiceWrapper", "com.sponberg.fluid", NULL, 0x1, 19, methods, 2, fields, 0, NULL};
  return &_FFTSecurityServiceWrapper;
}

@end

BOOL FFTSecurityServiceWrapper_MapModeEnum_initialized = NO;

FFTSecurityServiceWrapper_MapModeEnum *FFTSecurityServiceWrapper_MapModeEnum_values[2];

@implementation FFTSecurityServiceWrapper_MapModeEnum

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (id)initWithNSString:(NSString *)__name withInt:(int)__ordinal {
  return [super initWithNSString:__name withInt:__ordinal];
}

+ (void)initialize {
  if (self == [FFTSecurityServiceWrapper_MapModeEnum class]) {
    FFTSecurityServiceWrapper_MapModeEnum_Jsonify = [[FFTSecurityServiceWrapper_MapModeEnum alloc] initWithNSString:@"Jsonify" withInt:0];
    FFTSecurityServiceWrapper_MapModeEnum_Bracketify = [[FFTSecurityServiceWrapper_MapModeEnum alloc] initWithNSString:@"Bracketify" withInt:1];
    FFTSecurityServiceWrapper_MapModeEnum_initialized = YES;
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithObjects:FFTSecurityServiceWrapper_MapModeEnum_values count:2 type:[IOSClass classWithClass:[FFTSecurityServiceWrapper_MapModeEnum class]]];
}

+ (FFTSecurityServiceWrapper_MapModeEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < 2; i++) {
    FFTSecurityServiceWrapper_MapModeEnum *e = FFTSecurityServiceWrapper_MapModeEnum_values[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "Jsonify", "Jsonify", 0x4019, "Lcom.sponberg.fluid.SecurityServiceWrapper$MapMode;", &FFTSecurityServiceWrapper_MapModeEnum_Jsonify,  },
    { "Bracketify", "Bracketify", 0x4019, "Lcom.sponberg.fluid.SecurityServiceWrapper$MapMode;", &FFTSecurityServiceWrapper_MapModeEnum_Bracketify,  },
  };
  static const char *superclass_type_args[] = {"Lcom.sponberg.fluid.SecurityServiceWrapper$MapMode;"};
  static J2ObjcClassInfo _FFTSecurityServiceWrapper_MapModeEnum = { "MapMode", "com.sponberg.fluid", "SecurityServiceWrapper", 0x4019, 1, methods, 2, fields, 1, superclass_type_args};
  return &_FFTSecurityServiceWrapper_MapModeEnum;
}

@end
